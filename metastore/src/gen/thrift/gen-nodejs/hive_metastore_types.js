//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var fb303_ttypes = require('./fb303_types')


var ttypes = module.exports = {};
ttypes.HiveObjectType = {
  'GLOBAL' : 1,
  'DATABASE' : 2,
  'TABLE' : 3,
  'PARTITION' : 4,
  'COLUMN' : 5
};
ttypes.PrincipalType = {
  'USER' : 1,
  'ROLE' : 2,
  'GROUP' : 3
};
ttypes.PartitionEventType = {
  'LOAD_DONE' : 1
};
ttypes.TxnState = {
  'COMMITTED' : 1,
  'ABORTED' : 2,
  'OPEN' : 3
};
ttypes.LockLevel = {
  'DB' : 1,
  'TABLE' : 2,
  'PARTITION' : 3
};
ttypes.LockState = {
  'ACQUIRED' : 1,
  'WAITING' : 2,
  'ABORT' : 3,
  'NOT_ACQUIRED' : 4
};
ttypes.LockType = {
  'SHARED_READ' : 1,
  'SHARED_WRITE' : 2,
  'EXCLUSIVE' : 3
};
ttypes.CompactionType = {
  'MINOR' : 1,
  'MAJOR' : 2
};
ttypes.GrantRevokeType = {
  'GRANT' : 1,
  'REVOKE' : 2
};
ttypes.FunctionType = {
  'JAVA' : 1
};
ttypes.ResourceType = {
  'JAR' : 1,
  'FILE' : 2,
  'ARCHIVE' : 3
};
Version = module.exports.Version = function(args) {
  this.version = null;
  this.comments = null;
  if (args) {
    if (args.version !== undefined) {
      this.version = args.version;
    }
    if (args.comments !== undefined) {
      this.comments = args.comments;
    }
  }
};
Version.prototype = {};
Version.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.comments = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Version.prototype.write = function(output) {
  output.writeStructBegin('Version');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 1);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.comments !== null && this.comments !== undefined) {
    output.writeFieldBegin('comments', Thrift.Type.STRING, 2);
    output.writeString(this.comments);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FieldSchema = module.exports.FieldSchema = function(args) {
  this.name = null;
  this.type = null;
  this.comment = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.comment !== undefined) {
      this.comment = args.comment;
    }
  }
};
FieldSchema.prototype = {};
FieldSchema.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FieldSchema.prototype.write = function(output) {
  output.writeStructBegin('FieldSchema');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 3);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Type = module.exports.Type = function(args) {
  this.name = null;
  this.type1 = null;
  this.type2 = null;
  this.fields = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.type1 !== undefined) {
      this.type1 = args.type1;
    }
    if (args.type2 !== undefined) {
      this.type2 = args.type2;
    }
    if (args.fields !== undefined) {
      this.fields = args.fields;
    }
  }
};
Type.prototype = {};
Type.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.type2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.fields = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.FieldSchema();
          elem6.read(input);
          this.fields.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Type.prototype.write = function(output) {
  output.writeStructBegin('Type');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type1 !== null && this.type1 !== undefined) {
    output.writeFieldBegin('type1', Thrift.Type.STRING, 2);
    output.writeString(this.type1);
    output.writeFieldEnd();
  }
  if (this.type2 !== null && this.type2 !== undefined) {
    output.writeFieldBegin('type2', Thrift.Type.STRING, 3);
    output.writeString(this.type2);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.fields.length);
    for (var iter7 in this.fields)
    {
      if (this.fields.hasOwnProperty(iter7))
      {
        iter7 = this.fields[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HiveObjectRef = module.exports.HiveObjectRef = function(args) {
  this.objectType = null;
  this.dbName = null;
  this.objectName = null;
  this.partValues = null;
  this.columnName = null;
  if (args) {
    if (args.objectType !== undefined) {
      this.objectType = args.objectType;
    }
    if (args.dbName !== undefined) {
      this.dbName = args.dbName;
    }
    if (args.objectName !== undefined) {
      this.objectName = args.objectName;
    }
    if (args.partValues !== undefined) {
      this.partValues = args.partValues;
    }
    if (args.columnName !== undefined) {
      this.columnName = args.columnName;
    }
  }
};
HiveObjectRef.prototype = {};
HiveObjectRef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.objectType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.objectName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.partValues = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString();
          this.partValues.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.columnName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HiveObjectRef.prototype.write = function(output) {
  output.writeStructBegin('HiveObjectRef');
  if (this.objectType !== null && this.objectType !== undefined) {
    output.writeFieldBegin('objectType', Thrift.Type.I32, 1);
    output.writeI32(this.objectType);
    output.writeFieldEnd();
  }
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 2);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.objectName !== null && this.objectName !== undefined) {
    output.writeFieldBegin('objectName', Thrift.Type.STRING, 3);
    output.writeString(this.objectName);
    output.writeFieldEnd();
  }
  if (this.partValues !== null && this.partValues !== undefined) {
    output.writeFieldBegin('partValues', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.partValues.length);
    for (var iter15 in this.partValues)
    {
      if (this.partValues.hasOwnProperty(iter15))
      {
        iter15 = this.partValues[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.columnName !== null && this.columnName !== undefined) {
    output.writeFieldBegin('columnName', Thrift.Type.STRING, 5);
    output.writeString(this.columnName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrivilegeGrantInfo = module.exports.PrivilegeGrantInfo = function(args) {
  this.privilege = null;
  this.createTime = null;
  this.grantor = null;
  this.grantorType = null;
  this.grantOption = null;
  if (args) {
    if (args.privilege !== undefined) {
      this.privilege = args.privilege;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.grantor !== undefined) {
      this.grantor = args.grantor;
    }
    if (args.grantorType !== undefined) {
      this.grantorType = args.grantorType;
    }
    if (args.grantOption !== undefined) {
      this.grantOption = args.grantOption;
    }
  }
};
PrivilegeGrantInfo.prototype = {};
PrivilegeGrantInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.privilege = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.grantor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.grantorType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.grantOption = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrivilegeGrantInfo.prototype.write = function(output) {
  output.writeStructBegin('PrivilegeGrantInfo');
  if (this.privilege !== null && this.privilege !== undefined) {
    output.writeFieldBegin('privilege', Thrift.Type.STRING, 1);
    output.writeString(this.privilege);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 2);
    output.writeI32(this.createTime);
    output.writeFieldEnd();
  }
  if (this.grantor !== null && this.grantor !== undefined) {
    output.writeFieldBegin('grantor', Thrift.Type.STRING, 3);
    output.writeString(this.grantor);
    output.writeFieldEnd();
  }
  if (this.grantorType !== null && this.grantorType !== undefined) {
    output.writeFieldBegin('grantorType', Thrift.Type.I32, 4);
    output.writeI32(this.grantorType);
    output.writeFieldEnd();
  }
  if (this.grantOption !== null && this.grantOption !== undefined) {
    output.writeFieldBegin('grantOption', Thrift.Type.BOOL, 5);
    output.writeBool(this.grantOption);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HiveObjectPrivilege = module.exports.HiveObjectPrivilege = function(args) {
  this.hiveObject = null;
  this.principalName = null;
  this.principalType = null;
  this.grantInfo = null;
  if (args) {
    if (args.hiveObject !== undefined) {
      this.hiveObject = args.hiveObject;
    }
    if (args.principalName !== undefined) {
      this.principalName = args.principalName;
    }
    if (args.principalType !== undefined) {
      this.principalType = args.principalType;
    }
    if (args.grantInfo !== undefined) {
      this.grantInfo = args.grantInfo;
    }
  }
};
HiveObjectPrivilege.prototype = {};
HiveObjectPrivilege.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.hiveObject = new ttypes.HiveObjectRef();
        this.hiveObject.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.principalName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.principalType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.grantInfo = new ttypes.PrivilegeGrantInfo();
        this.grantInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HiveObjectPrivilege.prototype.write = function(output) {
  output.writeStructBegin('HiveObjectPrivilege');
  if (this.hiveObject !== null && this.hiveObject !== undefined) {
    output.writeFieldBegin('hiveObject', Thrift.Type.STRUCT, 1);
    this.hiveObject.write(output);
    output.writeFieldEnd();
  }
  if (this.principalName !== null && this.principalName !== undefined) {
    output.writeFieldBegin('principalName', Thrift.Type.STRING, 2);
    output.writeString(this.principalName);
    output.writeFieldEnd();
  }
  if (this.principalType !== null && this.principalType !== undefined) {
    output.writeFieldBegin('principalType', Thrift.Type.I32, 3);
    output.writeI32(this.principalType);
    output.writeFieldEnd();
  }
  if (this.grantInfo !== null && this.grantInfo !== undefined) {
    output.writeFieldBegin('grantInfo', Thrift.Type.STRUCT, 4);
    this.grantInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrivilegeBag = module.exports.PrivilegeBag = function(args) {
  this.privileges = null;
  if (args) {
    if (args.privileges !== undefined) {
      this.privileges = args.privileges;
    }
  }
};
PrivilegeBag.prototype = {};
PrivilegeBag.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.privileges = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.HiveObjectPrivilege();
          elem22.read(input);
          this.privileges.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrivilegeBag.prototype.write = function(output) {
  output.writeStructBegin('PrivilegeBag');
  if (this.privileges !== null && this.privileges !== undefined) {
    output.writeFieldBegin('privileges', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.privileges.length);
    for (var iter23 in this.privileges)
    {
      if (this.privileges.hasOwnProperty(iter23))
      {
        iter23 = this.privileges[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrincipalPrivilegeSet = module.exports.PrincipalPrivilegeSet = function(args) {
  this.userPrivileges = null;
  this.groupPrivileges = null;
  this.rolePrivileges = null;
  if (args) {
    if (args.userPrivileges !== undefined) {
      this.userPrivileges = args.userPrivileges;
    }
    if (args.groupPrivileges !== undefined) {
      this.groupPrivileges = args.groupPrivileges;
    }
    if (args.rolePrivileges !== undefined) {
      this.rolePrivileges = args.rolePrivileges;
    }
  }
};
PrincipalPrivilegeSet.prototype = {};
PrincipalPrivilegeSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size24 = 0;
        var _rtmp328;
        this.userPrivileges = {};
        var _ktype25 = 0;
        var _vtype26 = 0;
        _rtmp328 = input.readMapBegin();
        _ktype25 = _rtmp328.ktype;
        _vtype26 = _rtmp328.vtype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var key30 = null;
          var val31 = null;
          key30 = input.readString();
          var _size32 = 0;
          var _rtmp336;
          val31 = [];
          var _etype35 = 0;
          _rtmp336 = input.readListBegin();
          _etype35 = _rtmp336.etype;
          _size32 = _rtmp336.size;
          for (var _i37 = 0; _i37 < _size32; ++_i37)
          {
            var elem38 = null;
            elem38 = new ttypes.PrivilegeGrantInfo();
            elem38.read(input);
            val31.push(elem38);
          }
          input.readListEnd();
          this.userPrivileges[key30] = val31;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size39 = 0;
        var _rtmp343;
        this.groupPrivileges = {};
        var _ktype40 = 0;
        var _vtype41 = 0;
        _rtmp343 = input.readMapBegin();
        _ktype40 = _rtmp343.ktype;
        _vtype41 = _rtmp343.vtype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var key45 = null;
          var val46 = null;
          key45 = input.readString();
          var _size47 = 0;
          var _rtmp351;
          val46 = [];
          var _etype50 = 0;
          _rtmp351 = input.readListBegin();
          _etype50 = _rtmp351.etype;
          _size47 = _rtmp351.size;
          for (var _i52 = 0; _i52 < _size47; ++_i52)
          {
            var elem53 = null;
            elem53 = new ttypes.PrivilegeGrantInfo();
            elem53.read(input);
            val46.push(elem53);
          }
          input.readListEnd();
          this.groupPrivileges[key45] = val46;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size54 = 0;
        var _rtmp358;
        this.rolePrivileges = {};
        var _ktype55 = 0;
        var _vtype56 = 0;
        _rtmp358 = input.readMapBegin();
        _ktype55 = _rtmp358.ktype;
        _vtype56 = _rtmp358.vtype;
        _size54 = _rtmp358.size;
        for (var _i59 = 0; _i59 < _size54; ++_i59)
        {
          var key60 = null;
          var val61 = null;
          key60 = input.readString();
          var _size62 = 0;
          var _rtmp366;
          val61 = [];
          var _etype65 = 0;
          _rtmp366 = input.readListBegin();
          _etype65 = _rtmp366.etype;
          _size62 = _rtmp366.size;
          for (var _i67 = 0; _i67 < _size62; ++_i67)
          {
            var elem68 = null;
            elem68 = new ttypes.PrivilegeGrantInfo();
            elem68.read(input);
            val61.push(elem68);
          }
          input.readListEnd();
          this.rolePrivileges[key60] = val61;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrincipalPrivilegeSet.prototype.write = function(output) {
  output.writeStructBegin('PrincipalPrivilegeSet');
  if (this.userPrivileges !== null && this.userPrivileges !== undefined) {
    output.writeFieldBegin('userPrivileges', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.userPrivileges));
    for (var kiter69 in this.userPrivileges)
    {
      if (this.userPrivileges.hasOwnProperty(kiter69))
      {
        var viter70 = this.userPrivileges[kiter69];
        output.writeString(kiter69);
        output.writeListBegin(Thrift.Type.STRUCT, viter70.length);
        for (var iter71 in viter70)
        {
          if (viter70.hasOwnProperty(iter71))
          {
            iter71 = viter70[iter71];
            iter71.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.groupPrivileges !== null && this.groupPrivileges !== undefined) {
    output.writeFieldBegin('groupPrivileges', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.groupPrivileges));
    for (var kiter72 in this.groupPrivileges)
    {
      if (this.groupPrivileges.hasOwnProperty(kiter72))
      {
        var viter73 = this.groupPrivileges[kiter72];
        output.writeString(kiter72);
        output.writeListBegin(Thrift.Type.STRUCT, viter73.length);
        for (var iter74 in viter73)
        {
          if (viter73.hasOwnProperty(iter74))
          {
            iter74 = viter73[iter74];
            iter74.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.rolePrivileges !== null && this.rolePrivileges !== undefined) {
    output.writeFieldBegin('rolePrivileges', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.rolePrivileges));
    for (var kiter75 in this.rolePrivileges)
    {
      if (this.rolePrivileges.hasOwnProperty(kiter75))
      {
        var viter76 = this.rolePrivileges[kiter75];
        output.writeString(kiter75);
        output.writeListBegin(Thrift.Type.STRUCT, viter76.length);
        for (var iter77 in viter76)
        {
          if (viter76.hasOwnProperty(iter77))
          {
            iter77 = viter76[iter77];
            iter77.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GrantRevokePrivilegeRequest = module.exports.GrantRevokePrivilegeRequest = function(args) {
  this.requestType = null;
  this.privileges = null;
  this.revokeGrantOption = null;
  if (args) {
    if (args.requestType !== undefined) {
      this.requestType = args.requestType;
    }
    if (args.privileges !== undefined) {
      this.privileges = args.privileges;
    }
    if (args.revokeGrantOption !== undefined) {
      this.revokeGrantOption = args.revokeGrantOption;
    }
  }
};
GrantRevokePrivilegeRequest.prototype = {};
GrantRevokePrivilegeRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.requestType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.privileges = new ttypes.PrivilegeBag();
        this.privileges.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.revokeGrantOption = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GrantRevokePrivilegeRequest.prototype.write = function(output) {
  output.writeStructBegin('GrantRevokePrivilegeRequest');
  if (this.requestType !== null && this.requestType !== undefined) {
    output.writeFieldBegin('requestType', Thrift.Type.I32, 1);
    output.writeI32(this.requestType);
    output.writeFieldEnd();
  }
  if (this.privileges !== null && this.privileges !== undefined) {
    output.writeFieldBegin('privileges', Thrift.Type.STRUCT, 2);
    this.privileges.write(output);
    output.writeFieldEnd();
  }
  if (this.revokeGrantOption !== null && this.revokeGrantOption !== undefined) {
    output.writeFieldBegin('revokeGrantOption', Thrift.Type.BOOL, 3);
    output.writeBool(this.revokeGrantOption);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GrantRevokePrivilegeResponse = module.exports.GrantRevokePrivilegeResponse = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
GrantRevokePrivilegeResponse.prototype = {};
GrantRevokePrivilegeResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GrantRevokePrivilegeResponse.prototype.write = function(output) {
  output.writeStructBegin('GrantRevokePrivilegeResponse');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Role = module.exports.Role = function(args) {
  this.roleName = null;
  this.createTime = null;
  this.ownerName = null;
  if (args) {
    if (args.roleName !== undefined) {
      this.roleName = args.roleName;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.ownerName !== undefined) {
      this.ownerName = args.ownerName;
    }
  }
};
Role.prototype = {};
Role.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.roleName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ownerName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Role.prototype.write = function(output) {
  output.writeStructBegin('Role');
  if (this.roleName !== null && this.roleName !== undefined) {
    output.writeFieldBegin('roleName', Thrift.Type.STRING, 1);
    output.writeString(this.roleName);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 2);
    output.writeI32(this.createTime);
    output.writeFieldEnd();
  }
  if (this.ownerName !== null && this.ownerName !== undefined) {
    output.writeFieldBegin('ownerName', Thrift.Type.STRING, 3);
    output.writeString(this.ownerName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RolePrincipalGrant = module.exports.RolePrincipalGrant = function(args) {
  this.roleName = null;
  this.principalName = null;
  this.principalType = null;
  this.grantOption = null;
  this.grantTime = null;
  this.grantorName = null;
  this.grantorPrincipalType = null;
  if (args) {
    if (args.roleName !== undefined) {
      this.roleName = args.roleName;
    }
    if (args.principalName !== undefined) {
      this.principalName = args.principalName;
    }
    if (args.principalType !== undefined) {
      this.principalType = args.principalType;
    }
    if (args.grantOption !== undefined) {
      this.grantOption = args.grantOption;
    }
    if (args.grantTime !== undefined) {
      this.grantTime = args.grantTime;
    }
    if (args.grantorName !== undefined) {
      this.grantorName = args.grantorName;
    }
    if (args.grantorPrincipalType !== undefined) {
      this.grantorPrincipalType = args.grantorPrincipalType;
    }
  }
};
RolePrincipalGrant.prototype = {};
RolePrincipalGrant.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.roleName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.principalName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.principalType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.grantOption = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.grantTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.grantorName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.grantorPrincipalType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RolePrincipalGrant.prototype.write = function(output) {
  output.writeStructBegin('RolePrincipalGrant');
  if (this.roleName !== null && this.roleName !== undefined) {
    output.writeFieldBegin('roleName', Thrift.Type.STRING, 1);
    output.writeString(this.roleName);
    output.writeFieldEnd();
  }
  if (this.principalName !== null && this.principalName !== undefined) {
    output.writeFieldBegin('principalName', Thrift.Type.STRING, 2);
    output.writeString(this.principalName);
    output.writeFieldEnd();
  }
  if (this.principalType !== null && this.principalType !== undefined) {
    output.writeFieldBegin('principalType', Thrift.Type.I32, 3);
    output.writeI32(this.principalType);
    output.writeFieldEnd();
  }
  if (this.grantOption !== null && this.grantOption !== undefined) {
    output.writeFieldBegin('grantOption', Thrift.Type.BOOL, 4);
    output.writeBool(this.grantOption);
    output.writeFieldEnd();
  }
  if (this.grantTime !== null && this.grantTime !== undefined) {
    output.writeFieldBegin('grantTime', Thrift.Type.I32, 5);
    output.writeI32(this.grantTime);
    output.writeFieldEnd();
  }
  if (this.grantorName !== null && this.grantorName !== undefined) {
    output.writeFieldBegin('grantorName', Thrift.Type.STRING, 6);
    output.writeString(this.grantorName);
    output.writeFieldEnd();
  }
  if (this.grantorPrincipalType !== null && this.grantorPrincipalType !== undefined) {
    output.writeFieldBegin('grantorPrincipalType', Thrift.Type.I32, 7);
    output.writeI32(this.grantorPrincipalType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetRoleGrantsForPrincipalRequest = module.exports.GetRoleGrantsForPrincipalRequest = function(args) {
  this.principal_name = null;
  this.principal_type = null;
  if (args) {
    if (args.principal_name !== undefined) {
      this.principal_name = args.principal_name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field principal_name is unset!');
    }
    if (args.principal_type !== undefined) {
      this.principal_type = args.principal_type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field principal_type is unset!');
    }
  }
};
GetRoleGrantsForPrincipalRequest.prototype = {};
GetRoleGrantsForPrincipalRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.principal_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.principal_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetRoleGrantsForPrincipalRequest.prototype.write = function(output) {
  output.writeStructBegin('GetRoleGrantsForPrincipalRequest');
  if (this.principal_name !== null && this.principal_name !== undefined) {
    output.writeFieldBegin('principal_name', Thrift.Type.STRING, 1);
    output.writeString(this.principal_name);
    output.writeFieldEnd();
  }
  if (this.principal_type !== null && this.principal_type !== undefined) {
    output.writeFieldBegin('principal_type', Thrift.Type.I32, 2);
    output.writeI32(this.principal_type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetRoleGrantsForPrincipalResponse = module.exports.GetRoleGrantsForPrincipalResponse = function(args) {
  this.principalGrants = null;
  if (args) {
    if (args.principalGrants !== undefined) {
      this.principalGrants = args.principalGrants;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field principalGrants is unset!');
    }
  }
};
GetRoleGrantsForPrincipalResponse.prototype = {};
GetRoleGrantsForPrincipalResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size78 = 0;
        var _rtmp382;
        this.principalGrants = [];
        var _etype81 = 0;
        _rtmp382 = input.readListBegin();
        _etype81 = _rtmp382.etype;
        _size78 = _rtmp382.size;
        for (var _i83 = 0; _i83 < _size78; ++_i83)
        {
          var elem84 = null;
          elem84 = new ttypes.RolePrincipalGrant();
          elem84.read(input);
          this.principalGrants.push(elem84);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetRoleGrantsForPrincipalResponse.prototype.write = function(output) {
  output.writeStructBegin('GetRoleGrantsForPrincipalResponse');
  if (this.principalGrants !== null && this.principalGrants !== undefined) {
    output.writeFieldBegin('principalGrants', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.principalGrants.length);
    for (var iter85 in this.principalGrants)
    {
      if (this.principalGrants.hasOwnProperty(iter85))
      {
        iter85 = this.principalGrants[iter85];
        iter85.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetPrincipalsInRoleRequest = module.exports.GetPrincipalsInRoleRequest = function(args) {
  this.roleName = null;
  if (args) {
    if (args.roleName !== undefined) {
      this.roleName = args.roleName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field roleName is unset!');
    }
  }
};
GetPrincipalsInRoleRequest.prototype = {};
GetPrincipalsInRoleRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.roleName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetPrincipalsInRoleRequest.prototype.write = function(output) {
  output.writeStructBegin('GetPrincipalsInRoleRequest');
  if (this.roleName !== null && this.roleName !== undefined) {
    output.writeFieldBegin('roleName', Thrift.Type.STRING, 1);
    output.writeString(this.roleName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetPrincipalsInRoleResponse = module.exports.GetPrincipalsInRoleResponse = function(args) {
  this.principalGrants = null;
  if (args) {
    if (args.principalGrants !== undefined) {
      this.principalGrants = args.principalGrants;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field principalGrants is unset!');
    }
  }
};
GetPrincipalsInRoleResponse.prototype = {};
GetPrincipalsInRoleResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size86 = 0;
        var _rtmp390;
        this.principalGrants = [];
        var _etype89 = 0;
        _rtmp390 = input.readListBegin();
        _etype89 = _rtmp390.etype;
        _size86 = _rtmp390.size;
        for (var _i91 = 0; _i91 < _size86; ++_i91)
        {
          var elem92 = null;
          elem92 = new ttypes.RolePrincipalGrant();
          elem92.read(input);
          this.principalGrants.push(elem92);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetPrincipalsInRoleResponse.prototype.write = function(output) {
  output.writeStructBegin('GetPrincipalsInRoleResponse');
  if (this.principalGrants !== null && this.principalGrants !== undefined) {
    output.writeFieldBegin('principalGrants', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.principalGrants.length);
    for (var iter93 in this.principalGrants)
    {
      if (this.principalGrants.hasOwnProperty(iter93))
      {
        iter93 = this.principalGrants[iter93];
        iter93.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GrantRevokeRoleRequest = module.exports.GrantRevokeRoleRequest = function(args) {
  this.requestType = null;
  this.roleName = null;
  this.principalName = null;
  this.principalType = null;
  this.grantor = null;
  this.grantorType = null;
  this.grantOption = null;
  if (args) {
    if (args.requestType !== undefined) {
      this.requestType = args.requestType;
    }
    if (args.roleName !== undefined) {
      this.roleName = args.roleName;
    }
    if (args.principalName !== undefined) {
      this.principalName = args.principalName;
    }
    if (args.principalType !== undefined) {
      this.principalType = args.principalType;
    }
    if (args.grantor !== undefined) {
      this.grantor = args.grantor;
    }
    if (args.grantorType !== undefined) {
      this.grantorType = args.grantorType;
    }
    if (args.grantOption !== undefined) {
      this.grantOption = args.grantOption;
    }
  }
};
GrantRevokeRoleRequest.prototype = {};
GrantRevokeRoleRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.requestType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.roleName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.principalName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.principalType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.grantor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.grantorType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.grantOption = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GrantRevokeRoleRequest.prototype.write = function(output) {
  output.writeStructBegin('GrantRevokeRoleRequest');
  if (this.requestType !== null && this.requestType !== undefined) {
    output.writeFieldBegin('requestType', Thrift.Type.I32, 1);
    output.writeI32(this.requestType);
    output.writeFieldEnd();
  }
  if (this.roleName !== null && this.roleName !== undefined) {
    output.writeFieldBegin('roleName', Thrift.Type.STRING, 2);
    output.writeString(this.roleName);
    output.writeFieldEnd();
  }
  if (this.principalName !== null && this.principalName !== undefined) {
    output.writeFieldBegin('principalName', Thrift.Type.STRING, 3);
    output.writeString(this.principalName);
    output.writeFieldEnd();
  }
  if (this.principalType !== null && this.principalType !== undefined) {
    output.writeFieldBegin('principalType', Thrift.Type.I32, 4);
    output.writeI32(this.principalType);
    output.writeFieldEnd();
  }
  if (this.grantor !== null && this.grantor !== undefined) {
    output.writeFieldBegin('grantor', Thrift.Type.STRING, 5);
    output.writeString(this.grantor);
    output.writeFieldEnd();
  }
  if (this.grantorType !== null && this.grantorType !== undefined) {
    output.writeFieldBegin('grantorType', Thrift.Type.I32, 6);
    output.writeI32(this.grantorType);
    output.writeFieldEnd();
  }
  if (this.grantOption !== null && this.grantOption !== undefined) {
    output.writeFieldBegin('grantOption', Thrift.Type.BOOL, 7);
    output.writeBool(this.grantOption);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GrantRevokeRoleResponse = module.exports.GrantRevokeRoleResponse = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
GrantRevokeRoleResponse.prototype = {};
GrantRevokeRoleResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GrantRevokeRoleResponse.prototype.write = function(output) {
  output.writeStructBegin('GrantRevokeRoleResponse');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Database = module.exports.Database = function(args) {
  this.name = null;
  this.description = null;
  this.locationUri = null;
  this.parameters = null;
  this.privileges = null;
  this.ownerName = null;
  this.ownerType = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.description !== undefined) {
      this.description = args.description;
    }
    if (args.locationUri !== undefined) {
      this.locationUri = args.locationUri;
    }
    if (args.parameters !== undefined) {
      this.parameters = args.parameters;
    }
    if (args.privileges !== undefined) {
      this.privileges = args.privileges;
    }
    if (args.ownerName !== undefined) {
      this.ownerName = args.ownerName;
    }
    if (args.ownerType !== undefined) {
      this.ownerType = args.ownerType;
    }
  }
};
Database.prototype = {};
Database.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.locationUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size94 = 0;
        var _rtmp398;
        this.parameters = {};
        var _ktype95 = 0;
        var _vtype96 = 0;
        _rtmp398 = input.readMapBegin();
        _ktype95 = _rtmp398.ktype;
        _vtype96 = _rtmp398.vtype;
        _size94 = _rtmp398.size;
        for (var _i99 = 0; _i99 < _size94; ++_i99)
        {
          var key100 = null;
          var val101 = null;
          key100 = input.readString();
          val101 = input.readString();
          this.parameters[key100] = val101;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.privileges = new ttypes.PrincipalPrivilegeSet();
        this.privileges.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.ownerName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.ownerType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Database.prototype.write = function(output) {
  output.writeStructBegin('Database');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.locationUri !== null && this.locationUri !== undefined) {
    output.writeFieldBegin('locationUri', Thrift.Type.STRING, 3);
    output.writeString(this.locationUri);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters));
    for (var kiter102 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(kiter102))
      {
        var viter103 = this.parameters[kiter102];
        output.writeString(kiter102);
        output.writeString(viter103);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.privileges !== null && this.privileges !== undefined) {
    output.writeFieldBegin('privileges', Thrift.Type.STRUCT, 5);
    this.privileges.write(output);
    output.writeFieldEnd();
  }
  if (this.ownerName !== null && this.ownerName !== undefined) {
    output.writeFieldBegin('ownerName', Thrift.Type.STRING, 6);
    output.writeString(this.ownerName);
    output.writeFieldEnd();
  }
  if (this.ownerType !== null && this.ownerType !== undefined) {
    output.writeFieldBegin('ownerType', Thrift.Type.I32, 7);
    output.writeI32(this.ownerType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SerDeInfo = module.exports.SerDeInfo = function(args) {
  this.name = null;
  this.serializationLib = null;
  this.parameters = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.serializationLib !== undefined) {
      this.serializationLib = args.serializationLib;
    }
    if (args.parameters !== undefined) {
      this.parameters = args.parameters;
    }
  }
};
SerDeInfo.prototype = {};
SerDeInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serializationLib = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size104 = 0;
        var _rtmp3108;
        this.parameters = {};
        var _ktype105 = 0;
        var _vtype106 = 0;
        _rtmp3108 = input.readMapBegin();
        _ktype105 = _rtmp3108.ktype;
        _vtype106 = _rtmp3108.vtype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var key110 = null;
          var val111 = null;
          key110 = input.readString();
          val111 = input.readString();
          this.parameters[key110] = val111;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SerDeInfo.prototype.write = function(output) {
  output.writeStructBegin('SerDeInfo');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.serializationLib !== null && this.serializationLib !== undefined) {
    output.writeFieldBegin('serializationLib', Thrift.Type.STRING, 2);
    output.writeString(this.serializationLib);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters));
    for (var kiter112 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(kiter112))
      {
        var viter113 = this.parameters[kiter112];
        output.writeString(kiter112);
        output.writeString(viter113);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Order = module.exports.Order = function(args) {
  this.col = null;
  this.order = null;
  if (args) {
    if (args.col !== undefined) {
      this.col = args.col;
    }
    if (args.order !== undefined) {
      this.order = args.order;
    }
  }
};
Order.prototype = {};
Order.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.col = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.order = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Order.prototype.write = function(output) {
  output.writeStructBegin('Order');
  if (this.col !== null && this.col !== undefined) {
    output.writeFieldBegin('col', Thrift.Type.STRING, 1);
    output.writeString(this.col);
    output.writeFieldEnd();
  }
  if (this.order !== null && this.order !== undefined) {
    output.writeFieldBegin('order', Thrift.Type.I32, 2);
    output.writeI32(this.order);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SkewedInfo = module.exports.SkewedInfo = function(args) {
  this.skewedColNames = null;
  this.skewedColValues = null;
  this.skewedColValueLocationMaps = null;
  if (args) {
    if (args.skewedColNames !== undefined) {
      this.skewedColNames = args.skewedColNames;
    }
    if (args.skewedColValues !== undefined) {
      this.skewedColValues = args.skewedColValues;
    }
    if (args.skewedColValueLocationMaps !== undefined) {
      this.skewedColValueLocationMaps = args.skewedColValueLocationMaps;
    }
  }
};
SkewedInfo.prototype = {};
SkewedInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size114 = 0;
        var _rtmp3118;
        this.skewedColNames = [];
        var _etype117 = 0;
        _rtmp3118 = input.readListBegin();
        _etype117 = _rtmp3118.etype;
        _size114 = _rtmp3118.size;
        for (var _i119 = 0; _i119 < _size114; ++_i119)
        {
          var elem120 = null;
          elem120 = input.readString();
          this.skewedColNames.push(elem120);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size121 = 0;
        var _rtmp3125;
        this.skewedColValues = [];
        var _etype124 = 0;
        _rtmp3125 = input.readListBegin();
        _etype124 = _rtmp3125.etype;
        _size121 = _rtmp3125.size;
        for (var _i126 = 0; _i126 < _size121; ++_i126)
        {
          var elem127 = null;
          var _size128 = 0;
          var _rtmp3132;
          elem127 = [];
          var _etype131 = 0;
          _rtmp3132 = input.readListBegin();
          _etype131 = _rtmp3132.etype;
          _size128 = _rtmp3132.size;
          for (var _i133 = 0; _i133 < _size128; ++_i133)
          {
            var elem134 = null;
            elem134 = input.readString();
            elem127.push(elem134);
          }
          input.readListEnd();
          this.skewedColValues.push(elem127);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size135 = 0;
        var _rtmp3139;
        this.skewedColValueLocationMaps = {};
        var _ktype136 = 0;
        var _vtype137 = 0;
        _rtmp3139 = input.readMapBegin();
        _ktype136 = _rtmp3139.ktype;
        _vtype137 = _rtmp3139.vtype;
        _size135 = _rtmp3139.size;
        for (var _i140 = 0; _i140 < _size135; ++_i140)
        {
          var key141 = null;
          var val142 = null;
          var _size143 = 0;
          var _rtmp3147;
          key141 = [];
          var _etype146 = 0;
          _rtmp3147 = input.readListBegin();
          _etype146 = _rtmp3147.etype;
          _size143 = _rtmp3147.size;
          for (var _i148 = 0; _i148 < _size143; ++_i148)
          {
            var elem149 = null;
            elem149 = input.readString();
            key141.push(elem149);
          }
          input.readListEnd();
          val142 = input.readString();
          this.skewedColValueLocationMaps[key141] = val142;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SkewedInfo.prototype.write = function(output) {
  output.writeStructBegin('SkewedInfo');
  if (this.skewedColNames !== null && this.skewedColNames !== undefined) {
    output.writeFieldBegin('skewedColNames', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.skewedColNames.length);
    for (var iter150 in this.skewedColNames)
    {
      if (this.skewedColNames.hasOwnProperty(iter150))
      {
        iter150 = this.skewedColNames[iter150];
        output.writeString(iter150);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.skewedColValues !== null && this.skewedColValues !== undefined) {
    output.writeFieldBegin('skewedColValues', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.LIST, this.skewedColValues.length);
    for (var iter151 in this.skewedColValues)
    {
      if (this.skewedColValues.hasOwnProperty(iter151))
      {
        iter151 = this.skewedColValues[iter151];
        output.writeListBegin(Thrift.Type.STRING, iter151.length);
        for (var iter152 in iter151)
        {
          if (iter151.hasOwnProperty(iter152))
          {
            iter152 = iter151[iter152];
            output.writeString(iter152);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.skewedColValueLocationMaps !== null && this.skewedColValueLocationMaps !== undefined) {
    output.writeFieldBegin('skewedColValueLocationMaps', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.LIST, Thrift.Type.STRING, Thrift.objectLength(this.skewedColValueLocationMaps));
    for (var kiter153 in this.skewedColValueLocationMaps)
    {
      if (this.skewedColValueLocationMaps.hasOwnProperty(kiter153))
      {
        var viter154 = this.skewedColValueLocationMaps[kiter153];
        output.writeListBegin(Thrift.Type.STRING, kiter153.length);
        for (var iter155 in kiter153)
        {
          if (kiter153.hasOwnProperty(iter155))
          {
            iter155 = kiter153[iter155];
            output.writeString(iter155);
          }
        }
        output.writeListEnd();
        output.writeString(viter154);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StorageDescriptor = module.exports.StorageDescriptor = function(args) {
  this.cols = null;
  this.location = null;
  this.inputFormat = null;
  this.outputFormat = null;
  this.compressed = null;
  this.numBuckets = null;
  this.serdeInfo = null;
  this.bucketCols = null;
  this.sortCols = null;
  this.parameters = null;
  this.skewedInfo = null;
  this.storedAsSubDirectories = null;
  if (args) {
    if (args.cols !== undefined) {
      this.cols = args.cols;
    }
    if (args.location !== undefined) {
      this.location = args.location;
    }
    if (args.inputFormat !== undefined) {
      this.inputFormat = args.inputFormat;
    }
    if (args.outputFormat !== undefined) {
      this.outputFormat = args.outputFormat;
    }
    if (args.compressed !== undefined) {
      this.compressed = args.compressed;
    }
    if (args.numBuckets !== undefined) {
      this.numBuckets = args.numBuckets;
    }
    if (args.serdeInfo !== undefined) {
      this.serdeInfo = args.serdeInfo;
    }
    if (args.bucketCols !== undefined) {
      this.bucketCols = args.bucketCols;
    }
    if (args.sortCols !== undefined) {
      this.sortCols = args.sortCols;
    }
    if (args.parameters !== undefined) {
      this.parameters = args.parameters;
    }
    if (args.skewedInfo !== undefined) {
      this.skewedInfo = args.skewedInfo;
    }
    if (args.storedAsSubDirectories !== undefined) {
      this.storedAsSubDirectories = args.storedAsSubDirectories;
    }
  }
};
StorageDescriptor.prototype = {};
StorageDescriptor.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size156 = 0;
        var _rtmp3160;
        this.cols = [];
        var _etype159 = 0;
        _rtmp3160 = input.readListBegin();
        _etype159 = _rtmp3160.etype;
        _size156 = _rtmp3160.size;
        for (var _i161 = 0; _i161 < _size156; ++_i161)
        {
          var elem162 = null;
          elem162 = new ttypes.FieldSchema();
          elem162.read(input);
          this.cols.push(elem162);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.location = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.inputFormat = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.outputFormat = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.compressed = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.numBuckets = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.serdeInfo = new ttypes.SerDeInfo();
        this.serdeInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size163 = 0;
        var _rtmp3167;
        this.bucketCols = [];
        var _etype166 = 0;
        _rtmp3167 = input.readListBegin();
        _etype166 = _rtmp3167.etype;
        _size163 = _rtmp3167.size;
        for (var _i168 = 0; _i168 < _size163; ++_i168)
        {
          var elem169 = null;
          elem169 = input.readString();
          this.bucketCols.push(elem169);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size170 = 0;
        var _rtmp3174;
        this.sortCols = [];
        var _etype173 = 0;
        _rtmp3174 = input.readListBegin();
        _etype173 = _rtmp3174.etype;
        _size170 = _rtmp3174.size;
        for (var _i175 = 0; _i175 < _size170; ++_i175)
        {
          var elem176 = null;
          elem176 = new ttypes.Order();
          elem176.read(input);
          this.sortCols.push(elem176);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.MAP) {
        var _size177 = 0;
        var _rtmp3181;
        this.parameters = {};
        var _ktype178 = 0;
        var _vtype179 = 0;
        _rtmp3181 = input.readMapBegin();
        _ktype178 = _rtmp3181.ktype;
        _vtype179 = _rtmp3181.vtype;
        _size177 = _rtmp3181.size;
        for (var _i182 = 0; _i182 < _size177; ++_i182)
        {
          var key183 = null;
          var val184 = null;
          key183 = input.readString();
          val184 = input.readString();
          this.parameters[key183] = val184;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.skewedInfo = new ttypes.SkewedInfo();
        this.skewedInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.storedAsSubDirectories = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StorageDescriptor.prototype.write = function(output) {
  output.writeStructBegin('StorageDescriptor');
  if (this.cols !== null && this.cols !== undefined) {
    output.writeFieldBegin('cols', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);
    for (var iter185 in this.cols)
    {
      if (this.cols.hasOwnProperty(iter185))
      {
        iter185 = this.cols[iter185];
        iter185.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRING, 2);
    output.writeString(this.location);
    output.writeFieldEnd();
  }
  if (this.inputFormat !== null && this.inputFormat !== undefined) {
    output.writeFieldBegin('inputFormat', Thrift.Type.STRING, 3);
    output.writeString(this.inputFormat);
    output.writeFieldEnd();
  }
  if (this.outputFormat !== null && this.outputFormat !== undefined) {
    output.writeFieldBegin('outputFormat', Thrift.Type.STRING, 4);
    output.writeString(this.outputFormat);
    output.writeFieldEnd();
  }
  if (this.compressed !== null && this.compressed !== undefined) {
    output.writeFieldBegin('compressed', Thrift.Type.BOOL, 5);
    output.writeBool(this.compressed);
    output.writeFieldEnd();
  }
  if (this.numBuckets !== null && this.numBuckets !== undefined) {
    output.writeFieldBegin('numBuckets', Thrift.Type.I32, 6);
    output.writeI32(this.numBuckets);
    output.writeFieldEnd();
  }
  if (this.serdeInfo !== null && this.serdeInfo !== undefined) {
    output.writeFieldBegin('serdeInfo', Thrift.Type.STRUCT, 7);
    this.serdeInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.bucketCols !== null && this.bucketCols !== undefined) {
    output.writeFieldBegin('bucketCols', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRING, this.bucketCols.length);
    for (var iter186 in this.bucketCols)
    {
      if (this.bucketCols.hasOwnProperty(iter186))
      {
        iter186 = this.bucketCols[iter186];
        output.writeString(iter186);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sortCols !== null && this.sortCols !== undefined) {
    output.writeFieldBegin('sortCols', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.sortCols.length);
    for (var iter187 in this.sortCols)
    {
      if (this.sortCols.hasOwnProperty(iter187))
      {
        iter187 = this.sortCols[iter187];
        iter187.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 10);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters));
    for (var kiter188 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(kiter188))
      {
        var viter189 = this.parameters[kiter188];
        output.writeString(kiter188);
        output.writeString(viter189);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.skewedInfo !== null && this.skewedInfo !== undefined) {
    output.writeFieldBegin('skewedInfo', Thrift.Type.STRUCT, 11);
    this.skewedInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.storedAsSubDirectories !== null && this.storedAsSubDirectories !== undefined) {
    output.writeFieldBegin('storedAsSubDirectories', Thrift.Type.BOOL, 12);
    output.writeBool(this.storedAsSubDirectories);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Table = module.exports.Table = function(args) {
  this.tableName = null;
  this.dbName = null;
  this.owner = null;
  this.createTime = null;
  this.lastAccessTime = null;
  this.retention = null;
  this.sd = null;
  this.partitionKeys = null;
  this.parameters = null;
  this.viewOriginalText = null;
  this.viewExpandedText = null;
  this.tableType = null;
  this.privileges = null;
  this.temporary = false;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.dbName !== undefined) {
      this.dbName = args.dbName;
    }
    if (args.owner !== undefined) {
      this.owner = args.owner;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.lastAccessTime !== undefined) {
      this.lastAccessTime = args.lastAccessTime;
    }
    if (args.retention !== undefined) {
      this.retention = args.retention;
    }
    if (args.sd !== undefined) {
      this.sd = args.sd;
    }
    if (args.partitionKeys !== undefined) {
      this.partitionKeys = args.partitionKeys;
    }
    if (args.parameters !== undefined) {
      this.parameters = args.parameters;
    }
    if (args.viewOriginalText !== undefined) {
      this.viewOriginalText = args.viewOriginalText;
    }
    if (args.viewExpandedText !== undefined) {
      this.viewExpandedText = args.viewExpandedText;
    }
    if (args.tableType !== undefined) {
      this.tableType = args.tableType;
    }
    if (args.privileges !== undefined) {
      this.privileges = args.privileges;
    }
    if (args.temporary !== undefined) {
      this.temporary = args.temporary;
    }
  }
};
Table.prototype = {};
Table.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.owner = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.lastAccessTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.retention = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.sd = new ttypes.StorageDescriptor();
        this.sd.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size190 = 0;
        var _rtmp3194;
        this.partitionKeys = [];
        var _etype193 = 0;
        _rtmp3194 = input.readListBegin();
        _etype193 = _rtmp3194.etype;
        _size190 = _rtmp3194.size;
        for (var _i195 = 0; _i195 < _size190; ++_i195)
        {
          var elem196 = null;
          elem196 = new ttypes.FieldSchema();
          elem196.read(input);
          this.partitionKeys.push(elem196);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.MAP) {
        var _size197 = 0;
        var _rtmp3201;
        this.parameters = {};
        var _ktype198 = 0;
        var _vtype199 = 0;
        _rtmp3201 = input.readMapBegin();
        _ktype198 = _rtmp3201.ktype;
        _vtype199 = _rtmp3201.vtype;
        _size197 = _rtmp3201.size;
        for (var _i202 = 0; _i202 < _size197; ++_i202)
        {
          var key203 = null;
          var val204 = null;
          key203 = input.readString();
          val204 = input.readString();
          this.parameters[key203] = val204;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.viewOriginalText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.viewExpandedText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.tableType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.privileges = new ttypes.PrincipalPrivilegeSet();
        this.privileges.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.temporary = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Table.prototype.write = function(output) {
  output.writeStructBegin('Table');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 2);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.owner !== null && this.owner !== undefined) {
    output.writeFieldBegin('owner', Thrift.Type.STRING, 3);
    output.writeString(this.owner);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 4);
    output.writeI32(this.createTime);
    output.writeFieldEnd();
  }
  if (this.lastAccessTime !== null && this.lastAccessTime !== undefined) {
    output.writeFieldBegin('lastAccessTime', Thrift.Type.I32, 5);
    output.writeI32(this.lastAccessTime);
    output.writeFieldEnd();
  }
  if (this.retention !== null && this.retention !== undefined) {
    output.writeFieldBegin('retention', Thrift.Type.I32, 6);
    output.writeI32(this.retention);
    output.writeFieldEnd();
  }
  if (this.sd !== null && this.sd !== undefined) {
    output.writeFieldBegin('sd', Thrift.Type.STRUCT, 7);
    this.sd.write(output);
    output.writeFieldEnd();
  }
  if (this.partitionKeys !== null && this.partitionKeys !== undefined) {
    output.writeFieldBegin('partitionKeys', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.partitionKeys.length);
    for (var iter205 in this.partitionKeys)
    {
      if (this.partitionKeys.hasOwnProperty(iter205))
      {
        iter205 = this.partitionKeys[iter205];
        iter205.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 9);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters));
    for (var kiter206 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(kiter206))
      {
        var viter207 = this.parameters[kiter206];
        output.writeString(kiter206);
        output.writeString(viter207);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.viewOriginalText !== null && this.viewOriginalText !== undefined) {
    output.writeFieldBegin('viewOriginalText', Thrift.Type.STRING, 10);
    output.writeString(this.viewOriginalText);
    output.writeFieldEnd();
  }
  if (this.viewExpandedText !== null && this.viewExpandedText !== undefined) {
    output.writeFieldBegin('viewExpandedText', Thrift.Type.STRING, 11);
    output.writeString(this.viewExpandedText);
    output.writeFieldEnd();
  }
  if (this.tableType !== null && this.tableType !== undefined) {
    output.writeFieldBegin('tableType', Thrift.Type.STRING, 12);
    output.writeString(this.tableType);
    output.writeFieldEnd();
  }
  if (this.privileges !== null && this.privileges !== undefined) {
    output.writeFieldBegin('privileges', Thrift.Type.STRUCT, 13);
    this.privileges.write(output);
    output.writeFieldEnd();
  }
  if (this.temporary !== null && this.temporary !== undefined) {
    output.writeFieldBegin('temporary', Thrift.Type.BOOL, 14);
    output.writeBool(this.temporary);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Partition = module.exports.Partition = function(args) {
  this.values = null;
  this.dbName = null;
  this.tableName = null;
  this.createTime = null;
  this.lastAccessTime = null;
  this.sd = null;
  this.parameters = null;
  this.privileges = null;
  if (args) {
    if (args.values !== undefined) {
      this.values = args.values;
    }
    if (args.dbName !== undefined) {
      this.dbName = args.dbName;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.lastAccessTime !== undefined) {
      this.lastAccessTime = args.lastAccessTime;
    }
    if (args.sd !== undefined) {
      this.sd = args.sd;
    }
    if (args.parameters !== undefined) {
      this.parameters = args.parameters;
    }
    if (args.privileges !== undefined) {
      this.privileges = args.privileges;
    }
  }
};
Partition.prototype = {};
Partition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size208 = 0;
        var _rtmp3212;
        this.values = [];
        var _etype211 = 0;
        _rtmp3212 = input.readListBegin();
        _etype211 = _rtmp3212.etype;
        _size208 = _rtmp3212.size;
        for (var _i213 = 0; _i213 < _size208; ++_i213)
        {
          var elem214 = null;
          elem214 = input.readString();
          this.values.push(elem214);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.lastAccessTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.sd = new ttypes.StorageDescriptor();
        this.sd.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size215 = 0;
        var _rtmp3219;
        this.parameters = {};
        var _ktype216 = 0;
        var _vtype217 = 0;
        _rtmp3219 = input.readMapBegin();
        _ktype216 = _rtmp3219.ktype;
        _vtype217 = _rtmp3219.vtype;
        _size215 = _rtmp3219.size;
        for (var _i220 = 0; _i220 < _size215; ++_i220)
        {
          var key221 = null;
          var val222 = null;
          key221 = input.readString();
          val222 = input.readString();
          this.parameters[key221] = val222;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.privileges = new ttypes.PrincipalPrivilegeSet();
        this.privileges.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Partition.prototype.write = function(output) {
  output.writeStructBegin('Partition');
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.values.length);
    for (var iter223 in this.values)
    {
      if (this.values.hasOwnProperty(iter223))
      {
        iter223 = this.values[iter223];
        output.writeString(iter223);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 2);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 3);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 4);
    output.writeI32(this.createTime);
    output.writeFieldEnd();
  }
  if (this.lastAccessTime !== null && this.lastAccessTime !== undefined) {
    output.writeFieldBegin('lastAccessTime', Thrift.Type.I32, 5);
    output.writeI32(this.lastAccessTime);
    output.writeFieldEnd();
  }
  if (this.sd !== null && this.sd !== undefined) {
    output.writeFieldBegin('sd', Thrift.Type.STRUCT, 6);
    this.sd.write(output);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters));
    for (var kiter224 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(kiter224))
      {
        var viter225 = this.parameters[kiter224];
        output.writeString(kiter224);
        output.writeString(viter225);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.privileges !== null && this.privileges !== undefined) {
    output.writeFieldBegin('privileges', Thrift.Type.STRUCT, 8);
    this.privileges.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PartitionWithoutSD = module.exports.PartitionWithoutSD = function(args) {
  this.values = null;
  this.createTime = null;
  this.lastAccessTime = null;
  this.relativePath = null;
  this.parameters = null;
  this.privileges = null;
  if (args) {
    if (args.values !== undefined) {
      this.values = args.values;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.lastAccessTime !== undefined) {
      this.lastAccessTime = args.lastAccessTime;
    }
    if (args.relativePath !== undefined) {
      this.relativePath = args.relativePath;
    }
    if (args.parameters !== undefined) {
      this.parameters = args.parameters;
    }
    if (args.privileges !== undefined) {
      this.privileges = args.privileges;
    }
  }
};
PartitionWithoutSD.prototype = {};
PartitionWithoutSD.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size226 = 0;
        var _rtmp3230;
        this.values = [];
        var _etype229 = 0;
        _rtmp3230 = input.readListBegin();
        _etype229 = _rtmp3230.etype;
        _size226 = _rtmp3230.size;
        for (var _i231 = 0; _i231 < _size226; ++_i231)
        {
          var elem232 = null;
          elem232 = input.readString();
          this.values.push(elem232);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.lastAccessTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.relativePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size233 = 0;
        var _rtmp3237;
        this.parameters = {};
        var _ktype234 = 0;
        var _vtype235 = 0;
        _rtmp3237 = input.readMapBegin();
        _ktype234 = _rtmp3237.ktype;
        _vtype235 = _rtmp3237.vtype;
        _size233 = _rtmp3237.size;
        for (var _i238 = 0; _i238 < _size233; ++_i238)
        {
          var key239 = null;
          var val240 = null;
          key239 = input.readString();
          val240 = input.readString();
          this.parameters[key239] = val240;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.privileges = new ttypes.PrincipalPrivilegeSet();
        this.privileges.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartitionWithoutSD.prototype.write = function(output) {
  output.writeStructBegin('PartitionWithoutSD');
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.values.length);
    for (var iter241 in this.values)
    {
      if (this.values.hasOwnProperty(iter241))
      {
        iter241 = this.values[iter241];
        output.writeString(iter241);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 2);
    output.writeI32(this.createTime);
    output.writeFieldEnd();
  }
  if (this.lastAccessTime !== null && this.lastAccessTime !== undefined) {
    output.writeFieldBegin('lastAccessTime', Thrift.Type.I32, 3);
    output.writeI32(this.lastAccessTime);
    output.writeFieldEnd();
  }
  if (this.relativePath !== null && this.relativePath !== undefined) {
    output.writeFieldBegin('relativePath', Thrift.Type.STRING, 4);
    output.writeString(this.relativePath);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters));
    for (var kiter242 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(kiter242))
      {
        var viter243 = this.parameters[kiter242];
        output.writeString(kiter242);
        output.writeString(viter243);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.privileges !== null && this.privileges !== undefined) {
    output.writeFieldBegin('privileges', Thrift.Type.STRUCT, 6);
    this.privileges.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PartitionSpecWithSharedSD = module.exports.PartitionSpecWithSharedSD = function(args) {
  this.partitions = null;
  this.sd = null;
  if (args) {
    if (args.partitions !== undefined) {
      this.partitions = args.partitions;
    }
    if (args.sd !== undefined) {
      this.sd = args.sd;
    }
  }
};
PartitionSpecWithSharedSD.prototype = {};
PartitionSpecWithSharedSD.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size244 = 0;
        var _rtmp3248;
        this.partitions = [];
        var _etype247 = 0;
        _rtmp3248 = input.readListBegin();
        _etype247 = _rtmp3248.etype;
        _size244 = _rtmp3248.size;
        for (var _i249 = 0; _i249 < _size244; ++_i249)
        {
          var elem250 = null;
          elem250 = new ttypes.PartitionWithoutSD();
          elem250.read(input);
          this.partitions.push(elem250);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sd = new ttypes.StorageDescriptor();
        this.sd.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartitionSpecWithSharedSD.prototype.write = function(output) {
  output.writeStructBegin('PartitionSpecWithSharedSD');
  if (this.partitions !== null && this.partitions !== undefined) {
    output.writeFieldBegin('partitions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.partitions.length);
    for (var iter251 in this.partitions)
    {
      if (this.partitions.hasOwnProperty(iter251))
      {
        iter251 = this.partitions[iter251];
        iter251.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sd !== null && this.sd !== undefined) {
    output.writeFieldBegin('sd', Thrift.Type.STRUCT, 2);
    this.sd.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PartitionListComposingSpec = module.exports.PartitionListComposingSpec = function(args) {
  this.partitions = null;
  if (args) {
    if (args.partitions !== undefined) {
      this.partitions = args.partitions;
    }
  }
};
PartitionListComposingSpec.prototype = {};
PartitionListComposingSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size252 = 0;
        var _rtmp3256;
        this.partitions = [];
        var _etype255 = 0;
        _rtmp3256 = input.readListBegin();
        _etype255 = _rtmp3256.etype;
        _size252 = _rtmp3256.size;
        for (var _i257 = 0; _i257 < _size252; ++_i257)
        {
          var elem258 = null;
          elem258 = new ttypes.Partition();
          elem258.read(input);
          this.partitions.push(elem258);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartitionListComposingSpec.prototype.write = function(output) {
  output.writeStructBegin('PartitionListComposingSpec');
  if (this.partitions !== null && this.partitions !== undefined) {
    output.writeFieldBegin('partitions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.partitions.length);
    for (var iter259 in this.partitions)
    {
      if (this.partitions.hasOwnProperty(iter259))
      {
        iter259 = this.partitions[iter259];
        iter259.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PartitionSpec = module.exports.PartitionSpec = function(args) {
  this.dbName = null;
  this.tableName = null;
  this.rootPath = null;
  this.sharedSDPartitionSpec = null;
  this.partitionList = null;
  if (args) {
    if (args.dbName !== undefined) {
      this.dbName = args.dbName;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.rootPath !== undefined) {
      this.rootPath = args.rootPath;
    }
    if (args.sharedSDPartitionSpec !== undefined) {
      this.sharedSDPartitionSpec = args.sharedSDPartitionSpec;
    }
    if (args.partitionList !== undefined) {
      this.partitionList = args.partitionList;
    }
  }
};
PartitionSpec.prototype = {};
PartitionSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.rootPath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.sharedSDPartitionSpec = new ttypes.PartitionSpecWithSharedSD();
        this.sharedSDPartitionSpec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.partitionList = new ttypes.PartitionListComposingSpec();
        this.partitionList.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartitionSpec.prototype.write = function(output) {
  output.writeStructBegin('PartitionSpec');
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 1);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.rootPath !== null && this.rootPath !== undefined) {
    output.writeFieldBegin('rootPath', Thrift.Type.STRING, 3);
    output.writeString(this.rootPath);
    output.writeFieldEnd();
  }
  if (this.sharedSDPartitionSpec !== null && this.sharedSDPartitionSpec !== undefined) {
    output.writeFieldBegin('sharedSDPartitionSpec', Thrift.Type.STRUCT, 4);
    this.sharedSDPartitionSpec.write(output);
    output.writeFieldEnd();
  }
  if (this.partitionList !== null && this.partitionList !== undefined) {
    output.writeFieldBegin('partitionList', Thrift.Type.STRUCT, 5);
    this.partitionList.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Index = module.exports.Index = function(args) {
  this.indexName = null;
  this.indexHandlerClass = null;
  this.dbName = null;
  this.origTableName = null;
  this.createTime = null;
  this.lastAccessTime = null;
  this.indexTableName = null;
  this.sd = null;
  this.parameters = null;
  this.deferredRebuild = null;
  if (args) {
    if (args.indexName !== undefined) {
      this.indexName = args.indexName;
    }
    if (args.indexHandlerClass !== undefined) {
      this.indexHandlerClass = args.indexHandlerClass;
    }
    if (args.dbName !== undefined) {
      this.dbName = args.dbName;
    }
    if (args.origTableName !== undefined) {
      this.origTableName = args.origTableName;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.lastAccessTime !== undefined) {
      this.lastAccessTime = args.lastAccessTime;
    }
    if (args.indexTableName !== undefined) {
      this.indexTableName = args.indexTableName;
    }
    if (args.sd !== undefined) {
      this.sd = args.sd;
    }
    if (args.parameters !== undefined) {
      this.parameters = args.parameters;
    }
    if (args.deferredRebuild !== undefined) {
      this.deferredRebuild = args.deferredRebuild;
    }
  }
};
Index.prototype = {};
Index.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.indexName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.indexHandlerClass = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.origTableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.lastAccessTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.indexTableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.sd = new ttypes.StorageDescriptor();
        this.sd.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.MAP) {
        var _size260 = 0;
        var _rtmp3264;
        this.parameters = {};
        var _ktype261 = 0;
        var _vtype262 = 0;
        _rtmp3264 = input.readMapBegin();
        _ktype261 = _rtmp3264.ktype;
        _vtype262 = _rtmp3264.vtype;
        _size260 = _rtmp3264.size;
        for (var _i265 = 0; _i265 < _size260; ++_i265)
        {
          var key266 = null;
          var val267 = null;
          key266 = input.readString();
          val267 = input.readString();
          this.parameters[key266] = val267;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.deferredRebuild = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Index.prototype.write = function(output) {
  output.writeStructBegin('Index');
  if (this.indexName !== null && this.indexName !== undefined) {
    output.writeFieldBegin('indexName', Thrift.Type.STRING, 1);
    output.writeString(this.indexName);
    output.writeFieldEnd();
  }
  if (this.indexHandlerClass !== null && this.indexHandlerClass !== undefined) {
    output.writeFieldBegin('indexHandlerClass', Thrift.Type.STRING, 2);
    output.writeString(this.indexHandlerClass);
    output.writeFieldEnd();
  }
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 3);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.origTableName !== null && this.origTableName !== undefined) {
    output.writeFieldBegin('origTableName', Thrift.Type.STRING, 4);
    output.writeString(this.origTableName);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 5);
    output.writeI32(this.createTime);
    output.writeFieldEnd();
  }
  if (this.lastAccessTime !== null && this.lastAccessTime !== undefined) {
    output.writeFieldBegin('lastAccessTime', Thrift.Type.I32, 6);
    output.writeI32(this.lastAccessTime);
    output.writeFieldEnd();
  }
  if (this.indexTableName !== null && this.indexTableName !== undefined) {
    output.writeFieldBegin('indexTableName', Thrift.Type.STRING, 7);
    output.writeString(this.indexTableName);
    output.writeFieldEnd();
  }
  if (this.sd !== null && this.sd !== undefined) {
    output.writeFieldBegin('sd', Thrift.Type.STRUCT, 8);
    this.sd.write(output);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 9);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters));
    for (var kiter268 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(kiter268))
      {
        var viter269 = this.parameters[kiter268];
        output.writeString(kiter268);
        output.writeString(viter269);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.deferredRebuild !== null && this.deferredRebuild !== undefined) {
    output.writeFieldBegin('deferredRebuild', Thrift.Type.BOOL, 10);
    output.writeBool(this.deferredRebuild);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BooleanColumnStatsData = module.exports.BooleanColumnStatsData = function(args) {
  this.numTrues = null;
  this.numFalses = null;
  this.numNulls = null;
  if (args) {
    if (args.numTrues !== undefined) {
      this.numTrues = args.numTrues;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numTrues is unset!');
    }
    if (args.numFalses !== undefined) {
      this.numFalses = args.numFalses;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numFalses is unset!');
    }
    if (args.numNulls !== undefined) {
      this.numNulls = args.numNulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numNulls is unset!');
    }
  }
};
BooleanColumnStatsData.prototype = {};
BooleanColumnStatsData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numTrues = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numFalses = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numNulls = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BooleanColumnStatsData.prototype.write = function(output) {
  output.writeStructBegin('BooleanColumnStatsData');
  if (this.numTrues !== null && this.numTrues !== undefined) {
    output.writeFieldBegin('numTrues', Thrift.Type.I64, 1);
    output.writeI64(this.numTrues);
    output.writeFieldEnd();
  }
  if (this.numFalses !== null && this.numFalses !== undefined) {
    output.writeFieldBegin('numFalses', Thrift.Type.I64, 2);
    output.writeI64(this.numFalses);
    output.writeFieldEnd();
  }
  if (this.numNulls !== null && this.numNulls !== undefined) {
    output.writeFieldBegin('numNulls', Thrift.Type.I64, 3);
    output.writeI64(this.numNulls);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DoubleColumnStatsData = module.exports.DoubleColumnStatsData = function(args) {
  this.lowValue = null;
  this.highValue = null;
  this.numNulls = null;
  this.numDVs = null;
  if (args) {
    if (args.lowValue !== undefined) {
      this.lowValue = args.lowValue;
    }
    if (args.highValue !== undefined) {
      this.highValue = args.highValue;
    }
    if (args.numNulls !== undefined) {
      this.numNulls = args.numNulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numNulls is unset!');
    }
    if (args.numDVs !== undefined) {
      this.numDVs = args.numDVs;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numDVs is unset!');
    }
  }
};
DoubleColumnStatsData.prototype = {};
DoubleColumnStatsData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.lowValue = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.highValue = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numNulls = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.numDVs = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DoubleColumnStatsData.prototype.write = function(output) {
  output.writeStructBegin('DoubleColumnStatsData');
  if (this.lowValue !== null && this.lowValue !== undefined) {
    output.writeFieldBegin('lowValue', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.lowValue);
    output.writeFieldEnd();
  }
  if (this.highValue !== null && this.highValue !== undefined) {
    output.writeFieldBegin('highValue', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.highValue);
    output.writeFieldEnd();
  }
  if (this.numNulls !== null && this.numNulls !== undefined) {
    output.writeFieldBegin('numNulls', Thrift.Type.I64, 3);
    output.writeI64(this.numNulls);
    output.writeFieldEnd();
  }
  if (this.numDVs !== null && this.numDVs !== undefined) {
    output.writeFieldBegin('numDVs', Thrift.Type.I64, 4);
    output.writeI64(this.numDVs);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LongColumnStatsData = module.exports.LongColumnStatsData = function(args) {
  this.lowValue = null;
  this.highValue = null;
  this.numNulls = null;
  this.numDVs = null;
  if (args) {
    if (args.lowValue !== undefined) {
      this.lowValue = args.lowValue;
    }
    if (args.highValue !== undefined) {
      this.highValue = args.highValue;
    }
    if (args.numNulls !== undefined) {
      this.numNulls = args.numNulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numNulls is unset!');
    }
    if (args.numDVs !== undefined) {
      this.numDVs = args.numDVs;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numDVs is unset!');
    }
  }
};
LongColumnStatsData.prototype = {};
LongColumnStatsData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.lowValue = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.highValue = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numNulls = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.numDVs = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LongColumnStatsData.prototype.write = function(output) {
  output.writeStructBegin('LongColumnStatsData');
  if (this.lowValue !== null && this.lowValue !== undefined) {
    output.writeFieldBegin('lowValue', Thrift.Type.I64, 1);
    output.writeI64(this.lowValue);
    output.writeFieldEnd();
  }
  if (this.highValue !== null && this.highValue !== undefined) {
    output.writeFieldBegin('highValue', Thrift.Type.I64, 2);
    output.writeI64(this.highValue);
    output.writeFieldEnd();
  }
  if (this.numNulls !== null && this.numNulls !== undefined) {
    output.writeFieldBegin('numNulls', Thrift.Type.I64, 3);
    output.writeI64(this.numNulls);
    output.writeFieldEnd();
  }
  if (this.numDVs !== null && this.numDVs !== undefined) {
    output.writeFieldBegin('numDVs', Thrift.Type.I64, 4);
    output.writeI64(this.numDVs);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StringColumnStatsData = module.exports.StringColumnStatsData = function(args) {
  this.maxColLen = null;
  this.avgColLen = null;
  this.numNulls = null;
  this.numDVs = null;
  if (args) {
    if (args.maxColLen !== undefined) {
      this.maxColLen = args.maxColLen;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field maxColLen is unset!');
    }
    if (args.avgColLen !== undefined) {
      this.avgColLen = args.avgColLen;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field avgColLen is unset!');
    }
    if (args.numNulls !== undefined) {
      this.numNulls = args.numNulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numNulls is unset!');
    }
    if (args.numDVs !== undefined) {
      this.numDVs = args.numDVs;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numDVs is unset!');
    }
  }
};
StringColumnStatsData.prototype = {};
StringColumnStatsData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.maxColLen = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.avgColLen = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numNulls = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.numDVs = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StringColumnStatsData.prototype.write = function(output) {
  output.writeStructBegin('StringColumnStatsData');
  if (this.maxColLen !== null && this.maxColLen !== undefined) {
    output.writeFieldBegin('maxColLen', Thrift.Type.I64, 1);
    output.writeI64(this.maxColLen);
    output.writeFieldEnd();
  }
  if (this.avgColLen !== null && this.avgColLen !== undefined) {
    output.writeFieldBegin('avgColLen', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.avgColLen);
    output.writeFieldEnd();
  }
  if (this.numNulls !== null && this.numNulls !== undefined) {
    output.writeFieldBegin('numNulls', Thrift.Type.I64, 3);
    output.writeI64(this.numNulls);
    output.writeFieldEnd();
  }
  if (this.numDVs !== null && this.numDVs !== undefined) {
    output.writeFieldBegin('numDVs', Thrift.Type.I64, 4);
    output.writeI64(this.numDVs);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BinaryColumnStatsData = module.exports.BinaryColumnStatsData = function(args) {
  this.maxColLen = null;
  this.avgColLen = null;
  this.numNulls = null;
  if (args) {
    if (args.maxColLen !== undefined) {
      this.maxColLen = args.maxColLen;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field maxColLen is unset!');
    }
    if (args.avgColLen !== undefined) {
      this.avgColLen = args.avgColLen;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field avgColLen is unset!');
    }
    if (args.numNulls !== undefined) {
      this.numNulls = args.numNulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numNulls is unset!');
    }
  }
};
BinaryColumnStatsData.prototype = {};
BinaryColumnStatsData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.maxColLen = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.avgColLen = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numNulls = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BinaryColumnStatsData.prototype.write = function(output) {
  output.writeStructBegin('BinaryColumnStatsData');
  if (this.maxColLen !== null && this.maxColLen !== undefined) {
    output.writeFieldBegin('maxColLen', Thrift.Type.I64, 1);
    output.writeI64(this.maxColLen);
    output.writeFieldEnd();
  }
  if (this.avgColLen !== null && this.avgColLen !== undefined) {
    output.writeFieldBegin('avgColLen', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.avgColLen);
    output.writeFieldEnd();
  }
  if (this.numNulls !== null && this.numNulls !== undefined) {
    output.writeFieldBegin('numNulls', Thrift.Type.I64, 3);
    output.writeI64(this.numNulls);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Decimal = module.exports.Decimal = function(args) {
  this.unscaled = null;
  this.scale = null;
  if (args) {
    if (args.unscaled !== undefined) {
      this.unscaled = args.unscaled;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unscaled is unset!');
    }
    if (args.scale !== undefined) {
      this.scale = args.scale;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field scale is unset!');
    }
  }
};
Decimal.prototype = {};
Decimal.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.unscaled = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.scale = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Decimal.prototype.write = function(output) {
  output.writeStructBegin('Decimal');
  if (this.unscaled !== null && this.unscaled !== undefined) {
    output.writeFieldBegin('unscaled', Thrift.Type.STRING, 1);
    output.writeBinary(this.unscaled);
    output.writeFieldEnd();
  }
  if (this.scale !== null && this.scale !== undefined) {
    output.writeFieldBegin('scale', Thrift.Type.I16, 3);
    output.writeI16(this.scale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DecimalColumnStatsData = module.exports.DecimalColumnStatsData = function(args) {
  this.lowValue = null;
  this.highValue = null;
  this.numNulls = null;
  this.numDVs = null;
  if (args) {
    if (args.lowValue !== undefined) {
      this.lowValue = args.lowValue;
    }
    if (args.highValue !== undefined) {
      this.highValue = args.highValue;
    }
    if (args.numNulls !== undefined) {
      this.numNulls = args.numNulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numNulls is unset!');
    }
    if (args.numDVs !== undefined) {
      this.numDVs = args.numDVs;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numDVs is unset!');
    }
  }
};
DecimalColumnStatsData.prototype = {};
DecimalColumnStatsData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.lowValue = new ttypes.Decimal();
        this.lowValue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.highValue = new ttypes.Decimal();
        this.highValue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numNulls = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.numDVs = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DecimalColumnStatsData.prototype.write = function(output) {
  output.writeStructBegin('DecimalColumnStatsData');
  if (this.lowValue !== null && this.lowValue !== undefined) {
    output.writeFieldBegin('lowValue', Thrift.Type.STRUCT, 1);
    this.lowValue.write(output);
    output.writeFieldEnd();
  }
  if (this.highValue !== null && this.highValue !== undefined) {
    output.writeFieldBegin('highValue', Thrift.Type.STRUCT, 2);
    this.highValue.write(output);
    output.writeFieldEnd();
  }
  if (this.numNulls !== null && this.numNulls !== undefined) {
    output.writeFieldBegin('numNulls', Thrift.Type.I64, 3);
    output.writeI64(this.numNulls);
    output.writeFieldEnd();
  }
  if (this.numDVs !== null && this.numDVs !== undefined) {
    output.writeFieldBegin('numDVs', Thrift.Type.I64, 4);
    output.writeI64(this.numDVs);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ColumnStatisticsData = module.exports.ColumnStatisticsData = function(args) {
  this.booleanStats = null;
  this.longStats = null;
  this.doubleStats = null;
  this.stringStats = null;
  this.binaryStats = null;
  this.decimalStats = null;
  if (args) {
    if (args.booleanStats !== undefined) {
      this.booleanStats = args.booleanStats;
    }
    if (args.longStats !== undefined) {
      this.longStats = args.longStats;
    }
    if (args.doubleStats !== undefined) {
      this.doubleStats = args.doubleStats;
    }
    if (args.stringStats !== undefined) {
      this.stringStats = args.stringStats;
    }
    if (args.binaryStats !== undefined) {
      this.binaryStats = args.binaryStats;
    }
    if (args.decimalStats !== undefined) {
      this.decimalStats = args.decimalStats;
    }
  }
};
ColumnStatisticsData.prototype = {};
ColumnStatisticsData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.booleanStats = new ttypes.BooleanColumnStatsData();
        this.booleanStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.longStats = new ttypes.LongColumnStatsData();
        this.longStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.doubleStats = new ttypes.DoubleColumnStatsData();
        this.doubleStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.stringStats = new ttypes.StringColumnStatsData();
        this.stringStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.binaryStats = new ttypes.BinaryColumnStatsData();
        this.binaryStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.decimalStats = new ttypes.DecimalColumnStatsData();
        this.decimalStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnStatisticsData.prototype.write = function(output) {
  output.writeStructBegin('ColumnStatisticsData');
  if (this.booleanStats !== null && this.booleanStats !== undefined) {
    output.writeFieldBegin('booleanStats', Thrift.Type.STRUCT, 1);
    this.booleanStats.write(output);
    output.writeFieldEnd();
  }
  if (this.longStats !== null && this.longStats !== undefined) {
    output.writeFieldBegin('longStats', Thrift.Type.STRUCT, 2);
    this.longStats.write(output);
    output.writeFieldEnd();
  }
  if (this.doubleStats !== null && this.doubleStats !== undefined) {
    output.writeFieldBegin('doubleStats', Thrift.Type.STRUCT, 3);
    this.doubleStats.write(output);
    output.writeFieldEnd();
  }
  if (this.stringStats !== null && this.stringStats !== undefined) {
    output.writeFieldBegin('stringStats', Thrift.Type.STRUCT, 4);
    this.stringStats.write(output);
    output.writeFieldEnd();
  }
  if (this.binaryStats !== null && this.binaryStats !== undefined) {
    output.writeFieldBegin('binaryStats', Thrift.Type.STRUCT, 5);
    this.binaryStats.write(output);
    output.writeFieldEnd();
  }
  if (this.decimalStats !== null && this.decimalStats !== undefined) {
    output.writeFieldBegin('decimalStats', Thrift.Type.STRUCT, 6);
    this.decimalStats.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ColumnStatisticsObj = module.exports.ColumnStatisticsObj = function(args) {
  this.colName = null;
  this.colType = null;
  this.statsData = null;
  if (args) {
    if (args.colName !== undefined) {
      this.colName = args.colName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field colName is unset!');
    }
    if (args.colType !== undefined) {
      this.colType = args.colType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field colType is unset!');
    }
    if (args.statsData !== undefined) {
      this.statsData = args.statsData;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field statsData is unset!');
    }
  }
};
ColumnStatisticsObj.prototype = {};
ColumnStatisticsObj.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.colName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.colType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.statsData = new ttypes.ColumnStatisticsData();
        this.statsData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnStatisticsObj.prototype.write = function(output) {
  output.writeStructBegin('ColumnStatisticsObj');
  if (this.colName !== null && this.colName !== undefined) {
    output.writeFieldBegin('colName', Thrift.Type.STRING, 1);
    output.writeString(this.colName);
    output.writeFieldEnd();
  }
  if (this.colType !== null && this.colType !== undefined) {
    output.writeFieldBegin('colType', Thrift.Type.STRING, 2);
    output.writeString(this.colType);
    output.writeFieldEnd();
  }
  if (this.statsData !== null && this.statsData !== undefined) {
    output.writeFieldBegin('statsData', Thrift.Type.STRUCT, 3);
    this.statsData.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ColumnStatisticsDesc = module.exports.ColumnStatisticsDesc = function(args) {
  this.isTblLevel = null;
  this.dbName = null;
  this.tableName = null;
  this.partName = null;
  this.lastAnalyzed = null;
  if (args) {
    if (args.isTblLevel !== undefined) {
      this.isTblLevel = args.isTblLevel;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isTblLevel is unset!');
    }
    if (args.dbName !== undefined) {
      this.dbName = args.dbName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dbName is unset!');
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tableName is unset!');
    }
    if (args.partName !== undefined) {
      this.partName = args.partName;
    }
    if (args.lastAnalyzed !== undefined) {
      this.lastAnalyzed = args.lastAnalyzed;
    }
  }
};
ColumnStatisticsDesc.prototype = {};
ColumnStatisticsDesc.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.isTblLevel = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.partName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.lastAnalyzed = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnStatisticsDesc.prototype.write = function(output) {
  output.writeStructBegin('ColumnStatisticsDesc');
  if (this.isTblLevel !== null && this.isTblLevel !== undefined) {
    output.writeFieldBegin('isTblLevel', Thrift.Type.BOOL, 1);
    output.writeBool(this.isTblLevel);
    output.writeFieldEnd();
  }
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 2);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 3);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.partName !== null && this.partName !== undefined) {
    output.writeFieldBegin('partName', Thrift.Type.STRING, 4);
    output.writeString(this.partName);
    output.writeFieldEnd();
  }
  if (this.lastAnalyzed !== null && this.lastAnalyzed !== undefined) {
    output.writeFieldBegin('lastAnalyzed', Thrift.Type.I64, 5);
    output.writeI64(this.lastAnalyzed);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ColumnStatistics = module.exports.ColumnStatistics = function(args) {
  this.statsDesc = null;
  this.statsObj = null;
  if (args) {
    if (args.statsDesc !== undefined) {
      this.statsDesc = args.statsDesc;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field statsDesc is unset!');
    }
    if (args.statsObj !== undefined) {
      this.statsObj = args.statsObj;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field statsObj is unset!');
    }
  }
};
ColumnStatistics.prototype = {};
ColumnStatistics.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.statsDesc = new ttypes.ColumnStatisticsDesc();
        this.statsDesc.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size270 = 0;
        var _rtmp3274;
        this.statsObj = [];
        var _etype273 = 0;
        _rtmp3274 = input.readListBegin();
        _etype273 = _rtmp3274.etype;
        _size270 = _rtmp3274.size;
        for (var _i275 = 0; _i275 < _size270; ++_i275)
        {
          var elem276 = null;
          elem276 = new ttypes.ColumnStatisticsObj();
          elem276.read(input);
          this.statsObj.push(elem276);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnStatistics.prototype.write = function(output) {
  output.writeStructBegin('ColumnStatistics');
  if (this.statsDesc !== null && this.statsDesc !== undefined) {
    output.writeFieldBegin('statsDesc', Thrift.Type.STRUCT, 1);
    this.statsDesc.write(output);
    output.writeFieldEnd();
  }
  if (this.statsObj !== null && this.statsObj !== undefined) {
    output.writeFieldBegin('statsObj', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.statsObj.length);
    for (var iter277 in this.statsObj)
    {
      if (this.statsObj.hasOwnProperty(iter277))
      {
        iter277 = this.statsObj[iter277];
        iter277.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggrStats = module.exports.AggrStats = function(args) {
  this.colStats = null;
  this.partsFound = null;
  if (args) {
    if (args.colStats !== undefined) {
      this.colStats = args.colStats;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field colStats is unset!');
    }
    if (args.partsFound !== undefined) {
      this.partsFound = args.partsFound;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field partsFound is unset!');
    }
  }
};
AggrStats.prototype = {};
AggrStats.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size278 = 0;
        var _rtmp3282;
        this.colStats = [];
        var _etype281 = 0;
        _rtmp3282 = input.readListBegin();
        _etype281 = _rtmp3282.etype;
        _size278 = _rtmp3282.size;
        for (var _i283 = 0; _i283 < _size278; ++_i283)
        {
          var elem284 = null;
          elem284 = new ttypes.ColumnStatisticsObj();
          elem284.read(input);
          this.colStats.push(elem284);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.partsFound = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggrStats.prototype.write = function(output) {
  output.writeStructBegin('AggrStats');
  if (this.colStats !== null && this.colStats !== undefined) {
    output.writeFieldBegin('colStats', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.colStats.length);
    for (var iter285 in this.colStats)
    {
      if (this.colStats.hasOwnProperty(iter285))
      {
        iter285 = this.colStats[iter285];
        iter285.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.partsFound !== null && this.partsFound !== undefined) {
    output.writeFieldBegin('partsFound', Thrift.Type.I64, 2);
    output.writeI64(this.partsFound);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetPartitionsStatsRequest = module.exports.SetPartitionsStatsRequest = function(args) {
  this.colStats = null;
  if (args) {
    if (args.colStats !== undefined) {
      this.colStats = args.colStats;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field colStats is unset!');
    }
  }
};
SetPartitionsStatsRequest.prototype = {};
SetPartitionsStatsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size286 = 0;
        var _rtmp3290;
        this.colStats = [];
        var _etype289 = 0;
        _rtmp3290 = input.readListBegin();
        _etype289 = _rtmp3290.etype;
        _size286 = _rtmp3290.size;
        for (var _i291 = 0; _i291 < _size286; ++_i291)
        {
          var elem292 = null;
          elem292 = new ttypes.ColumnStatistics();
          elem292.read(input);
          this.colStats.push(elem292);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetPartitionsStatsRequest.prototype.write = function(output) {
  output.writeStructBegin('SetPartitionsStatsRequest');
  if (this.colStats !== null && this.colStats !== undefined) {
    output.writeFieldBegin('colStats', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.colStats.length);
    for (var iter293 in this.colStats)
    {
      if (this.colStats.hasOwnProperty(iter293))
      {
        iter293 = this.colStats[iter293];
        iter293.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Schema = module.exports.Schema = function(args) {
  this.fieldSchemas = null;
  this.properties = null;
  if (args) {
    if (args.fieldSchemas !== undefined) {
      this.fieldSchemas = args.fieldSchemas;
    }
    if (args.properties !== undefined) {
      this.properties = args.properties;
    }
  }
};
Schema.prototype = {};
Schema.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size294 = 0;
        var _rtmp3298;
        this.fieldSchemas = [];
        var _etype297 = 0;
        _rtmp3298 = input.readListBegin();
        _etype297 = _rtmp3298.etype;
        _size294 = _rtmp3298.size;
        for (var _i299 = 0; _i299 < _size294; ++_i299)
        {
          var elem300 = null;
          elem300 = new ttypes.FieldSchema();
          elem300.read(input);
          this.fieldSchemas.push(elem300);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size301 = 0;
        var _rtmp3305;
        this.properties = {};
        var _ktype302 = 0;
        var _vtype303 = 0;
        _rtmp3305 = input.readMapBegin();
        _ktype302 = _rtmp3305.ktype;
        _vtype303 = _rtmp3305.vtype;
        _size301 = _rtmp3305.size;
        for (var _i306 = 0; _i306 < _size301; ++_i306)
        {
          var key307 = null;
          var val308 = null;
          key307 = input.readString();
          val308 = input.readString();
          this.properties[key307] = val308;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Schema.prototype.write = function(output) {
  output.writeStructBegin('Schema');
  if (this.fieldSchemas !== null && this.fieldSchemas !== undefined) {
    output.writeFieldBegin('fieldSchemas', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.fieldSchemas.length);
    for (var iter309 in this.fieldSchemas)
    {
      if (this.fieldSchemas.hasOwnProperty(iter309))
      {
        iter309 = this.fieldSchemas[iter309];
        iter309.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.properties !== null && this.properties !== undefined) {
    output.writeFieldBegin('properties', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.properties));
    for (var kiter310 in this.properties)
    {
      if (this.properties.hasOwnProperty(kiter310))
      {
        var viter311 = this.properties[kiter310];
        output.writeString(kiter310);
        output.writeString(viter311);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EnvironmentContext = module.exports.EnvironmentContext = function(args) {
  this.properties = null;
  if (args) {
    if (args.properties !== undefined) {
      this.properties = args.properties;
    }
  }
};
EnvironmentContext.prototype = {};
EnvironmentContext.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size312 = 0;
        var _rtmp3316;
        this.properties = {};
        var _ktype313 = 0;
        var _vtype314 = 0;
        _rtmp3316 = input.readMapBegin();
        _ktype313 = _rtmp3316.ktype;
        _vtype314 = _rtmp3316.vtype;
        _size312 = _rtmp3316.size;
        for (var _i317 = 0; _i317 < _size312; ++_i317)
        {
          var key318 = null;
          var val319 = null;
          key318 = input.readString();
          val319 = input.readString();
          this.properties[key318] = val319;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EnvironmentContext.prototype.write = function(output) {
  output.writeStructBegin('EnvironmentContext');
  if (this.properties !== null && this.properties !== undefined) {
    output.writeFieldBegin('properties', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.properties));
    for (var kiter320 in this.properties)
    {
      if (this.properties.hasOwnProperty(kiter320))
      {
        var viter321 = this.properties[kiter320];
        output.writeString(kiter320);
        output.writeString(viter321);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PartitionsByExprResult = module.exports.PartitionsByExprResult = function(args) {
  this.partitions = null;
  this.hasUnknownPartitions = null;
  if (args) {
    if (args.partitions !== undefined) {
      this.partitions = args.partitions;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field partitions is unset!');
    }
    if (args.hasUnknownPartitions !== undefined) {
      this.hasUnknownPartitions = args.hasUnknownPartitions;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field hasUnknownPartitions is unset!');
    }
  }
};
PartitionsByExprResult.prototype = {};
PartitionsByExprResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size322 = 0;
        var _rtmp3326;
        this.partitions = [];
        var _etype325 = 0;
        _rtmp3326 = input.readListBegin();
        _etype325 = _rtmp3326.etype;
        _size322 = _rtmp3326.size;
        for (var _i327 = 0; _i327 < _size322; ++_i327)
        {
          var elem328 = null;
          elem328 = new ttypes.Partition();
          elem328.read(input);
          this.partitions.push(elem328);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.hasUnknownPartitions = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartitionsByExprResult.prototype.write = function(output) {
  output.writeStructBegin('PartitionsByExprResult');
  if (this.partitions !== null && this.partitions !== undefined) {
    output.writeFieldBegin('partitions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.partitions.length);
    for (var iter329 in this.partitions)
    {
      if (this.partitions.hasOwnProperty(iter329))
      {
        iter329 = this.partitions[iter329];
        iter329.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.hasUnknownPartitions !== null && this.hasUnknownPartitions !== undefined) {
    output.writeFieldBegin('hasUnknownPartitions', Thrift.Type.BOOL, 2);
    output.writeBool(this.hasUnknownPartitions);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PartitionsByExprRequest = module.exports.PartitionsByExprRequest = function(args) {
  this.dbName = null;
  this.tblName = null;
  this.expr = null;
  this.defaultPartitionName = null;
  this.maxParts = -1;
  if (args) {
    if (args.dbName !== undefined) {
      this.dbName = args.dbName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dbName is unset!');
    }
    if (args.tblName !== undefined) {
      this.tblName = args.tblName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tblName is unset!');
    }
    if (args.expr !== undefined) {
      this.expr = args.expr;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field expr is unset!');
    }
    if (args.defaultPartitionName !== undefined) {
      this.defaultPartitionName = args.defaultPartitionName;
    }
    if (args.maxParts !== undefined) {
      this.maxParts = args.maxParts;
    }
  }
};
PartitionsByExprRequest.prototype = {};
PartitionsByExprRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tblName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.expr = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.defaultPartitionName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I16) {
        this.maxParts = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartitionsByExprRequest.prototype.write = function(output) {
  output.writeStructBegin('PartitionsByExprRequest');
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 1);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.tblName !== null && this.tblName !== undefined) {
    output.writeFieldBegin('tblName', Thrift.Type.STRING, 2);
    output.writeString(this.tblName);
    output.writeFieldEnd();
  }
  if (this.expr !== null && this.expr !== undefined) {
    output.writeFieldBegin('expr', Thrift.Type.STRING, 3);
    output.writeBinary(this.expr);
    output.writeFieldEnd();
  }
  if (this.defaultPartitionName !== null && this.defaultPartitionName !== undefined) {
    output.writeFieldBegin('defaultPartitionName', Thrift.Type.STRING, 4);
    output.writeString(this.defaultPartitionName);
    output.writeFieldEnd();
  }
  if (this.maxParts !== null && this.maxParts !== undefined) {
    output.writeFieldBegin('maxParts', Thrift.Type.I16, 5);
    output.writeI16(this.maxParts);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableStatsResult = module.exports.TableStatsResult = function(args) {
  this.tableStats = null;
  if (args) {
    if (args.tableStats !== undefined) {
      this.tableStats = args.tableStats;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tableStats is unset!');
    }
  }
};
TableStatsResult.prototype = {};
TableStatsResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size330 = 0;
        var _rtmp3334;
        this.tableStats = [];
        var _etype333 = 0;
        _rtmp3334 = input.readListBegin();
        _etype333 = _rtmp3334.etype;
        _size330 = _rtmp3334.size;
        for (var _i335 = 0; _i335 < _size330; ++_i335)
        {
          var elem336 = null;
          elem336 = new ttypes.ColumnStatisticsObj();
          elem336.read(input);
          this.tableStats.push(elem336);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableStatsResult.prototype.write = function(output) {
  output.writeStructBegin('TableStatsResult');
  if (this.tableStats !== null && this.tableStats !== undefined) {
    output.writeFieldBegin('tableStats', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.tableStats.length);
    for (var iter337 in this.tableStats)
    {
      if (this.tableStats.hasOwnProperty(iter337))
      {
        iter337 = this.tableStats[iter337];
        iter337.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PartitionsStatsResult = module.exports.PartitionsStatsResult = function(args) {
  this.partStats = null;
  if (args) {
    if (args.partStats !== undefined) {
      this.partStats = args.partStats;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field partStats is unset!');
    }
  }
};
PartitionsStatsResult.prototype = {};
PartitionsStatsResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size338 = 0;
        var _rtmp3342;
        this.partStats = {};
        var _ktype339 = 0;
        var _vtype340 = 0;
        _rtmp3342 = input.readMapBegin();
        _ktype339 = _rtmp3342.ktype;
        _vtype340 = _rtmp3342.vtype;
        _size338 = _rtmp3342.size;
        for (var _i343 = 0; _i343 < _size338; ++_i343)
        {
          var key344 = null;
          var val345 = null;
          key344 = input.readString();
          var _size346 = 0;
          var _rtmp3350;
          val345 = [];
          var _etype349 = 0;
          _rtmp3350 = input.readListBegin();
          _etype349 = _rtmp3350.etype;
          _size346 = _rtmp3350.size;
          for (var _i351 = 0; _i351 < _size346; ++_i351)
          {
            var elem352 = null;
            elem352 = new ttypes.ColumnStatisticsObj();
            elem352.read(input);
            val345.push(elem352);
          }
          input.readListEnd();
          this.partStats[key344] = val345;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartitionsStatsResult.prototype.write = function(output) {
  output.writeStructBegin('PartitionsStatsResult');
  if (this.partStats !== null && this.partStats !== undefined) {
    output.writeFieldBegin('partStats', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.partStats));
    for (var kiter353 in this.partStats)
    {
      if (this.partStats.hasOwnProperty(kiter353))
      {
        var viter354 = this.partStats[kiter353];
        output.writeString(kiter353);
        output.writeListBegin(Thrift.Type.STRUCT, viter354.length);
        for (var iter355 in viter354)
        {
          if (viter354.hasOwnProperty(iter355))
          {
            iter355 = viter354[iter355];
            iter355.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableStatsRequest = module.exports.TableStatsRequest = function(args) {
  this.dbName = null;
  this.tblName = null;
  this.colNames = null;
  if (args) {
    if (args.dbName !== undefined) {
      this.dbName = args.dbName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dbName is unset!');
    }
    if (args.tblName !== undefined) {
      this.tblName = args.tblName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tblName is unset!');
    }
    if (args.colNames !== undefined) {
      this.colNames = args.colNames;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field colNames is unset!');
    }
  }
};
TableStatsRequest.prototype = {};
TableStatsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tblName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size356 = 0;
        var _rtmp3360;
        this.colNames = [];
        var _etype359 = 0;
        _rtmp3360 = input.readListBegin();
        _etype359 = _rtmp3360.etype;
        _size356 = _rtmp3360.size;
        for (var _i361 = 0; _i361 < _size356; ++_i361)
        {
          var elem362 = null;
          elem362 = input.readString();
          this.colNames.push(elem362);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableStatsRequest.prototype.write = function(output) {
  output.writeStructBegin('TableStatsRequest');
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 1);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.tblName !== null && this.tblName !== undefined) {
    output.writeFieldBegin('tblName', Thrift.Type.STRING, 2);
    output.writeString(this.tblName);
    output.writeFieldEnd();
  }
  if (this.colNames !== null && this.colNames !== undefined) {
    output.writeFieldBegin('colNames', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.colNames.length);
    for (var iter363 in this.colNames)
    {
      if (this.colNames.hasOwnProperty(iter363))
      {
        iter363 = this.colNames[iter363];
        output.writeString(iter363);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PartitionsStatsRequest = module.exports.PartitionsStatsRequest = function(args) {
  this.dbName = null;
  this.tblName = null;
  this.colNames = null;
  this.partNames = null;
  if (args) {
    if (args.dbName !== undefined) {
      this.dbName = args.dbName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dbName is unset!');
    }
    if (args.tblName !== undefined) {
      this.tblName = args.tblName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tblName is unset!');
    }
    if (args.colNames !== undefined) {
      this.colNames = args.colNames;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field colNames is unset!');
    }
    if (args.partNames !== undefined) {
      this.partNames = args.partNames;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field partNames is unset!');
    }
  }
};
PartitionsStatsRequest.prototype = {};
PartitionsStatsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tblName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size364 = 0;
        var _rtmp3368;
        this.colNames = [];
        var _etype367 = 0;
        _rtmp3368 = input.readListBegin();
        _etype367 = _rtmp3368.etype;
        _size364 = _rtmp3368.size;
        for (var _i369 = 0; _i369 < _size364; ++_i369)
        {
          var elem370 = null;
          elem370 = input.readString();
          this.colNames.push(elem370);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size371 = 0;
        var _rtmp3375;
        this.partNames = [];
        var _etype374 = 0;
        _rtmp3375 = input.readListBegin();
        _etype374 = _rtmp3375.etype;
        _size371 = _rtmp3375.size;
        for (var _i376 = 0; _i376 < _size371; ++_i376)
        {
          var elem377 = null;
          elem377 = input.readString();
          this.partNames.push(elem377);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartitionsStatsRequest.prototype.write = function(output) {
  output.writeStructBegin('PartitionsStatsRequest');
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 1);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.tblName !== null && this.tblName !== undefined) {
    output.writeFieldBegin('tblName', Thrift.Type.STRING, 2);
    output.writeString(this.tblName);
    output.writeFieldEnd();
  }
  if (this.colNames !== null && this.colNames !== undefined) {
    output.writeFieldBegin('colNames', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.colNames.length);
    for (var iter378 in this.colNames)
    {
      if (this.colNames.hasOwnProperty(iter378))
      {
        iter378 = this.colNames[iter378];
        output.writeString(iter378);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.partNames !== null && this.partNames !== undefined) {
    output.writeFieldBegin('partNames', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.partNames.length);
    for (var iter379 in this.partNames)
    {
      if (this.partNames.hasOwnProperty(iter379))
      {
        iter379 = this.partNames[iter379];
        output.writeString(iter379);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddPartitionsResult = module.exports.AddPartitionsResult = function(args) {
  this.partitions = null;
  if (args) {
    if (args.partitions !== undefined) {
      this.partitions = args.partitions;
    }
  }
};
AddPartitionsResult.prototype = {};
AddPartitionsResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size380 = 0;
        var _rtmp3384;
        this.partitions = [];
        var _etype383 = 0;
        _rtmp3384 = input.readListBegin();
        _etype383 = _rtmp3384.etype;
        _size380 = _rtmp3384.size;
        for (var _i385 = 0; _i385 < _size380; ++_i385)
        {
          var elem386 = null;
          elem386 = new ttypes.Partition();
          elem386.read(input);
          this.partitions.push(elem386);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddPartitionsResult.prototype.write = function(output) {
  output.writeStructBegin('AddPartitionsResult');
  if (this.partitions !== null && this.partitions !== undefined) {
    output.writeFieldBegin('partitions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.partitions.length);
    for (var iter387 in this.partitions)
    {
      if (this.partitions.hasOwnProperty(iter387))
      {
        iter387 = this.partitions[iter387];
        iter387.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddPartitionsRequest = module.exports.AddPartitionsRequest = function(args) {
  this.dbName = null;
  this.tblName = null;
  this.parts = null;
  this.ifNotExists = null;
  this.needResult = true;
  if (args) {
    if (args.dbName !== undefined) {
      this.dbName = args.dbName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dbName is unset!');
    }
    if (args.tblName !== undefined) {
      this.tblName = args.tblName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tblName is unset!');
    }
    if (args.parts !== undefined) {
      this.parts = args.parts;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field parts is unset!');
    }
    if (args.ifNotExists !== undefined) {
      this.ifNotExists = args.ifNotExists;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ifNotExists is unset!');
    }
    if (args.needResult !== undefined) {
      this.needResult = args.needResult;
    }
  }
};
AddPartitionsRequest.prototype = {};
AddPartitionsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tblName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size388 = 0;
        var _rtmp3392;
        this.parts = [];
        var _etype391 = 0;
        _rtmp3392 = input.readListBegin();
        _etype391 = _rtmp3392.etype;
        _size388 = _rtmp3392.size;
        for (var _i393 = 0; _i393 < _size388; ++_i393)
        {
          var elem394 = null;
          elem394 = new ttypes.Partition();
          elem394.read(input);
          this.parts.push(elem394);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.ifNotExists = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.needResult = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddPartitionsRequest.prototype.write = function(output) {
  output.writeStructBegin('AddPartitionsRequest');
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 1);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.tblName !== null && this.tblName !== undefined) {
    output.writeFieldBegin('tblName', Thrift.Type.STRING, 2);
    output.writeString(this.tblName);
    output.writeFieldEnd();
  }
  if (this.parts !== null && this.parts !== undefined) {
    output.writeFieldBegin('parts', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.parts.length);
    for (var iter395 in this.parts)
    {
      if (this.parts.hasOwnProperty(iter395))
      {
        iter395 = this.parts[iter395];
        iter395.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ifNotExists !== null && this.ifNotExists !== undefined) {
    output.writeFieldBegin('ifNotExists', Thrift.Type.BOOL, 4);
    output.writeBool(this.ifNotExists);
    output.writeFieldEnd();
  }
  if (this.needResult !== null && this.needResult !== undefined) {
    output.writeFieldBegin('needResult', Thrift.Type.BOOL, 5);
    output.writeBool(this.needResult);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DropPartitionsResult = module.exports.DropPartitionsResult = function(args) {
  this.partitions = null;
  if (args) {
    if (args.partitions !== undefined) {
      this.partitions = args.partitions;
    }
  }
};
DropPartitionsResult.prototype = {};
DropPartitionsResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size396 = 0;
        var _rtmp3400;
        this.partitions = [];
        var _etype399 = 0;
        _rtmp3400 = input.readListBegin();
        _etype399 = _rtmp3400.etype;
        _size396 = _rtmp3400.size;
        for (var _i401 = 0; _i401 < _size396; ++_i401)
        {
          var elem402 = null;
          elem402 = new ttypes.Partition();
          elem402.read(input);
          this.partitions.push(elem402);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DropPartitionsResult.prototype.write = function(output) {
  output.writeStructBegin('DropPartitionsResult');
  if (this.partitions !== null && this.partitions !== undefined) {
    output.writeFieldBegin('partitions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.partitions.length);
    for (var iter403 in this.partitions)
    {
      if (this.partitions.hasOwnProperty(iter403))
      {
        iter403 = this.partitions[iter403];
        iter403.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DropPartitionsExpr = module.exports.DropPartitionsExpr = function(args) {
  this.expr = null;
  this.partArchiveLevel = null;
  if (args) {
    if (args.expr !== undefined) {
      this.expr = args.expr;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field expr is unset!');
    }
    if (args.partArchiveLevel !== undefined) {
      this.partArchiveLevel = args.partArchiveLevel;
    }
  }
};
DropPartitionsExpr.prototype = {};
DropPartitionsExpr.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.expr = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.partArchiveLevel = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DropPartitionsExpr.prototype.write = function(output) {
  output.writeStructBegin('DropPartitionsExpr');
  if (this.expr !== null && this.expr !== undefined) {
    output.writeFieldBegin('expr', Thrift.Type.STRING, 1);
    output.writeBinary(this.expr);
    output.writeFieldEnd();
  }
  if (this.partArchiveLevel !== null && this.partArchiveLevel !== undefined) {
    output.writeFieldBegin('partArchiveLevel', Thrift.Type.I32, 2);
    output.writeI32(this.partArchiveLevel);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RequestPartsSpec = module.exports.RequestPartsSpec = function(args) {
  this.names = null;
  this.exprs = null;
  if (args) {
    if (args.names !== undefined) {
      this.names = args.names;
    }
    if (args.exprs !== undefined) {
      this.exprs = args.exprs;
    }
  }
};
RequestPartsSpec.prototype = {};
RequestPartsSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size404 = 0;
        var _rtmp3408;
        this.names = [];
        var _etype407 = 0;
        _rtmp3408 = input.readListBegin();
        _etype407 = _rtmp3408.etype;
        _size404 = _rtmp3408.size;
        for (var _i409 = 0; _i409 < _size404; ++_i409)
        {
          var elem410 = null;
          elem410 = input.readString();
          this.names.push(elem410);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size411 = 0;
        var _rtmp3415;
        this.exprs = [];
        var _etype414 = 0;
        _rtmp3415 = input.readListBegin();
        _etype414 = _rtmp3415.etype;
        _size411 = _rtmp3415.size;
        for (var _i416 = 0; _i416 < _size411; ++_i416)
        {
          var elem417 = null;
          elem417 = new ttypes.DropPartitionsExpr();
          elem417.read(input);
          this.exprs.push(elem417);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestPartsSpec.prototype.write = function(output) {
  output.writeStructBegin('RequestPartsSpec');
  if (this.names !== null && this.names !== undefined) {
    output.writeFieldBegin('names', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.names.length);
    for (var iter418 in this.names)
    {
      if (this.names.hasOwnProperty(iter418))
      {
        iter418 = this.names[iter418];
        output.writeString(iter418);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.exprs !== null && this.exprs !== undefined) {
    output.writeFieldBegin('exprs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.exprs.length);
    for (var iter419 in this.exprs)
    {
      if (this.exprs.hasOwnProperty(iter419))
      {
        iter419 = this.exprs[iter419];
        iter419.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DropPartitionsRequest = module.exports.DropPartitionsRequest = function(args) {
  this.dbName = null;
  this.tblName = null;
  this.parts = null;
  this.deleteData = null;
  this.ifExists = true;
  this.ignoreProtection = null;
  this.environmentContext = null;
  this.needResult = true;
  if (args) {
    if (args.dbName !== undefined) {
      this.dbName = args.dbName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dbName is unset!');
    }
    if (args.tblName !== undefined) {
      this.tblName = args.tblName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tblName is unset!');
    }
    if (args.parts !== undefined) {
      this.parts = args.parts;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field parts is unset!');
    }
    if (args.deleteData !== undefined) {
      this.deleteData = args.deleteData;
    }
    if (args.ifExists !== undefined) {
      this.ifExists = args.ifExists;
    }
    if (args.ignoreProtection !== undefined) {
      this.ignoreProtection = args.ignoreProtection;
    }
    if (args.environmentContext !== undefined) {
      this.environmentContext = args.environmentContext;
    }
    if (args.needResult !== undefined) {
      this.needResult = args.needResult;
    }
  }
};
DropPartitionsRequest.prototype = {};
DropPartitionsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tblName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.parts = new ttypes.RequestPartsSpec();
        this.parts.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.ifExists = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.ignoreProtection = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.environmentContext = new ttypes.EnvironmentContext();
        this.environmentContext.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.needResult = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DropPartitionsRequest.prototype.write = function(output) {
  output.writeStructBegin('DropPartitionsRequest');
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 1);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.tblName !== null && this.tblName !== undefined) {
    output.writeFieldBegin('tblName', Thrift.Type.STRING, 2);
    output.writeString(this.tblName);
    output.writeFieldEnd();
  }
  if (this.parts !== null && this.parts !== undefined) {
    output.writeFieldBegin('parts', Thrift.Type.STRUCT, 3);
    this.parts.write(output);
    output.writeFieldEnd();
  }
  if (this.deleteData !== null && this.deleteData !== undefined) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 4);
    output.writeBool(this.deleteData);
    output.writeFieldEnd();
  }
  if (this.ifExists !== null && this.ifExists !== undefined) {
    output.writeFieldBegin('ifExists', Thrift.Type.BOOL, 5);
    output.writeBool(this.ifExists);
    output.writeFieldEnd();
  }
  if (this.ignoreProtection !== null && this.ignoreProtection !== undefined) {
    output.writeFieldBegin('ignoreProtection', Thrift.Type.BOOL, 6);
    output.writeBool(this.ignoreProtection);
    output.writeFieldEnd();
  }
  if (this.environmentContext !== null && this.environmentContext !== undefined) {
    output.writeFieldBegin('environmentContext', Thrift.Type.STRUCT, 7);
    this.environmentContext.write(output);
    output.writeFieldEnd();
  }
  if (this.needResult !== null && this.needResult !== undefined) {
    output.writeFieldBegin('needResult', Thrift.Type.BOOL, 8);
    output.writeBool(this.needResult);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResourceUri = module.exports.ResourceUri = function(args) {
  this.resourceType = null;
  this.uri = null;
  if (args) {
    if (args.resourceType !== undefined) {
      this.resourceType = args.resourceType;
    }
    if (args.uri !== undefined) {
      this.uri = args.uri;
    }
  }
};
ResourceUri.prototype = {};
ResourceUri.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.resourceType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResourceUri.prototype.write = function(output) {
  output.writeStructBegin('ResourceUri');
  if (this.resourceType !== null && this.resourceType !== undefined) {
    output.writeFieldBegin('resourceType', Thrift.Type.I32, 1);
    output.writeI32(this.resourceType);
    output.writeFieldEnd();
  }
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 2);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Function = module.exports.Function = function(args) {
  this.functionName = null;
  this.dbName = null;
  this.className = null;
  this.ownerName = null;
  this.ownerType = null;
  this.createTime = null;
  this.functionType = null;
  this.resourceUris = null;
  if (args) {
    if (args.functionName !== undefined) {
      this.functionName = args.functionName;
    }
    if (args.dbName !== undefined) {
      this.dbName = args.dbName;
    }
    if (args.className !== undefined) {
      this.className = args.className;
    }
    if (args.ownerName !== undefined) {
      this.ownerName = args.ownerName;
    }
    if (args.ownerType !== undefined) {
      this.ownerType = args.ownerType;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.functionType !== undefined) {
      this.functionType = args.functionType;
    }
    if (args.resourceUris !== undefined) {
      this.resourceUris = args.resourceUris;
    }
  }
};
Function.prototype = {};
Function.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.functionName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.className = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.ownerName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.ownerType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.functionType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size420 = 0;
        var _rtmp3424;
        this.resourceUris = [];
        var _etype423 = 0;
        _rtmp3424 = input.readListBegin();
        _etype423 = _rtmp3424.etype;
        _size420 = _rtmp3424.size;
        for (var _i425 = 0; _i425 < _size420; ++_i425)
        {
          var elem426 = null;
          elem426 = new ttypes.ResourceUri();
          elem426.read(input);
          this.resourceUris.push(elem426);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Function.prototype.write = function(output) {
  output.writeStructBegin('Function');
  if (this.functionName !== null && this.functionName !== undefined) {
    output.writeFieldBegin('functionName', Thrift.Type.STRING, 1);
    output.writeString(this.functionName);
    output.writeFieldEnd();
  }
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 2);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.className !== null && this.className !== undefined) {
    output.writeFieldBegin('className', Thrift.Type.STRING, 3);
    output.writeString(this.className);
    output.writeFieldEnd();
  }
  if (this.ownerName !== null && this.ownerName !== undefined) {
    output.writeFieldBegin('ownerName', Thrift.Type.STRING, 4);
    output.writeString(this.ownerName);
    output.writeFieldEnd();
  }
  if (this.ownerType !== null && this.ownerType !== undefined) {
    output.writeFieldBegin('ownerType', Thrift.Type.I32, 5);
    output.writeI32(this.ownerType);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 6);
    output.writeI32(this.createTime);
    output.writeFieldEnd();
  }
  if (this.functionType !== null && this.functionType !== undefined) {
    output.writeFieldBegin('functionType', Thrift.Type.I32, 7);
    output.writeI32(this.functionType);
    output.writeFieldEnd();
  }
  if (this.resourceUris !== null && this.resourceUris !== undefined) {
    output.writeFieldBegin('resourceUris', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.resourceUris.length);
    for (var iter427 in this.resourceUris)
    {
      if (this.resourceUris.hasOwnProperty(iter427))
      {
        iter427 = this.resourceUris[iter427];
        iter427.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TxnInfo = module.exports.TxnInfo = function(args) {
  this.id = null;
  this.state = null;
  this.user = null;
  this.hostname = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.state !== undefined) {
      this.state = args.state;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field state is unset!');
    }
    if (args.user !== undefined) {
      this.user = args.user;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field user is unset!');
    }
    if (args.hostname !== undefined) {
      this.hostname = args.hostname;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field hostname is unset!');
    }
  }
};
TxnInfo.prototype = {};
TxnInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.hostname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TxnInfo.prototype.write = function(output) {
  output.writeStructBegin('TxnInfo');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 2);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 3);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.hostname !== null && this.hostname !== undefined) {
    output.writeFieldBegin('hostname', Thrift.Type.STRING, 4);
    output.writeString(this.hostname);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetOpenTxnsInfoResponse = module.exports.GetOpenTxnsInfoResponse = function(args) {
  this.txn_high_water_mark = null;
  this.open_txns = null;
  if (args) {
    if (args.txn_high_water_mark !== undefined) {
      this.txn_high_water_mark = args.txn_high_water_mark;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field txn_high_water_mark is unset!');
    }
    if (args.open_txns !== undefined) {
      this.open_txns = args.open_txns;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field open_txns is unset!');
    }
  }
};
GetOpenTxnsInfoResponse.prototype = {};
GetOpenTxnsInfoResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.txn_high_water_mark = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size428 = 0;
        var _rtmp3432;
        this.open_txns = [];
        var _etype431 = 0;
        _rtmp3432 = input.readListBegin();
        _etype431 = _rtmp3432.etype;
        _size428 = _rtmp3432.size;
        for (var _i433 = 0; _i433 < _size428; ++_i433)
        {
          var elem434 = null;
          elem434 = new ttypes.TxnInfo();
          elem434.read(input);
          this.open_txns.push(elem434);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetOpenTxnsInfoResponse.prototype.write = function(output) {
  output.writeStructBegin('GetOpenTxnsInfoResponse');
  if (this.txn_high_water_mark !== null && this.txn_high_water_mark !== undefined) {
    output.writeFieldBegin('txn_high_water_mark', Thrift.Type.I64, 1);
    output.writeI64(this.txn_high_water_mark);
    output.writeFieldEnd();
  }
  if (this.open_txns !== null && this.open_txns !== undefined) {
    output.writeFieldBegin('open_txns', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.open_txns.length);
    for (var iter435 in this.open_txns)
    {
      if (this.open_txns.hasOwnProperty(iter435))
      {
        iter435 = this.open_txns[iter435];
        iter435.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetOpenTxnsResponse = module.exports.GetOpenTxnsResponse = function(args) {
  this.txn_high_water_mark = null;
  this.open_txns = null;
  if (args) {
    if (args.txn_high_water_mark !== undefined) {
      this.txn_high_water_mark = args.txn_high_water_mark;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field txn_high_water_mark is unset!');
    }
    if (args.open_txns !== undefined) {
      this.open_txns = args.open_txns;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field open_txns is unset!');
    }
  }
};
GetOpenTxnsResponse.prototype = {};
GetOpenTxnsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.txn_high_water_mark = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size436 = 0;
        var _rtmp3440;
        this.open_txns = [];
        var _etype439 = 0;
        _rtmp3440 = input.readSetBegin();
        _etype439 = _rtmp3440.etype;
        _size436 = _rtmp3440.size;
        for (var _i441 = 0; _i441 < _size436; ++_i441)
        {
          var elem442 = null;
          elem442 = input.readI64();
          this.open_txns.push(elem442);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetOpenTxnsResponse.prototype.write = function(output) {
  output.writeStructBegin('GetOpenTxnsResponse');
  if (this.txn_high_water_mark !== null && this.txn_high_water_mark !== undefined) {
    output.writeFieldBegin('txn_high_water_mark', Thrift.Type.I64, 1);
    output.writeI64(this.txn_high_water_mark);
    output.writeFieldEnd();
  }
  if (this.open_txns !== null && this.open_txns !== undefined) {
    output.writeFieldBegin('open_txns', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.I64, this.open_txns.length);
    for (var iter443 in this.open_txns)
    {
      if (this.open_txns.hasOwnProperty(iter443))
      {
        iter443 = this.open_txns[iter443];
        output.writeI64(iter443);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenTxnRequest = module.exports.OpenTxnRequest = function(args) {
  this.num_txns = null;
  this.user = null;
  this.hostname = null;
  if (args) {
    if (args.num_txns !== undefined) {
      this.num_txns = args.num_txns;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field num_txns is unset!');
    }
    if (args.user !== undefined) {
      this.user = args.user;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field user is unset!');
    }
    if (args.hostname !== undefined) {
      this.hostname = args.hostname;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field hostname is unset!');
    }
  }
};
OpenTxnRequest.prototype = {};
OpenTxnRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.num_txns = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.hostname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenTxnRequest.prototype.write = function(output) {
  output.writeStructBegin('OpenTxnRequest');
  if (this.num_txns !== null && this.num_txns !== undefined) {
    output.writeFieldBegin('num_txns', Thrift.Type.I32, 1);
    output.writeI32(this.num_txns);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.hostname !== null && this.hostname !== undefined) {
    output.writeFieldBegin('hostname', Thrift.Type.STRING, 3);
    output.writeString(this.hostname);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenTxnsResponse = module.exports.OpenTxnsResponse = function(args) {
  this.txn_ids = null;
  if (args) {
    if (args.txn_ids !== undefined) {
      this.txn_ids = args.txn_ids;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field txn_ids is unset!');
    }
  }
};
OpenTxnsResponse.prototype = {};
OpenTxnsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size444 = 0;
        var _rtmp3448;
        this.txn_ids = [];
        var _etype447 = 0;
        _rtmp3448 = input.readListBegin();
        _etype447 = _rtmp3448.etype;
        _size444 = _rtmp3448.size;
        for (var _i449 = 0; _i449 < _size444; ++_i449)
        {
          var elem450 = null;
          elem450 = input.readI64();
          this.txn_ids.push(elem450);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenTxnsResponse.prototype.write = function(output) {
  output.writeStructBegin('OpenTxnsResponse');
  if (this.txn_ids !== null && this.txn_ids !== undefined) {
    output.writeFieldBegin('txn_ids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.txn_ids.length);
    for (var iter451 in this.txn_ids)
    {
      if (this.txn_ids.hasOwnProperty(iter451))
      {
        iter451 = this.txn_ids[iter451];
        output.writeI64(iter451);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AbortTxnRequest = module.exports.AbortTxnRequest = function(args) {
  this.txnid = null;
  if (args) {
    if (args.txnid !== undefined) {
      this.txnid = args.txnid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field txnid is unset!');
    }
  }
};
AbortTxnRequest.prototype = {};
AbortTxnRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.txnid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AbortTxnRequest.prototype.write = function(output) {
  output.writeStructBegin('AbortTxnRequest');
  if (this.txnid !== null && this.txnid !== undefined) {
    output.writeFieldBegin('txnid', Thrift.Type.I64, 1);
    output.writeI64(this.txnid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommitTxnRequest = module.exports.CommitTxnRequest = function(args) {
  this.txnid = null;
  if (args) {
    if (args.txnid !== undefined) {
      this.txnid = args.txnid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field txnid is unset!');
    }
  }
};
CommitTxnRequest.prototype = {};
CommitTxnRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.txnid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommitTxnRequest.prototype.write = function(output) {
  output.writeStructBegin('CommitTxnRequest');
  if (this.txnid !== null && this.txnid !== undefined) {
    output.writeFieldBegin('txnid', Thrift.Type.I64, 1);
    output.writeI64(this.txnid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LockComponent = module.exports.LockComponent = function(args) {
  this.type = null;
  this.level = null;
  this.dbname = null;
  this.tablename = null;
  this.partitionname = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.level !== undefined) {
      this.level = args.level;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field level is unset!');
    }
    if (args.dbname !== undefined) {
      this.dbname = args.dbname;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dbname is unset!');
    }
    if (args.tablename !== undefined) {
      this.tablename = args.tablename;
    }
    if (args.partitionname !== undefined) {
      this.partitionname = args.partitionname;
    }
  }
};
LockComponent.prototype = {};
LockComponent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.tablename = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.partitionname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LockComponent.prototype.write = function(output) {
  output.writeStructBegin('LockComponent');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.level !== null && this.level !== undefined) {
    output.writeFieldBegin('level', Thrift.Type.I32, 2);
    output.writeI32(this.level);
    output.writeFieldEnd();
  }
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 3);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.tablename !== null && this.tablename !== undefined) {
    output.writeFieldBegin('tablename', Thrift.Type.STRING, 4);
    output.writeString(this.tablename);
    output.writeFieldEnd();
  }
  if (this.partitionname !== null && this.partitionname !== undefined) {
    output.writeFieldBegin('partitionname', Thrift.Type.STRING, 5);
    output.writeString(this.partitionname);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LockRequest = module.exports.LockRequest = function(args) {
  this.component = null;
  this.txnid = null;
  this.user = null;
  this.hostname = null;
  if (args) {
    if (args.component !== undefined) {
      this.component = args.component;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field component is unset!');
    }
    if (args.txnid !== undefined) {
      this.txnid = args.txnid;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field user is unset!');
    }
    if (args.hostname !== undefined) {
      this.hostname = args.hostname;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field hostname is unset!');
    }
  }
};
LockRequest.prototype = {};
LockRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size452 = 0;
        var _rtmp3456;
        this.component = [];
        var _etype455 = 0;
        _rtmp3456 = input.readListBegin();
        _etype455 = _rtmp3456.etype;
        _size452 = _rtmp3456.size;
        for (var _i457 = 0; _i457 < _size452; ++_i457)
        {
          var elem458 = null;
          elem458 = new ttypes.LockComponent();
          elem458.read(input);
          this.component.push(elem458);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.txnid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.hostname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LockRequest.prototype.write = function(output) {
  output.writeStructBegin('LockRequest');
  if (this.component !== null && this.component !== undefined) {
    output.writeFieldBegin('component', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.component.length);
    for (var iter459 in this.component)
    {
      if (this.component.hasOwnProperty(iter459))
      {
        iter459 = this.component[iter459];
        iter459.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.txnid !== null && this.txnid !== undefined) {
    output.writeFieldBegin('txnid', Thrift.Type.I64, 2);
    output.writeI64(this.txnid);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 3);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.hostname !== null && this.hostname !== undefined) {
    output.writeFieldBegin('hostname', Thrift.Type.STRING, 4);
    output.writeString(this.hostname);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LockResponse = module.exports.LockResponse = function(args) {
  this.lockid = null;
  this.state = null;
  if (args) {
    if (args.lockid !== undefined) {
      this.lockid = args.lockid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field lockid is unset!');
    }
    if (args.state !== undefined) {
      this.state = args.state;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field state is unset!');
    }
  }
};
LockResponse.prototype = {};
LockResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.lockid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LockResponse.prototype.write = function(output) {
  output.writeStructBegin('LockResponse');
  if (this.lockid !== null && this.lockid !== undefined) {
    output.writeFieldBegin('lockid', Thrift.Type.I64, 1);
    output.writeI64(this.lockid);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 2);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CheckLockRequest = module.exports.CheckLockRequest = function(args) {
  this.lockid = null;
  if (args) {
    if (args.lockid !== undefined) {
      this.lockid = args.lockid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field lockid is unset!');
    }
  }
};
CheckLockRequest.prototype = {};
CheckLockRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.lockid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CheckLockRequest.prototype.write = function(output) {
  output.writeStructBegin('CheckLockRequest');
  if (this.lockid !== null && this.lockid !== undefined) {
    output.writeFieldBegin('lockid', Thrift.Type.I64, 1);
    output.writeI64(this.lockid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UnlockRequest = module.exports.UnlockRequest = function(args) {
  this.lockid = null;
  if (args) {
    if (args.lockid !== undefined) {
      this.lockid = args.lockid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field lockid is unset!');
    }
  }
};
UnlockRequest.prototype = {};
UnlockRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.lockid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnlockRequest.prototype.write = function(output) {
  output.writeStructBegin('UnlockRequest');
  if (this.lockid !== null && this.lockid !== undefined) {
    output.writeFieldBegin('lockid', Thrift.Type.I64, 1);
    output.writeI64(this.lockid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ShowLocksRequest = module.exports.ShowLocksRequest = function(args) {
};
ShowLocksRequest.prototype = {};
ShowLocksRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShowLocksRequest.prototype.write = function(output) {
  output.writeStructBegin('ShowLocksRequest');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ShowLocksResponseElement = module.exports.ShowLocksResponseElement = function(args) {
  this.lockid = null;
  this.dbname = null;
  this.tablename = null;
  this.partname = null;
  this.state = null;
  this.type = null;
  this.txnid = null;
  this.lastheartbeat = null;
  this.acquiredat = null;
  this.user = null;
  this.hostname = null;
  if (args) {
    if (args.lockid !== undefined) {
      this.lockid = args.lockid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field lockid is unset!');
    }
    if (args.dbname !== undefined) {
      this.dbname = args.dbname;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dbname is unset!');
    }
    if (args.tablename !== undefined) {
      this.tablename = args.tablename;
    }
    if (args.partname !== undefined) {
      this.partname = args.partname;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field state is unset!');
    }
    if (args.type !== undefined) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.txnid !== undefined) {
      this.txnid = args.txnid;
    }
    if (args.lastheartbeat !== undefined) {
      this.lastheartbeat = args.lastheartbeat;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field lastheartbeat is unset!');
    }
    if (args.acquiredat !== undefined) {
      this.acquiredat = args.acquiredat;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field user is unset!');
    }
    if (args.hostname !== undefined) {
      this.hostname = args.hostname;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field hostname is unset!');
    }
  }
};
ShowLocksResponseElement.prototype = {};
ShowLocksResponseElement.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.lockid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tablename = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.partname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.txnid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.lastheartbeat = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.acquiredat = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.hostname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShowLocksResponseElement.prototype.write = function(output) {
  output.writeStructBegin('ShowLocksResponseElement');
  if (this.lockid !== null && this.lockid !== undefined) {
    output.writeFieldBegin('lockid', Thrift.Type.I64, 1);
    output.writeI64(this.lockid);
    output.writeFieldEnd();
  }
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 2);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.tablename !== null && this.tablename !== undefined) {
    output.writeFieldBegin('tablename', Thrift.Type.STRING, 3);
    output.writeString(this.tablename);
    output.writeFieldEnd();
  }
  if (this.partname !== null && this.partname !== undefined) {
    output.writeFieldBegin('partname', Thrift.Type.STRING, 4);
    output.writeString(this.partname);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 5);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 6);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.txnid !== null && this.txnid !== undefined) {
    output.writeFieldBegin('txnid', Thrift.Type.I64, 7);
    output.writeI64(this.txnid);
    output.writeFieldEnd();
  }
  if (this.lastheartbeat !== null && this.lastheartbeat !== undefined) {
    output.writeFieldBegin('lastheartbeat', Thrift.Type.I64, 8);
    output.writeI64(this.lastheartbeat);
    output.writeFieldEnd();
  }
  if (this.acquiredat !== null && this.acquiredat !== undefined) {
    output.writeFieldBegin('acquiredat', Thrift.Type.I64, 9);
    output.writeI64(this.acquiredat);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 10);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.hostname !== null && this.hostname !== undefined) {
    output.writeFieldBegin('hostname', Thrift.Type.STRING, 11);
    output.writeString(this.hostname);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ShowLocksResponse = module.exports.ShowLocksResponse = function(args) {
  this.locks = null;
  if (args) {
    if (args.locks !== undefined) {
      this.locks = args.locks;
    }
  }
};
ShowLocksResponse.prototype = {};
ShowLocksResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size460 = 0;
        var _rtmp3464;
        this.locks = [];
        var _etype463 = 0;
        _rtmp3464 = input.readListBegin();
        _etype463 = _rtmp3464.etype;
        _size460 = _rtmp3464.size;
        for (var _i465 = 0; _i465 < _size460; ++_i465)
        {
          var elem466 = null;
          elem466 = new ttypes.ShowLocksResponseElement();
          elem466.read(input);
          this.locks.push(elem466);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShowLocksResponse.prototype.write = function(output) {
  output.writeStructBegin('ShowLocksResponse');
  if (this.locks !== null && this.locks !== undefined) {
    output.writeFieldBegin('locks', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.locks.length);
    for (var iter467 in this.locks)
    {
      if (this.locks.hasOwnProperty(iter467))
      {
        iter467 = this.locks[iter467];
        iter467.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HeartbeatRequest = module.exports.HeartbeatRequest = function(args) {
  this.lockid = null;
  this.txnid = null;
  if (args) {
    if (args.lockid !== undefined) {
      this.lockid = args.lockid;
    }
    if (args.txnid !== undefined) {
      this.txnid = args.txnid;
    }
  }
};
HeartbeatRequest.prototype = {};
HeartbeatRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.lockid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.txnid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HeartbeatRequest.prototype.write = function(output) {
  output.writeStructBegin('HeartbeatRequest');
  if (this.lockid !== null && this.lockid !== undefined) {
    output.writeFieldBegin('lockid', Thrift.Type.I64, 1);
    output.writeI64(this.lockid);
    output.writeFieldEnd();
  }
  if (this.txnid !== null && this.txnid !== undefined) {
    output.writeFieldBegin('txnid', Thrift.Type.I64, 2);
    output.writeI64(this.txnid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HeartbeatTxnRangeRequest = module.exports.HeartbeatTxnRangeRequest = function(args) {
  this.min = null;
  this.max = null;
  if (args) {
    if (args.min !== undefined) {
      this.min = args.min;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field min is unset!');
    }
    if (args.max !== undefined) {
      this.max = args.max;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field max is unset!');
    }
  }
};
HeartbeatTxnRangeRequest.prototype = {};
HeartbeatTxnRangeRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.min = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.max = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HeartbeatTxnRangeRequest.prototype.write = function(output) {
  output.writeStructBegin('HeartbeatTxnRangeRequest');
  if (this.min !== null && this.min !== undefined) {
    output.writeFieldBegin('min', Thrift.Type.I64, 1);
    output.writeI64(this.min);
    output.writeFieldEnd();
  }
  if (this.max !== null && this.max !== undefined) {
    output.writeFieldBegin('max', Thrift.Type.I64, 2);
    output.writeI64(this.max);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HeartbeatTxnRangeResponse = module.exports.HeartbeatTxnRangeResponse = function(args) {
  this.aborted = null;
  this.nosuch = null;
  if (args) {
    if (args.aborted !== undefined) {
      this.aborted = args.aborted;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field aborted is unset!');
    }
    if (args.nosuch !== undefined) {
      this.nosuch = args.nosuch;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field nosuch is unset!');
    }
  }
};
HeartbeatTxnRangeResponse.prototype = {};
HeartbeatTxnRangeResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size468 = 0;
        var _rtmp3472;
        this.aborted = [];
        var _etype471 = 0;
        _rtmp3472 = input.readSetBegin();
        _etype471 = _rtmp3472.etype;
        _size468 = _rtmp3472.size;
        for (var _i473 = 0; _i473 < _size468; ++_i473)
        {
          var elem474 = null;
          elem474 = input.readI64();
          this.aborted.push(elem474);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size475 = 0;
        var _rtmp3479;
        this.nosuch = [];
        var _etype478 = 0;
        _rtmp3479 = input.readSetBegin();
        _etype478 = _rtmp3479.etype;
        _size475 = _rtmp3479.size;
        for (var _i480 = 0; _i480 < _size475; ++_i480)
        {
          var elem481 = null;
          elem481 = input.readI64();
          this.nosuch.push(elem481);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HeartbeatTxnRangeResponse.prototype.write = function(output) {
  output.writeStructBegin('HeartbeatTxnRangeResponse');
  if (this.aborted !== null && this.aborted !== undefined) {
    output.writeFieldBegin('aborted', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.I64, this.aborted.length);
    for (var iter482 in this.aborted)
    {
      if (this.aborted.hasOwnProperty(iter482))
      {
        iter482 = this.aborted[iter482];
        output.writeI64(iter482);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.nosuch !== null && this.nosuch !== undefined) {
    output.writeFieldBegin('nosuch', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.I64, this.nosuch.length);
    for (var iter483 in this.nosuch)
    {
      if (this.nosuch.hasOwnProperty(iter483))
      {
        iter483 = this.nosuch[iter483];
        output.writeI64(iter483);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CompactionRequest = module.exports.CompactionRequest = function(args) {
  this.dbname = null;
  this.tablename = null;
  this.partitionname = null;
  this.type = null;
  this.runas = null;
  if (args) {
    if (args.dbname !== undefined) {
      this.dbname = args.dbname;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dbname is unset!');
    }
    if (args.tablename !== undefined) {
      this.tablename = args.tablename;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tablename is unset!');
    }
    if (args.partitionname !== undefined) {
      this.partitionname = args.partitionname;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.runas !== undefined) {
      this.runas = args.runas;
    }
  }
};
CompactionRequest.prototype = {};
CompactionRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tablename = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.partitionname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.runas = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompactionRequest.prototype.write = function(output) {
  output.writeStructBegin('CompactionRequest');
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.tablename !== null && this.tablename !== undefined) {
    output.writeFieldBegin('tablename', Thrift.Type.STRING, 2);
    output.writeString(this.tablename);
    output.writeFieldEnd();
  }
  if (this.partitionname !== null && this.partitionname !== undefined) {
    output.writeFieldBegin('partitionname', Thrift.Type.STRING, 3);
    output.writeString(this.partitionname);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 4);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.runas !== null && this.runas !== undefined) {
    output.writeFieldBegin('runas', Thrift.Type.STRING, 5);
    output.writeString(this.runas);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ShowCompactRequest = module.exports.ShowCompactRequest = function(args) {
};
ShowCompactRequest.prototype = {};
ShowCompactRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShowCompactRequest.prototype.write = function(output) {
  output.writeStructBegin('ShowCompactRequest');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ShowCompactResponseElement = module.exports.ShowCompactResponseElement = function(args) {
  this.dbname = null;
  this.tablename = null;
  this.partitionname = null;
  this.type = null;
  this.state = null;
  this.workerid = null;
  this.start = null;
  this.runAs = null;
  if (args) {
    if (args.dbname !== undefined) {
      this.dbname = args.dbname;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dbname is unset!');
    }
    if (args.tablename !== undefined) {
      this.tablename = args.tablename;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tablename is unset!');
    }
    if (args.partitionname !== undefined) {
      this.partitionname = args.partitionname;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.state !== undefined) {
      this.state = args.state;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field state is unset!');
    }
    if (args.workerid !== undefined) {
      this.workerid = args.workerid;
    }
    if (args.start !== undefined) {
      this.start = args.start;
    }
    if (args.runAs !== undefined) {
      this.runAs = args.runAs;
    }
  }
};
ShowCompactResponseElement.prototype = {};
ShowCompactResponseElement.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tablename = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.partitionname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.state = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.workerid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.start = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.runAs = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShowCompactResponseElement.prototype.write = function(output) {
  output.writeStructBegin('ShowCompactResponseElement');
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.tablename !== null && this.tablename !== undefined) {
    output.writeFieldBegin('tablename', Thrift.Type.STRING, 2);
    output.writeString(this.tablename);
    output.writeFieldEnd();
  }
  if (this.partitionname !== null && this.partitionname !== undefined) {
    output.writeFieldBegin('partitionname', Thrift.Type.STRING, 3);
    output.writeString(this.partitionname);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 4);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.STRING, 5);
    output.writeString(this.state);
    output.writeFieldEnd();
  }
  if (this.workerid !== null && this.workerid !== undefined) {
    output.writeFieldBegin('workerid', Thrift.Type.STRING, 6);
    output.writeString(this.workerid);
    output.writeFieldEnd();
  }
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I64, 7);
    output.writeI64(this.start);
    output.writeFieldEnd();
  }
  if (this.runAs !== null && this.runAs !== undefined) {
    output.writeFieldBegin('runAs', Thrift.Type.STRING, 8);
    output.writeString(this.runAs);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ShowCompactResponse = module.exports.ShowCompactResponse = function(args) {
  this.compacts = null;
  if (args) {
    if (args.compacts !== undefined) {
      this.compacts = args.compacts;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field compacts is unset!');
    }
  }
};
ShowCompactResponse.prototype = {};
ShowCompactResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size484 = 0;
        var _rtmp3488;
        this.compacts = [];
        var _etype487 = 0;
        _rtmp3488 = input.readListBegin();
        _etype487 = _rtmp3488.etype;
        _size484 = _rtmp3488.size;
        for (var _i489 = 0; _i489 < _size484; ++_i489)
        {
          var elem490 = null;
          elem490 = new ttypes.ShowCompactResponseElement();
          elem490.read(input);
          this.compacts.push(elem490);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShowCompactResponse.prototype.write = function(output) {
  output.writeStructBegin('ShowCompactResponse');
  if (this.compacts !== null && this.compacts !== undefined) {
    output.writeFieldBegin('compacts', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.compacts.length);
    for (var iter491 in this.compacts)
    {
      if (this.compacts.hasOwnProperty(iter491))
      {
        iter491 = this.compacts[iter491];
        iter491.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetaException = module.exports.MetaException = function(args) {
  Thrift.TException.call(this, "MetaException")
  this.name = "MetaException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(MetaException, Thrift.TException);
MetaException.prototype.name = 'MetaException';
MetaException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetaException.prototype.write = function(output) {
  output.writeStructBegin('MetaException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UnknownTableException = module.exports.UnknownTableException = function(args) {
  Thrift.TException.call(this, "UnknownTableException")
  this.name = "UnknownTableException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(UnknownTableException, Thrift.TException);
UnknownTableException.prototype.name = 'UnknownTableException';
UnknownTableException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnknownTableException.prototype.write = function(output) {
  output.writeStructBegin('UnknownTableException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UnknownDBException = module.exports.UnknownDBException = function(args) {
  Thrift.TException.call(this, "UnknownDBException")
  this.name = "UnknownDBException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(UnknownDBException, Thrift.TException);
UnknownDBException.prototype.name = 'UnknownDBException';
UnknownDBException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnknownDBException.prototype.write = function(output) {
  output.writeStructBegin('UnknownDBException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AlreadyExistsException = module.exports.AlreadyExistsException = function(args) {
  Thrift.TException.call(this, "AlreadyExistsException")
  this.name = "AlreadyExistsException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(AlreadyExistsException, Thrift.TException);
AlreadyExistsException.prototype.name = 'AlreadyExistsException';
AlreadyExistsException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AlreadyExistsException.prototype.write = function(output) {
  output.writeStructBegin('AlreadyExistsException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidPartitionException = module.exports.InvalidPartitionException = function(args) {
  Thrift.TException.call(this, "InvalidPartitionException")
  this.name = "InvalidPartitionException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(InvalidPartitionException, Thrift.TException);
InvalidPartitionException.prototype.name = 'InvalidPartitionException';
InvalidPartitionException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidPartitionException.prototype.write = function(output) {
  output.writeStructBegin('InvalidPartitionException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UnknownPartitionException = module.exports.UnknownPartitionException = function(args) {
  Thrift.TException.call(this, "UnknownPartitionException")
  this.name = "UnknownPartitionException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(UnknownPartitionException, Thrift.TException);
UnknownPartitionException.prototype.name = 'UnknownPartitionException';
UnknownPartitionException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnknownPartitionException.prototype.write = function(output) {
  output.writeStructBegin('UnknownPartitionException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidObjectException = module.exports.InvalidObjectException = function(args) {
  Thrift.TException.call(this, "InvalidObjectException")
  this.name = "InvalidObjectException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(InvalidObjectException, Thrift.TException);
InvalidObjectException.prototype.name = 'InvalidObjectException';
InvalidObjectException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidObjectException.prototype.write = function(output) {
  output.writeStructBegin('InvalidObjectException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoSuchObjectException = module.exports.NoSuchObjectException = function(args) {
  Thrift.TException.call(this, "NoSuchObjectException")
  this.name = "NoSuchObjectException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(NoSuchObjectException, Thrift.TException);
NoSuchObjectException.prototype.name = 'NoSuchObjectException';
NoSuchObjectException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoSuchObjectException.prototype.write = function(output) {
  output.writeStructBegin('NoSuchObjectException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IndexAlreadyExistsException = module.exports.IndexAlreadyExistsException = function(args) {
  Thrift.TException.call(this, "IndexAlreadyExistsException")
  this.name = "IndexAlreadyExistsException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(IndexAlreadyExistsException, Thrift.TException);
IndexAlreadyExistsException.prototype.name = 'IndexAlreadyExistsException';
IndexAlreadyExistsException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IndexAlreadyExistsException.prototype.write = function(output) {
  output.writeStructBegin('IndexAlreadyExistsException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidOperationException = module.exports.InvalidOperationException = function(args) {
  Thrift.TException.call(this, "InvalidOperationException")
  this.name = "InvalidOperationException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(InvalidOperationException, Thrift.TException);
InvalidOperationException.prototype.name = 'InvalidOperationException';
InvalidOperationException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidOperationException.prototype.write = function(output) {
  output.writeStructBegin('InvalidOperationException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ConfigValSecurityException = module.exports.ConfigValSecurityException = function(args) {
  Thrift.TException.call(this, "ConfigValSecurityException")
  this.name = "ConfigValSecurityException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(ConfigValSecurityException, Thrift.TException);
ConfigValSecurityException.prototype.name = 'ConfigValSecurityException';
ConfigValSecurityException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConfigValSecurityException.prototype.write = function(output) {
  output.writeStructBegin('ConfigValSecurityException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidInputException = module.exports.InvalidInputException = function(args) {
  Thrift.TException.call(this, "InvalidInputException")
  this.name = "InvalidInputException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(InvalidInputException, Thrift.TException);
InvalidInputException.prototype.name = 'InvalidInputException';
InvalidInputException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidInputException.prototype.write = function(output) {
  output.writeStructBegin('InvalidInputException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoSuchTxnException = module.exports.NoSuchTxnException = function(args) {
  Thrift.TException.call(this, "NoSuchTxnException")
  this.name = "NoSuchTxnException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(NoSuchTxnException, Thrift.TException);
NoSuchTxnException.prototype.name = 'NoSuchTxnException';
NoSuchTxnException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoSuchTxnException.prototype.write = function(output) {
  output.writeStructBegin('NoSuchTxnException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TxnAbortedException = module.exports.TxnAbortedException = function(args) {
  Thrift.TException.call(this, "TxnAbortedException")
  this.name = "TxnAbortedException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(TxnAbortedException, Thrift.TException);
TxnAbortedException.prototype.name = 'TxnAbortedException';
TxnAbortedException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TxnAbortedException.prototype.write = function(output) {
  output.writeStructBegin('TxnAbortedException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TxnOpenException = module.exports.TxnOpenException = function(args) {
  Thrift.TException.call(this, "TxnOpenException")
  this.name = "TxnOpenException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(TxnOpenException, Thrift.TException);
TxnOpenException.prototype.name = 'TxnOpenException';
TxnOpenException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TxnOpenException.prototype.write = function(output) {
  output.writeStructBegin('TxnOpenException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoSuchLockException = module.exports.NoSuchLockException = function(args) {
  Thrift.TException.call(this, "NoSuchLockException")
  this.name = "NoSuchLockException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(NoSuchLockException, Thrift.TException);
NoSuchLockException.prototype.name = 'NoSuchLockException';
NoSuchLockException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoSuchLockException.prototype.write = function(output) {
  output.writeStructBegin('NoSuchLockException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.DDL_TIME = 'transient_lastDdlTime';
ttypes.HIVE_FILTER_FIELD_OWNER = 'hive_filter_field_owner__';
ttypes.HIVE_FILTER_FIELD_PARAMS = 'hive_filter_field_params__';
ttypes.HIVE_FILTER_FIELD_LAST_ACCESS = 'hive_filter_field_last_access__';
ttypes.IS_ARCHIVED = 'is_archived';
ttypes.ORIGINAL_LOCATION = 'original_location';
ttypes.IS_IMMUTABLE = 'immutable';
ttypes.META_TABLE_COLUMNS = 'columns';
ttypes.META_TABLE_COLUMN_TYPES = 'columns.types';
ttypes.BUCKET_FIELD_NAME = 'bucket_field_name';
ttypes.BUCKET_COUNT = 'bucket_count';
ttypes.FIELD_TO_DIMENSION = 'field_to_dimension';
ttypes.META_TABLE_NAME = 'name';
ttypes.META_TABLE_DB = 'db';
ttypes.META_TABLE_LOCATION = 'location';
ttypes.META_TABLE_SERDE = 'serde';
ttypes.META_TABLE_PARTITION_COLUMNS = 'partition_columns';
ttypes.META_TABLE_PARTITION_COLUMN_TYPES = 'partition_columns.types';
ttypes.FILE_INPUT_FORMAT = 'file.inputformat';
ttypes.FILE_OUTPUT_FORMAT = 'file.outputformat';
ttypes.META_TABLE_STORAGE = 'storage_handler';
