//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var fb303_ttypes = require('./fb303_types')


var FacebookService = require('./FacebookService')
var FacebookServiceClient = FacebookService.Client
var FacebookServiceProcessor = FacebookService.Processor
var ttypes = require('./hive_metastore_types');
//HELPER FUNCTIONS AND STRUCTURES

ThriftHiveMetastore_getMetaConf_args = function(args) {
  this.key = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
  }
};
ThriftHiveMetastore_getMetaConf_args.prototype = {};
ThriftHiveMetastore_getMetaConf_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_getMetaConf_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_getMetaConf_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_getMetaConf_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_getMetaConf_result.prototype = {};
ThriftHiveMetastore_getMetaConf_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_getMetaConf_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_getMetaConf_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_setMetaConf_args = function(args) {
  this.key = null;
  this.value = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
ThriftHiveMetastore_setMetaConf_args.prototype = {};
ThriftHiveMetastore_setMetaConf_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_setMetaConf_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_setMetaConf_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_setMetaConf_result = function(args) {
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_setMetaConf_result.prototype = {};
ThriftHiveMetastore_setMetaConf_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_setMetaConf_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_setMetaConf_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_create_database_args = function(args) {
  this.database = null;
  if (args) {
    if (args.database !== undefined) {
      this.database = args.database;
    }
  }
};
ThriftHiveMetastore_create_database_args.prototype = {};
ThriftHiveMetastore_create_database_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.database = new ttypes.Database();
        this.database.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_create_database_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_database_args');
  if (this.database !== null && this.database !== undefined) {
    output.writeFieldBegin('database', Thrift.Type.STRUCT, 1);
    this.database.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_create_database_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_create_database_result.prototype = {};
ThriftHiveMetastore_create_database_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.AlreadyExistsException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_create_database_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_database_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_database_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
ThriftHiveMetastore_get_database_args.prototype = {};
ThriftHiveMetastore_get_database_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_database_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_database_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_database_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_database_result.prototype = {};
ThriftHiveMetastore_get_database_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Database();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_database_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_database_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_drop_database_args = function(args) {
  this.name = null;
  this.deleteData = null;
  this.cascade = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.deleteData !== undefined) {
      this.deleteData = args.deleteData;
    }
    if (args.cascade !== undefined) {
      this.cascade = args.cascade;
    }
  }
};
ThriftHiveMetastore_drop_database_args.prototype = {};
ThriftHiveMetastore_drop_database_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.cascade = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_database_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_database_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.deleteData !== null && this.deleteData !== undefined) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 2);
    output.writeBool(this.deleteData);
    output.writeFieldEnd();
  }
  if (this.cascade !== null && this.cascade !== undefined) {
    output.writeFieldBegin('cascade', Thrift.Type.BOOL, 3);
    output.writeBool(this.cascade);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_drop_database_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidOperationException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_drop_database_result.prototype = {};
ThriftHiveMetastore_drop_database_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidOperationException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_database_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_database_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_databases_args = function(args) {
  this.pattern = null;
  if (args) {
    if (args.pattern !== undefined) {
      this.pattern = args.pattern;
    }
  }
};
ThriftHiveMetastore_get_databases_args.prototype = {};
ThriftHiveMetastore_get_databases_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.pattern = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_databases_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_databases_args');
  if (this.pattern !== null && this.pattern !== undefined) {
    output.writeFieldBegin('pattern', Thrift.Type.STRING, 1);
    output.writeString(this.pattern);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_databases_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_get_databases_result.prototype = {};
ThriftHiveMetastore_get_databases_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size492 = 0;
        var _rtmp3496;
        this.success = [];
        var _etype495 = 0;
        _rtmp3496 = input.readListBegin();
        _etype495 = _rtmp3496.etype;
        _size492 = _rtmp3496.size;
        for (var _i497 = 0; _i497 < _size492; ++_i497)
        {
          var elem498 = null;
          elem498 = input.readString();
          this.success.push(elem498);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_databases_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_databases_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter499 in this.success)
    {
      if (this.success.hasOwnProperty(iter499))
      {
        iter499 = this.success[iter499];
        output.writeString(iter499);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_all_databases_args = function(args) {
};
ThriftHiveMetastore_get_all_databases_args.prototype = {};
ThriftHiveMetastore_get_all_databases_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_all_databases_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_all_databases_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_all_databases_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_get_all_databases_result.prototype = {};
ThriftHiveMetastore_get_all_databases_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size500 = 0;
        var _rtmp3504;
        this.success = [];
        var _etype503 = 0;
        _rtmp3504 = input.readListBegin();
        _etype503 = _rtmp3504.etype;
        _size500 = _rtmp3504.size;
        for (var _i505 = 0; _i505 < _size500; ++_i505)
        {
          var elem506 = null;
          elem506 = input.readString();
          this.success.push(elem506);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_all_databases_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_all_databases_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter507 in this.success)
    {
      if (this.success.hasOwnProperty(iter507))
      {
        iter507 = this.success[iter507];
        output.writeString(iter507);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_alter_database_args = function(args) {
  this.dbname = null;
  this.db = null;
  if (args) {
    if (args.dbname !== undefined) {
      this.dbname = args.dbname;
    }
    if (args.db !== undefined) {
      this.db = args.db;
    }
  }
};
ThriftHiveMetastore_alter_database_args.prototype = {};
ThriftHiveMetastore_alter_database_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.db = new ttypes.Database();
        this.db.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_database_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_database_args');
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.db !== null && this.db !== undefined) {
    output.writeFieldBegin('db', Thrift.Type.STRUCT, 2);
    this.db.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_alter_database_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_alter_database_result.prototype = {};
ThriftHiveMetastore_alter_database_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_database_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_database_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_type_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
ThriftHiveMetastore_get_type_args.prototype = {};
ThriftHiveMetastore_get_type_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_type_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_type_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_type_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_type_result.prototype = {};
ThriftHiveMetastore_get_type_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Type();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_type_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_type_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_create_type_args = function(args) {
  this.type = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
ThriftHiveMetastore_create_type_args.prototype = {};
ThriftHiveMetastore_create_type_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.type = new ttypes.Type();
        this.type.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_create_type_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_type_args');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRUCT, 1);
    this.type.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_create_type_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_create_type_result.prototype = {};
ThriftHiveMetastore_create_type_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.AlreadyExistsException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_create_type_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_type_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_drop_type_args = function(args) {
  this.type = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
ThriftHiveMetastore_drop_type_args.prototype = {};
ThriftHiveMetastore_drop_type_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_type_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_type_args');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_drop_type_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_drop_type_result.prototype = {};
ThriftHiveMetastore_drop_type_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_type_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_type_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_type_all_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
ThriftHiveMetastore_get_type_all_args.prototype = {};
ThriftHiveMetastore_get_type_all_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_type_all_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_type_all_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_type_all_result = function(args) {
  this.success = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_type_all_result.prototype = {};
ThriftHiveMetastore_get_type_all_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size508 = 0;
        var _rtmp3512;
        this.success = {};
        var _ktype509 = 0;
        var _vtype510 = 0;
        _rtmp3512 = input.readMapBegin();
        _ktype509 = _rtmp3512.ktype;
        _vtype510 = _rtmp3512.vtype;
        _size508 = _rtmp3512.size;
        for (var _i513 = 0; _i513 < _size508; ++_i513)
        {
          var key514 = null;
          var val515 = null;
          key514 = input.readString();
          val515 = new ttypes.Type();
          val515.read(input);
          this.success[key514] = val515;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_type_all_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_type_all_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter516 in this.success)
    {
      if (this.success.hasOwnProperty(kiter516))
      {
        var viter517 = this.success[kiter516];
        output.writeString(kiter516);
        viter517.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 1);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_fields_args = function(args) {
  this.db_name = null;
  this.table_name = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.table_name !== undefined) {
      this.table_name = args.table_name;
    }
  }
};
ThriftHiveMetastore_get_fields_args.prototype = {};
ThriftHiveMetastore_get_fields_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_fields_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_fields_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_fields_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.UnknownTableException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.UnknownDBException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_get_fields_result.prototype = {};
ThriftHiveMetastore_get_fields_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size518 = 0;
        var _rtmp3522;
        this.success = [];
        var _etype521 = 0;
        _rtmp3522 = input.readListBegin();
        _etype521 = _rtmp3522.etype;
        _size518 = _rtmp3522.size;
        for (var _i523 = 0; _i523 < _size518; ++_i523)
        {
          var elem524 = null;
          elem524 = new ttypes.FieldSchema();
          elem524.read(input);
          this.success.push(elem524);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.UnknownTableException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.UnknownDBException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_fields_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_fields_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter525 in this.success)
    {
      if (this.success.hasOwnProperty(iter525))
      {
        iter525 = this.success[iter525];
        iter525.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_schema_args = function(args) {
  this.db_name = null;
  this.table_name = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.table_name !== undefined) {
      this.table_name = args.table_name;
    }
  }
};
ThriftHiveMetastore_get_schema_args.prototype = {};
ThriftHiveMetastore_get_schema_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_schema_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_schema_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_schema_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.UnknownTableException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.UnknownDBException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_get_schema_result.prototype = {};
ThriftHiveMetastore_get_schema_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size526 = 0;
        var _rtmp3530;
        this.success = [];
        var _etype529 = 0;
        _rtmp3530 = input.readListBegin();
        _etype529 = _rtmp3530.etype;
        _size526 = _rtmp3530.size;
        for (var _i531 = 0; _i531 < _size526; ++_i531)
        {
          var elem532 = null;
          elem532 = new ttypes.FieldSchema();
          elem532.read(input);
          this.success.push(elem532);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.UnknownTableException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.UnknownDBException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_schema_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_schema_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter533 in this.success)
    {
      if (this.success.hasOwnProperty(iter533))
      {
        iter533 = this.success[iter533];
        iter533.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_create_table_args = function(args) {
  this.tbl = null;
  if (args) {
    if (args.tbl !== undefined) {
      this.tbl = args.tbl;
    }
  }
};
ThriftHiveMetastore_create_table_args.prototype = {};
ThriftHiveMetastore_create_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tbl = new ttypes.Table();
        this.tbl.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_create_table_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_table_args');
  if (this.tbl !== null && this.tbl !== undefined) {
    output.writeFieldBegin('tbl', Thrift.Type.STRUCT, 1);
    this.tbl.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_create_table_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  this.o4 = null;
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o4 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
    if (args.o4 !== undefined) {
      this.o4 = args.o4;
    }
  }
};
ThriftHiveMetastore_create_table_result.prototype = {};
ThriftHiveMetastore_create_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.AlreadyExistsException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.o4 = new ttypes.NoSuchObjectException();
        this.o4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_create_table_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_table_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4);
    this.o4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_create_table_with_environment_context_args = function(args) {
  this.tbl = null;
  this.environment_context = null;
  if (args) {
    if (args.tbl !== undefined) {
      this.tbl = args.tbl;
    }
    if (args.environment_context !== undefined) {
      this.environment_context = args.environment_context;
    }
  }
};
ThriftHiveMetastore_create_table_with_environment_context_args.prototype = {};
ThriftHiveMetastore_create_table_with_environment_context_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tbl = new ttypes.Table();
        this.tbl.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.environment_context = new ttypes.EnvironmentContext();
        this.environment_context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_create_table_with_environment_context_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_table_with_environment_context_args');
  if (this.tbl !== null && this.tbl !== undefined) {
    output.writeFieldBegin('tbl', Thrift.Type.STRUCT, 1);
    this.tbl.write(output);
    output.writeFieldEnd();
  }
  if (this.environment_context !== null && this.environment_context !== undefined) {
    output.writeFieldBegin('environment_context', Thrift.Type.STRUCT, 2);
    this.environment_context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_create_table_with_environment_context_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  this.o4 = null;
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o4 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
    if (args.o4 !== undefined) {
      this.o4 = args.o4;
    }
  }
};
ThriftHiveMetastore_create_table_with_environment_context_result.prototype = {};
ThriftHiveMetastore_create_table_with_environment_context_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.AlreadyExistsException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.o4 = new ttypes.NoSuchObjectException();
        this.o4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_create_table_with_environment_context_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_table_with_environment_context_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4);
    this.o4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_drop_table_args = function(args) {
  this.dbname = null;
  this.name = null;
  this.deleteData = null;
  if (args) {
    if (args.dbname !== undefined) {
      this.dbname = args.dbname;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.deleteData !== undefined) {
      this.deleteData = args.deleteData;
    }
  }
};
ThriftHiveMetastore_drop_table_args.prototype = {};
ThriftHiveMetastore_drop_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_table_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_table_args');
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.deleteData !== null && this.deleteData !== undefined) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 3);
    output.writeBool(this.deleteData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_drop_table_result = function(args) {
  this.o1 = null;
  this.o3 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_drop_table_result.prototype = {};
ThriftHiveMetastore_drop_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_table_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_table_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 2);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_drop_table_with_environment_context_args = function(args) {
  this.dbname = null;
  this.name = null;
  this.deleteData = null;
  this.environment_context = null;
  if (args) {
    if (args.dbname !== undefined) {
      this.dbname = args.dbname;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.deleteData !== undefined) {
      this.deleteData = args.deleteData;
    }
    if (args.environment_context !== undefined) {
      this.environment_context = args.environment_context;
    }
  }
};
ThriftHiveMetastore_drop_table_with_environment_context_args.prototype = {};
ThriftHiveMetastore_drop_table_with_environment_context_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.environment_context = new ttypes.EnvironmentContext();
        this.environment_context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_table_with_environment_context_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_table_with_environment_context_args');
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.deleteData !== null && this.deleteData !== undefined) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 3);
    output.writeBool(this.deleteData);
    output.writeFieldEnd();
  }
  if (this.environment_context !== null && this.environment_context !== undefined) {
    output.writeFieldBegin('environment_context', Thrift.Type.STRUCT, 4);
    this.environment_context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_drop_table_with_environment_context_result = function(args) {
  this.o1 = null;
  this.o3 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_drop_table_with_environment_context_result.prototype = {};
ThriftHiveMetastore_drop_table_with_environment_context_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_table_with_environment_context_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_table_with_environment_context_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 2);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_tables_args = function(args) {
  this.db_name = null;
  this.pattern = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.pattern !== undefined) {
      this.pattern = args.pattern;
    }
  }
};
ThriftHiveMetastore_get_tables_args.prototype = {};
ThriftHiveMetastore_get_tables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.pattern = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_tables_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_tables_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.pattern !== null && this.pattern !== undefined) {
    output.writeFieldBegin('pattern', Thrift.Type.STRING, 2);
    output.writeString(this.pattern);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_tables_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_get_tables_result.prototype = {};
ThriftHiveMetastore_get_tables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size534 = 0;
        var _rtmp3538;
        this.success = [];
        var _etype537 = 0;
        _rtmp3538 = input.readListBegin();
        _etype537 = _rtmp3538.etype;
        _size534 = _rtmp3538.size;
        for (var _i539 = 0; _i539 < _size534; ++_i539)
        {
          var elem540 = null;
          elem540 = input.readString();
          this.success.push(elem540);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_tables_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_tables_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter541 in this.success)
    {
      if (this.success.hasOwnProperty(iter541))
      {
        iter541 = this.success[iter541];
        output.writeString(iter541);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_all_tables_args = function(args) {
  this.db_name = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
  }
};
ThriftHiveMetastore_get_all_tables_args.prototype = {};
ThriftHiveMetastore_get_all_tables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_all_tables_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_all_tables_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_all_tables_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_get_all_tables_result.prototype = {};
ThriftHiveMetastore_get_all_tables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size542 = 0;
        var _rtmp3546;
        this.success = [];
        var _etype545 = 0;
        _rtmp3546 = input.readListBegin();
        _etype545 = _rtmp3546.etype;
        _size542 = _rtmp3546.size;
        for (var _i547 = 0; _i547 < _size542; ++_i547)
        {
          var elem548 = null;
          elem548 = input.readString();
          this.success.push(elem548);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_all_tables_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_all_tables_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter549 in this.success)
    {
      if (this.success.hasOwnProperty(iter549))
      {
        iter549 = this.success[iter549];
        output.writeString(iter549);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_table_args = function(args) {
  this.dbname = null;
  this.tbl_name = null;
  if (args) {
    if (args.dbname !== undefined) {
      this.dbname = args.dbname;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
  }
};
ThriftHiveMetastore_get_table_args.prototype = {};
ThriftHiveMetastore_get_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_table_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_args');
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_table_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_table_result.prototype = {};
ThriftHiveMetastore_get_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Table();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_table_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_table_objects_by_name_args = function(args) {
  this.dbname = null;
  this.tbl_names = null;
  if (args) {
    if (args.dbname !== undefined) {
      this.dbname = args.dbname;
    }
    if (args.tbl_names !== undefined) {
      this.tbl_names = args.tbl_names;
    }
  }
};
ThriftHiveMetastore_get_table_objects_by_name_args.prototype = {};
ThriftHiveMetastore_get_table_objects_by_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size550 = 0;
        var _rtmp3554;
        this.tbl_names = [];
        var _etype553 = 0;
        _rtmp3554 = input.readListBegin();
        _etype553 = _rtmp3554.etype;
        _size550 = _rtmp3554.size;
        for (var _i555 = 0; _i555 < _size550; ++_i555)
        {
          var elem556 = null;
          elem556 = input.readString();
          this.tbl_names.push(elem556);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_table_objects_by_name_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_objects_by_name_args');
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.tbl_names !== null && this.tbl_names !== undefined) {
    output.writeFieldBegin('tbl_names', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.tbl_names.length);
    for (var iter557 in this.tbl_names)
    {
      if (this.tbl_names.hasOwnProperty(iter557))
      {
        iter557 = this.tbl_names[iter557];
        output.writeString(iter557);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_table_objects_by_name_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidOperationException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.UnknownDBException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_get_table_objects_by_name_result.prototype = {};
ThriftHiveMetastore_get_table_objects_by_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size558 = 0;
        var _rtmp3562;
        this.success = [];
        var _etype561 = 0;
        _rtmp3562 = input.readListBegin();
        _etype561 = _rtmp3562.etype;
        _size558 = _rtmp3562.size;
        for (var _i563 = 0; _i563 < _size558; ++_i563)
        {
          var elem564 = null;
          elem564 = new ttypes.Table();
          elem564.read(input);
          this.success.push(elem564);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidOperationException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.UnknownDBException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_table_objects_by_name_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_objects_by_name_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter565 in this.success)
    {
      if (this.success.hasOwnProperty(iter565))
      {
        iter565 = this.success[iter565];
        iter565.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_table_names_by_filter_args = function(args) {
  this.dbname = null;
  this.filter = null;
  this.max_tables = -1;
  if (args) {
    if (args.dbname !== undefined) {
      this.dbname = args.dbname;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
    if (args.max_tables !== undefined) {
      this.max_tables = args.max_tables;
    }
  }
};
ThriftHiveMetastore_get_table_names_by_filter_args.prototype = {};
ThriftHiveMetastore_get_table_names_by_filter_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.filter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.max_tables = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_table_names_by_filter_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_names_by_filter_args');
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRING, 2);
    output.writeString(this.filter);
    output.writeFieldEnd();
  }
  if (this.max_tables !== null && this.max_tables !== undefined) {
    output.writeFieldBegin('max_tables', Thrift.Type.I16, 3);
    output.writeI16(this.max_tables);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_table_names_by_filter_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidOperationException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.UnknownDBException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_get_table_names_by_filter_result.prototype = {};
ThriftHiveMetastore_get_table_names_by_filter_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size566 = 0;
        var _rtmp3570;
        this.success = [];
        var _etype569 = 0;
        _rtmp3570 = input.readListBegin();
        _etype569 = _rtmp3570.etype;
        _size566 = _rtmp3570.size;
        for (var _i571 = 0; _i571 < _size566; ++_i571)
        {
          var elem572 = null;
          elem572 = input.readString();
          this.success.push(elem572);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidOperationException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.UnknownDBException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_table_names_by_filter_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_names_by_filter_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter573 in this.success)
    {
      if (this.success.hasOwnProperty(iter573))
      {
        iter573 = this.success[iter573];
        output.writeString(iter573);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_alter_table_args = function(args) {
  this.dbname = null;
  this.tbl_name = null;
  this.new_tbl = null;
  if (args) {
    if (args.dbname !== undefined) {
      this.dbname = args.dbname;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.new_tbl !== undefined) {
      this.new_tbl = args.new_tbl;
    }
  }
};
ThriftHiveMetastore_alter_table_args.prototype = {};
ThriftHiveMetastore_alter_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.new_tbl = new ttypes.Table();
        this.new_tbl.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_table_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_table_args');
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.new_tbl !== null && this.new_tbl !== undefined) {
    output.writeFieldBegin('new_tbl', Thrift.Type.STRUCT, 3);
    this.new_tbl.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_alter_table_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.InvalidOperationException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_alter_table_result.prototype = {};
ThriftHiveMetastore_alter_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidOperationException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_table_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_table_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_alter_table_with_environment_context_args = function(args) {
  this.dbname = null;
  this.tbl_name = null;
  this.new_tbl = null;
  this.environment_context = null;
  if (args) {
    if (args.dbname !== undefined) {
      this.dbname = args.dbname;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.new_tbl !== undefined) {
      this.new_tbl = args.new_tbl;
    }
    if (args.environment_context !== undefined) {
      this.environment_context = args.environment_context;
    }
  }
};
ThriftHiveMetastore_alter_table_with_environment_context_args.prototype = {};
ThriftHiveMetastore_alter_table_with_environment_context_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.new_tbl = new ttypes.Table();
        this.new_tbl.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.environment_context = new ttypes.EnvironmentContext();
        this.environment_context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_table_with_environment_context_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_table_with_environment_context_args');
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.new_tbl !== null && this.new_tbl !== undefined) {
    output.writeFieldBegin('new_tbl', Thrift.Type.STRUCT, 3);
    this.new_tbl.write(output);
    output.writeFieldEnd();
  }
  if (this.environment_context !== null && this.environment_context !== undefined) {
    output.writeFieldBegin('environment_context', Thrift.Type.STRUCT, 4);
    this.environment_context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_alter_table_with_environment_context_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.InvalidOperationException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_alter_table_with_environment_context_result.prototype = {};
ThriftHiveMetastore_alter_table_with_environment_context_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidOperationException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_table_with_environment_context_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_table_with_environment_context_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_add_partition_args = function(args) {
  this.new_part = null;
  if (args) {
    if (args.new_part !== undefined) {
      this.new_part = args.new_part;
    }
  }
};
ThriftHiveMetastore_add_partition_args.prototype = {};
ThriftHiveMetastore_add_partition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.new_part = new ttypes.Partition();
        this.new_part.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_add_partition_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_partition_args');
  if (this.new_part !== null && this.new_part !== undefined) {
    output.writeFieldBegin('new_part', Thrift.Type.STRUCT, 1);
    this.new_part.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_add_partition_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.InvalidObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_add_partition_result.prototype = {};
ThriftHiveMetastore_add_partition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.AlreadyExistsException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_add_partition_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_partition_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_add_partition_with_environment_context_args = function(args) {
  this.new_part = null;
  this.environment_context = null;
  if (args) {
    if (args.new_part !== undefined) {
      this.new_part = args.new_part;
    }
    if (args.environment_context !== undefined) {
      this.environment_context = args.environment_context;
    }
  }
};
ThriftHiveMetastore_add_partition_with_environment_context_args.prototype = {};
ThriftHiveMetastore_add_partition_with_environment_context_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.new_part = new ttypes.Partition();
        this.new_part.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.environment_context = new ttypes.EnvironmentContext();
        this.environment_context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_add_partition_with_environment_context_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_partition_with_environment_context_args');
  if (this.new_part !== null && this.new_part !== undefined) {
    output.writeFieldBegin('new_part', Thrift.Type.STRUCT, 1);
    this.new_part.write(output);
    output.writeFieldEnd();
  }
  if (this.environment_context !== null && this.environment_context !== undefined) {
    output.writeFieldBegin('environment_context', Thrift.Type.STRUCT, 2);
    this.environment_context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_add_partition_with_environment_context_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.InvalidObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_add_partition_with_environment_context_result.prototype = {};
ThriftHiveMetastore_add_partition_with_environment_context_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.AlreadyExistsException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_add_partition_with_environment_context_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_partition_with_environment_context_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_add_partitions_args = function(args) {
  this.new_parts = null;
  if (args) {
    if (args.new_parts !== undefined) {
      this.new_parts = args.new_parts;
    }
  }
};
ThriftHiveMetastore_add_partitions_args.prototype = {};
ThriftHiveMetastore_add_partitions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size574 = 0;
        var _rtmp3578;
        this.new_parts = [];
        var _etype577 = 0;
        _rtmp3578 = input.readListBegin();
        _etype577 = _rtmp3578.etype;
        _size574 = _rtmp3578.size;
        for (var _i579 = 0; _i579 < _size574; ++_i579)
        {
          var elem580 = null;
          elem580 = new ttypes.Partition();
          elem580.read(input);
          this.new_parts.push(elem580);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_add_partitions_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_partitions_args');
  if (this.new_parts !== null && this.new_parts !== undefined) {
    output.writeFieldBegin('new_parts', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.new_parts.length);
    for (var iter581 in this.new_parts)
    {
      if (this.new_parts.hasOwnProperty(iter581))
      {
        iter581 = this.new_parts[iter581];
        iter581.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_add_partitions_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.InvalidObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_add_partitions_result.prototype = {};
ThriftHiveMetastore_add_partitions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.AlreadyExistsException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_add_partitions_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_partitions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_add_partitions_pspec_args = function(args) {
  this.new_parts = null;
  if (args) {
    if (args.new_parts !== undefined) {
      this.new_parts = args.new_parts;
    }
  }
};
ThriftHiveMetastore_add_partitions_pspec_args.prototype = {};
ThriftHiveMetastore_add_partitions_pspec_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size582 = 0;
        var _rtmp3586;
        this.new_parts = [];
        var _etype585 = 0;
        _rtmp3586 = input.readListBegin();
        _etype585 = _rtmp3586.etype;
        _size582 = _rtmp3586.size;
        for (var _i587 = 0; _i587 < _size582; ++_i587)
        {
          var elem588 = null;
          elem588 = new ttypes.PartitionSpec();
          elem588.read(input);
          this.new_parts.push(elem588);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_add_partitions_pspec_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_partitions_pspec_args');
  if (this.new_parts !== null && this.new_parts !== undefined) {
    output.writeFieldBegin('new_parts', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.new_parts.length);
    for (var iter589 in this.new_parts)
    {
      if (this.new_parts.hasOwnProperty(iter589))
      {
        iter589 = this.new_parts[iter589];
        iter589.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_add_partitions_pspec_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.InvalidObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_add_partitions_pspec_result.prototype = {};
ThriftHiveMetastore_add_partitions_pspec_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.AlreadyExistsException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_add_partitions_pspec_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_partitions_pspec_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_append_partition_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_vals = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_vals !== undefined) {
      this.part_vals = args.part_vals;
    }
  }
};
ThriftHiveMetastore_append_partition_args.prototype = {};
ThriftHiveMetastore_append_partition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size590 = 0;
        var _rtmp3594;
        this.part_vals = [];
        var _etype593 = 0;
        _rtmp3594 = input.readListBegin();
        _etype593 = _rtmp3594.etype;
        _size590 = _rtmp3594.size;
        for (var _i595 = 0; _i595 < _size590; ++_i595)
        {
          var elem596 = null;
          elem596 = input.readString();
          this.part_vals.push(elem596);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_append_partition_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_append_partition_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length);
    for (var iter597 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter597))
      {
        iter597 = this.part_vals[iter597];
        output.writeString(iter597);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_append_partition_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.InvalidObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_append_partition_result.prototype = {};
ThriftHiveMetastore_append_partition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.AlreadyExistsException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_append_partition_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_append_partition_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_add_partitions_req_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
ThriftHiveMetastore_add_partitions_req_args.prototype = {};
ThriftHiveMetastore_add_partitions_req_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.AddPartitionsRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_add_partitions_req_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_partitions_req_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_add_partitions_req_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.InvalidObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_add_partitions_req_result.prototype = {};
ThriftHiveMetastore_add_partitions_req_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AddPartitionsResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.AlreadyExistsException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_add_partitions_req_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_partitions_req_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_append_partition_with_environment_context_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_vals = null;
  this.environment_context = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_vals !== undefined) {
      this.part_vals = args.part_vals;
    }
    if (args.environment_context !== undefined) {
      this.environment_context = args.environment_context;
    }
  }
};
ThriftHiveMetastore_append_partition_with_environment_context_args.prototype = {};
ThriftHiveMetastore_append_partition_with_environment_context_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size598 = 0;
        var _rtmp3602;
        this.part_vals = [];
        var _etype601 = 0;
        _rtmp3602 = input.readListBegin();
        _etype601 = _rtmp3602.etype;
        _size598 = _rtmp3602.size;
        for (var _i603 = 0; _i603 < _size598; ++_i603)
        {
          var elem604 = null;
          elem604 = input.readString();
          this.part_vals.push(elem604);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.environment_context = new ttypes.EnvironmentContext();
        this.environment_context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_append_partition_with_environment_context_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_append_partition_with_environment_context_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length);
    for (var iter605 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter605))
      {
        iter605 = this.part_vals[iter605];
        output.writeString(iter605);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.environment_context !== null && this.environment_context !== undefined) {
    output.writeFieldBegin('environment_context', Thrift.Type.STRUCT, 4);
    this.environment_context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_append_partition_with_environment_context_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.InvalidObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_append_partition_with_environment_context_result.prototype = {};
ThriftHiveMetastore_append_partition_with_environment_context_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.AlreadyExistsException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_append_partition_with_environment_context_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_append_partition_with_environment_context_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_append_partition_by_name_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_name = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_name !== undefined) {
      this.part_name = args.part_name;
    }
  }
};
ThriftHiveMetastore_append_partition_by_name_args.prototype = {};
ThriftHiveMetastore_append_partition_by_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_append_partition_by_name_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_append_partition_by_name_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_name !== null && this.part_name !== undefined) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 3);
    output.writeString(this.part_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_append_partition_by_name_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.InvalidObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_append_partition_by_name_result.prototype = {};
ThriftHiveMetastore_append_partition_by_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.AlreadyExistsException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_append_partition_by_name_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_append_partition_by_name_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_append_partition_by_name_with_environment_context_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_name = null;
  this.environment_context = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_name !== undefined) {
      this.part_name = args.part_name;
    }
    if (args.environment_context !== undefined) {
      this.environment_context = args.environment_context;
    }
  }
};
ThriftHiveMetastore_append_partition_by_name_with_environment_context_args.prototype = {};
ThriftHiveMetastore_append_partition_by_name_with_environment_context_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.environment_context = new ttypes.EnvironmentContext();
        this.environment_context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_append_partition_by_name_with_environment_context_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_append_partition_by_name_with_environment_context_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_name !== null && this.part_name !== undefined) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 3);
    output.writeString(this.part_name);
    output.writeFieldEnd();
  }
  if (this.environment_context !== null && this.environment_context !== undefined) {
    output.writeFieldBegin('environment_context', Thrift.Type.STRUCT, 4);
    this.environment_context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_append_partition_by_name_with_environment_context_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.InvalidObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_append_partition_by_name_with_environment_context_result.prototype = {};
ThriftHiveMetastore_append_partition_by_name_with_environment_context_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.AlreadyExistsException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_append_partition_by_name_with_environment_context_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_append_partition_by_name_with_environment_context_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_drop_partition_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_vals = null;
  this.deleteData = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_vals !== undefined) {
      this.part_vals = args.part_vals;
    }
    if (args.deleteData !== undefined) {
      this.deleteData = args.deleteData;
    }
  }
};
ThriftHiveMetastore_drop_partition_args.prototype = {};
ThriftHiveMetastore_drop_partition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size606 = 0;
        var _rtmp3610;
        this.part_vals = [];
        var _etype609 = 0;
        _rtmp3610 = input.readListBegin();
        _etype609 = _rtmp3610.etype;
        _size606 = _rtmp3610.size;
        for (var _i611 = 0; _i611 < _size606; ++_i611)
        {
          var elem612 = null;
          elem612 = input.readString();
          this.part_vals.push(elem612);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_partition_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length);
    for (var iter613 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter613))
      {
        iter613 = this.part_vals[iter613];
        output.writeString(iter613);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.deleteData !== null && this.deleteData !== undefined) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 4);
    output.writeBool(this.deleteData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_drop_partition_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_drop_partition_result.prototype = {};
ThriftHiveMetastore_drop_partition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_partition_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_drop_partition_with_environment_context_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_vals = null;
  this.deleteData = null;
  this.environment_context = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_vals !== undefined) {
      this.part_vals = args.part_vals;
    }
    if (args.deleteData !== undefined) {
      this.deleteData = args.deleteData;
    }
    if (args.environment_context !== undefined) {
      this.environment_context = args.environment_context;
    }
  }
};
ThriftHiveMetastore_drop_partition_with_environment_context_args.prototype = {};
ThriftHiveMetastore_drop_partition_with_environment_context_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size614 = 0;
        var _rtmp3618;
        this.part_vals = [];
        var _etype617 = 0;
        _rtmp3618 = input.readListBegin();
        _etype617 = _rtmp3618.etype;
        _size614 = _rtmp3618.size;
        for (var _i619 = 0; _i619 < _size614; ++_i619)
        {
          var elem620 = null;
          elem620 = input.readString();
          this.part_vals.push(elem620);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.environment_context = new ttypes.EnvironmentContext();
        this.environment_context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_partition_with_environment_context_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_with_environment_context_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length);
    for (var iter621 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter621))
      {
        iter621 = this.part_vals[iter621];
        output.writeString(iter621);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.deleteData !== null && this.deleteData !== undefined) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 4);
    output.writeBool(this.deleteData);
    output.writeFieldEnd();
  }
  if (this.environment_context !== null && this.environment_context !== undefined) {
    output.writeFieldBegin('environment_context', Thrift.Type.STRUCT, 5);
    this.environment_context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_drop_partition_with_environment_context_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_drop_partition_with_environment_context_result.prototype = {};
ThriftHiveMetastore_drop_partition_with_environment_context_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_partition_with_environment_context_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_with_environment_context_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_drop_partition_by_name_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_name = null;
  this.deleteData = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_name !== undefined) {
      this.part_name = args.part_name;
    }
    if (args.deleteData !== undefined) {
      this.deleteData = args.deleteData;
    }
  }
};
ThriftHiveMetastore_drop_partition_by_name_args.prototype = {};
ThriftHiveMetastore_drop_partition_by_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_partition_by_name_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_by_name_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_name !== null && this.part_name !== undefined) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 3);
    output.writeString(this.part_name);
    output.writeFieldEnd();
  }
  if (this.deleteData !== null && this.deleteData !== undefined) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 4);
    output.writeBool(this.deleteData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_drop_partition_by_name_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_drop_partition_by_name_result.prototype = {};
ThriftHiveMetastore_drop_partition_by_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_partition_by_name_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_by_name_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_drop_partition_by_name_with_environment_context_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_name = null;
  this.deleteData = null;
  this.environment_context = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_name !== undefined) {
      this.part_name = args.part_name;
    }
    if (args.deleteData !== undefined) {
      this.deleteData = args.deleteData;
    }
    if (args.environment_context !== undefined) {
      this.environment_context = args.environment_context;
    }
  }
};
ThriftHiveMetastore_drop_partition_by_name_with_environment_context_args.prototype = {};
ThriftHiveMetastore_drop_partition_by_name_with_environment_context_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.environment_context = new ttypes.EnvironmentContext();
        this.environment_context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_partition_by_name_with_environment_context_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_by_name_with_environment_context_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_name !== null && this.part_name !== undefined) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 3);
    output.writeString(this.part_name);
    output.writeFieldEnd();
  }
  if (this.deleteData !== null && this.deleteData !== undefined) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 4);
    output.writeBool(this.deleteData);
    output.writeFieldEnd();
  }
  if (this.environment_context !== null && this.environment_context !== undefined) {
    output.writeFieldBegin('environment_context', Thrift.Type.STRUCT, 5);
    this.environment_context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_drop_partition_by_name_with_environment_context_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_drop_partition_by_name_with_environment_context_result.prototype = {};
ThriftHiveMetastore_drop_partition_by_name_with_environment_context_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_partition_by_name_with_environment_context_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_by_name_with_environment_context_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_drop_partitions_req_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined) {
      this.req = args.req;
    }
  }
};
ThriftHiveMetastore_drop_partitions_req_args.prototype = {};
ThriftHiveMetastore_drop_partitions_req_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new ttypes.DropPartitionsRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_partitions_req_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_partitions_req_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_drop_partitions_req_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_drop_partitions_req_result.prototype = {};
ThriftHiveMetastore_drop_partitions_req_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DropPartitionsResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_partitions_req_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_partitions_req_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_vals = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_vals !== undefined) {
      this.part_vals = args.part_vals;
    }
  }
};
ThriftHiveMetastore_get_partition_args.prototype = {};
ThriftHiveMetastore_get_partition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size622 = 0;
        var _rtmp3626;
        this.part_vals = [];
        var _etype625 = 0;
        _rtmp3626 = input.readListBegin();
        _etype625 = _rtmp3626.etype;
        _size622 = _rtmp3626.size;
        for (var _i627 = 0; _i627 < _size622; ++_i627)
        {
          var elem628 = null;
          elem628 = input.readString();
          this.part_vals.push(elem628);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length);
    for (var iter629 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter629))
      {
        iter629 = this.part_vals[iter629];
        output.writeString(iter629);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partition_result.prototype = {};
ThriftHiveMetastore_get_partition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_exchange_partition_args = function(args) {
  this.partitionSpecs = null;
  this.source_db = null;
  this.source_table_name = null;
  this.dest_db = null;
  this.dest_table_name = null;
  if (args) {
    if (args.partitionSpecs !== undefined) {
      this.partitionSpecs = args.partitionSpecs;
    }
    if (args.source_db !== undefined) {
      this.source_db = args.source_db;
    }
    if (args.source_table_name !== undefined) {
      this.source_table_name = args.source_table_name;
    }
    if (args.dest_db !== undefined) {
      this.dest_db = args.dest_db;
    }
    if (args.dest_table_name !== undefined) {
      this.dest_table_name = args.dest_table_name;
    }
  }
};
ThriftHiveMetastore_exchange_partition_args.prototype = {};
ThriftHiveMetastore_exchange_partition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size630 = 0;
        var _rtmp3634;
        this.partitionSpecs = {};
        var _ktype631 = 0;
        var _vtype632 = 0;
        _rtmp3634 = input.readMapBegin();
        _ktype631 = _rtmp3634.ktype;
        _vtype632 = _rtmp3634.vtype;
        _size630 = _rtmp3634.size;
        for (var _i635 = 0; _i635 < _size630; ++_i635)
        {
          var key636 = null;
          var val637 = null;
          key636 = input.readString();
          val637 = input.readString();
          this.partitionSpecs[key636] = val637;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.source_db = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.source_table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.dest_db = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.dest_table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_exchange_partition_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_exchange_partition_args');
  if (this.partitionSpecs !== null && this.partitionSpecs !== undefined) {
    output.writeFieldBegin('partitionSpecs', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.partitionSpecs));
    for (var kiter638 in this.partitionSpecs)
    {
      if (this.partitionSpecs.hasOwnProperty(kiter638))
      {
        var viter639 = this.partitionSpecs[kiter638];
        output.writeString(kiter638);
        output.writeString(viter639);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.source_db !== null && this.source_db !== undefined) {
    output.writeFieldBegin('source_db', Thrift.Type.STRING, 2);
    output.writeString(this.source_db);
    output.writeFieldEnd();
  }
  if (this.source_table_name !== null && this.source_table_name !== undefined) {
    output.writeFieldBegin('source_table_name', Thrift.Type.STRING, 3);
    output.writeString(this.source_table_name);
    output.writeFieldEnd();
  }
  if (this.dest_db !== null && this.dest_db !== undefined) {
    output.writeFieldBegin('dest_db', Thrift.Type.STRING, 4);
    output.writeString(this.dest_db);
    output.writeFieldEnd();
  }
  if (this.dest_table_name !== null && this.dest_table_name !== undefined) {
    output.writeFieldBegin('dest_table_name', Thrift.Type.STRING, 5);
    output.writeString(this.dest_table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_exchange_partition_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  this.o4 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o3 = args;
    return;
  }
  if (args instanceof ttypes.InvalidInputException) {
    this.o4 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
    if (args.o4 !== undefined) {
      this.o4 = args.o4;
    }
  }
};
ThriftHiveMetastore_exchange_partition_result.prototype = {};
ThriftHiveMetastore_exchange_partition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.InvalidObjectException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.o4 = new ttypes.InvalidInputException();
        this.o4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_exchange_partition_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_exchange_partition_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4);
    this.o4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_with_auth_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_vals = null;
  this.user_name = null;
  this.group_names = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_vals !== undefined) {
      this.part_vals = args.part_vals;
    }
    if (args.user_name !== undefined) {
      this.user_name = args.user_name;
    }
    if (args.group_names !== undefined) {
      this.group_names = args.group_names;
    }
  }
};
ThriftHiveMetastore_get_partition_with_auth_args.prototype = {};
ThriftHiveMetastore_get_partition_with_auth_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size640 = 0;
        var _rtmp3644;
        this.part_vals = [];
        var _etype643 = 0;
        _rtmp3644 = input.readListBegin();
        _etype643 = _rtmp3644.etype;
        _size640 = _rtmp3644.size;
        for (var _i645 = 0; _i645 < _size640; ++_i645)
        {
          var elem646 = null;
          elem646 = input.readString();
          this.part_vals.push(elem646);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.user_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size647 = 0;
        var _rtmp3651;
        this.group_names = [];
        var _etype650 = 0;
        _rtmp3651 = input.readListBegin();
        _etype650 = _rtmp3651.etype;
        _size647 = _rtmp3651.size;
        for (var _i652 = 0; _i652 < _size647; ++_i652)
        {
          var elem653 = null;
          elem653 = input.readString();
          this.group_names.push(elem653);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_with_auth_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_with_auth_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length);
    for (var iter654 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter654))
      {
        iter654 = this.part_vals[iter654];
        output.writeString(iter654);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.user_name !== null && this.user_name !== undefined) {
    output.writeFieldBegin('user_name', Thrift.Type.STRING, 4);
    output.writeString(this.user_name);
    output.writeFieldEnd();
  }
  if (this.group_names !== null && this.group_names !== undefined) {
    output.writeFieldBegin('group_names', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.group_names.length);
    for (var iter655 in this.group_names)
    {
      if (this.group_names.hasOwnProperty(iter655))
      {
        iter655 = this.group_names[iter655];
        output.writeString(iter655);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_with_auth_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partition_with_auth_result.prototype = {};
ThriftHiveMetastore_get_partition_with_auth_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_with_auth_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_with_auth_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_by_name_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_name = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_name !== undefined) {
      this.part_name = args.part_name;
    }
  }
};
ThriftHiveMetastore_get_partition_by_name_args.prototype = {};
ThriftHiveMetastore_get_partition_by_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_by_name_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_by_name_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_name !== null && this.part_name !== undefined) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 3);
    output.writeString(this.part_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_by_name_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partition_by_name_result.prototype = {};
ThriftHiveMetastore_get_partition_by_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_by_name_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_by_name_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.max_parts = -1;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.max_parts !== undefined) {
      this.max_parts = args.max_parts;
    }
  }
};
ThriftHiveMetastore_get_partitions_args.prototype = {};
ThriftHiveMetastore_get_partitions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.max_parts !== null && this.max_parts !== undefined) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 3);
    output.writeI16(this.max_parts);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partitions_result.prototype = {};
ThriftHiveMetastore_get_partitions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size656 = 0;
        var _rtmp3660;
        this.success = [];
        var _etype659 = 0;
        _rtmp3660 = input.readListBegin();
        _etype659 = _rtmp3660.etype;
        _size656 = _rtmp3660.size;
        for (var _i661 = 0; _i661 < _size656; ++_i661)
        {
          var elem662 = null;
          elem662 = new ttypes.Partition();
          elem662.read(input);
          this.success.push(elem662);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter663 in this.success)
    {
      if (this.success.hasOwnProperty(iter663))
      {
        iter663 = this.success[iter663];
        iter663.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_with_auth_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.max_parts = -1;
  this.user_name = null;
  this.group_names = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.max_parts !== undefined) {
      this.max_parts = args.max_parts;
    }
    if (args.user_name !== undefined) {
      this.user_name = args.user_name;
    }
    if (args.group_names !== undefined) {
      this.group_names = args.group_names;
    }
  }
};
ThriftHiveMetastore_get_partitions_with_auth_args.prototype = {};
ThriftHiveMetastore_get_partitions_with_auth_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.user_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size664 = 0;
        var _rtmp3668;
        this.group_names = [];
        var _etype667 = 0;
        _rtmp3668 = input.readListBegin();
        _etype667 = _rtmp3668.etype;
        _size664 = _rtmp3668.size;
        for (var _i669 = 0; _i669 < _size664; ++_i669)
        {
          var elem670 = null;
          elem670 = input.readString();
          this.group_names.push(elem670);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_with_auth_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_with_auth_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.max_parts !== null && this.max_parts !== undefined) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 3);
    output.writeI16(this.max_parts);
    output.writeFieldEnd();
  }
  if (this.user_name !== null && this.user_name !== undefined) {
    output.writeFieldBegin('user_name', Thrift.Type.STRING, 4);
    output.writeString(this.user_name);
    output.writeFieldEnd();
  }
  if (this.group_names !== null && this.group_names !== undefined) {
    output.writeFieldBegin('group_names', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.group_names.length);
    for (var iter671 in this.group_names)
    {
      if (this.group_names.hasOwnProperty(iter671))
      {
        iter671 = this.group_names[iter671];
        output.writeString(iter671);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_with_auth_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partitions_with_auth_result.prototype = {};
ThriftHiveMetastore_get_partitions_with_auth_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size672 = 0;
        var _rtmp3676;
        this.success = [];
        var _etype675 = 0;
        _rtmp3676 = input.readListBegin();
        _etype675 = _rtmp3676.etype;
        _size672 = _rtmp3676.size;
        for (var _i677 = 0; _i677 < _size672; ++_i677)
        {
          var elem678 = null;
          elem678 = new ttypes.Partition();
          elem678.read(input);
          this.success.push(elem678);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_with_auth_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_with_auth_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter679 in this.success)
    {
      if (this.success.hasOwnProperty(iter679))
      {
        iter679 = this.success[iter679];
        iter679.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_pspec_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.max_parts = -1;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.max_parts !== undefined) {
      this.max_parts = args.max_parts;
    }
  }
};
ThriftHiveMetastore_get_partitions_pspec_args.prototype = {};
ThriftHiveMetastore_get_partitions_pspec_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.max_parts = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_pspec_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_pspec_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.max_parts !== null && this.max_parts !== undefined) {
    output.writeFieldBegin('max_parts', Thrift.Type.I32, 3);
    output.writeI32(this.max_parts);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_pspec_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partitions_pspec_result.prototype = {};
ThriftHiveMetastore_get_partitions_pspec_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size680 = 0;
        var _rtmp3684;
        this.success = [];
        var _etype683 = 0;
        _rtmp3684 = input.readListBegin();
        _etype683 = _rtmp3684.etype;
        _size680 = _rtmp3684.size;
        for (var _i685 = 0; _i685 < _size680; ++_i685)
        {
          var elem686 = null;
          elem686 = new ttypes.PartitionSpec();
          elem686.read(input);
          this.success.push(elem686);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_pspec_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_pspec_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter687 in this.success)
    {
      if (this.success.hasOwnProperty(iter687))
      {
        iter687 = this.success[iter687];
        iter687.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_names_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.max_parts = -1;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.max_parts !== undefined) {
      this.max_parts = args.max_parts;
    }
  }
};
ThriftHiveMetastore_get_partition_names_args.prototype = {};
ThriftHiveMetastore_get_partition_names_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_names_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_names_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.max_parts !== null && this.max_parts !== undefined) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 3);
    output.writeI16(this.max_parts);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_names_result = function(args) {
  this.success = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partition_names_result.prototype = {};
ThriftHiveMetastore_get_partition_names_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size688 = 0;
        var _rtmp3692;
        this.success = [];
        var _etype691 = 0;
        _rtmp3692 = input.readListBegin();
        _etype691 = _rtmp3692.etype;
        _size688 = _rtmp3692.size;
        for (var _i693 = 0; _i693 < _size688; ++_i693)
        {
          var elem694 = null;
          elem694 = input.readString();
          this.success.push(elem694);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_names_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_names_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter695 in this.success)
    {
      if (this.success.hasOwnProperty(iter695))
      {
        iter695 = this.success[iter695];
        output.writeString(iter695);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 1);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_ps_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_vals = null;
  this.max_parts = -1;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_vals !== undefined) {
      this.part_vals = args.part_vals;
    }
    if (args.max_parts !== undefined) {
      this.max_parts = args.max_parts;
    }
  }
};
ThriftHiveMetastore_get_partitions_ps_args.prototype = {};
ThriftHiveMetastore_get_partitions_ps_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size696 = 0;
        var _rtmp3700;
        this.part_vals = [];
        var _etype699 = 0;
        _rtmp3700 = input.readListBegin();
        _etype699 = _rtmp3700.etype;
        _size696 = _rtmp3700.size;
        for (var _i701 = 0; _i701 < _size696; ++_i701)
        {
          var elem702 = null;
          elem702 = input.readString();
          this.part_vals.push(elem702);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_ps_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_ps_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length);
    for (var iter703 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter703))
      {
        iter703 = this.part_vals[iter703];
        output.writeString(iter703);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.max_parts !== null && this.max_parts !== undefined) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 4);
    output.writeI16(this.max_parts);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_ps_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partitions_ps_result.prototype = {};
ThriftHiveMetastore_get_partitions_ps_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size704 = 0;
        var _rtmp3708;
        this.success = [];
        var _etype707 = 0;
        _rtmp3708 = input.readListBegin();
        _etype707 = _rtmp3708.etype;
        _size704 = _rtmp3708.size;
        for (var _i709 = 0; _i709 < _size704; ++_i709)
        {
          var elem710 = null;
          elem710 = new ttypes.Partition();
          elem710.read(input);
          this.success.push(elem710);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_ps_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_ps_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter711 in this.success)
    {
      if (this.success.hasOwnProperty(iter711))
      {
        iter711 = this.success[iter711];
        iter711.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_ps_with_auth_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_vals = null;
  this.max_parts = -1;
  this.user_name = null;
  this.group_names = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_vals !== undefined) {
      this.part_vals = args.part_vals;
    }
    if (args.max_parts !== undefined) {
      this.max_parts = args.max_parts;
    }
    if (args.user_name !== undefined) {
      this.user_name = args.user_name;
    }
    if (args.group_names !== undefined) {
      this.group_names = args.group_names;
    }
  }
};
ThriftHiveMetastore_get_partitions_ps_with_auth_args.prototype = {};
ThriftHiveMetastore_get_partitions_ps_with_auth_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size712 = 0;
        var _rtmp3716;
        this.part_vals = [];
        var _etype715 = 0;
        _rtmp3716 = input.readListBegin();
        _etype715 = _rtmp3716.etype;
        _size712 = _rtmp3716.size;
        for (var _i717 = 0; _i717 < _size712; ++_i717)
        {
          var elem718 = null;
          elem718 = input.readString();
          this.part_vals.push(elem718);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.user_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size719 = 0;
        var _rtmp3723;
        this.group_names = [];
        var _etype722 = 0;
        _rtmp3723 = input.readListBegin();
        _etype722 = _rtmp3723.etype;
        _size719 = _rtmp3723.size;
        for (var _i724 = 0; _i724 < _size719; ++_i724)
        {
          var elem725 = null;
          elem725 = input.readString();
          this.group_names.push(elem725);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_ps_with_auth_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_ps_with_auth_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length);
    for (var iter726 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter726))
      {
        iter726 = this.part_vals[iter726];
        output.writeString(iter726);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.max_parts !== null && this.max_parts !== undefined) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 4);
    output.writeI16(this.max_parts);
    output.writeFieldEnd();
  }
  if (this.user_name !== null && this.user_name !== undefined) {
    output.writeFieldBegin('user_name', Thrift.Type.STRING, 5);
    output.writeString(this.user_name);
    output.writeFieldEnd();
  }
  if (this.group_names !== null && this.group_names !== undefined) {
    output.writeFieldBegin('group_names', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.group_names.length);
    for (var iter727 in this.group_names)
    {
      if (this.group_names.hasOwnProperty(iter727))
      {
        iter727 = this.group_names[iter727];
        output.writeString(iter727);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_ps_with_auth_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partitions_ps_with_auth_result.prototype = {};
ThriftHiveMetastore_get_partitions_ps_with_auth_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size728 = 0;
        var _rtmp3732;
        this.success = [];
        var _etype731 = 0;
        _rtmp3732 = input.readListBegin();
        _etype731 = _rtmp3732.etype;
        _size728 = _rtmp3732.size;
        for (var _i733 = 0; _i733 < _size728; ++_i733)
        {
          var elem734 = null;
          elem734 = new ttypes.Partition();
          elem734.read(input);
          this.success.push(elem734);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_ps_with_auth_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_ps_with_auth_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter735 in this.success)
    {
      if (this.success.hasOwnProperty(iter735))
      {
        iter735 = this.success[iter735];
        iter735.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_names_ps_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_vals = null;
  this.max_parts = -1;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_vals !== undefined) {
      this.part_vals = args.part_vals;
    }
    if (args.max_parts !== undefined) {
      this.max_parts = args.max_parts;
    }
  }
};
ThriftHiveMetastore_get_partition_names_ps_args.prototype = {};
ThriftHiveMetastore_get_partition_names_ps_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size736 = 0;
        var _rtmp3740;
        this.part_vals = [];
        var _etype739 = 0;
        _rtmp3740 = input.readListBegin();
        _etype739 = _rtmp3740.etype;
        _size736 = _rtmp3740.size;
        for (var _i741 = 0; _i741 < _size736; ++_i741)
        {
          var elem742 = null;
          elem742 = input.readString();
          this.part_vals.push(elem742);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_names_ps_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_names_ps_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length);
    for (var iter743 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter743))
      {
        iter743 = this.part_vals[iter743];
        output.writeString(iter743);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.max_parts !== null && this.max_parts !== undefined) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 4);
    output.writeI16(this.max_parts);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_names_ps_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partition_names_ps_result.prototype = {};
ThriftHiveMetastore_get_partition_names_ps_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size744 = 0;
        var _rtmp3748;
        this.success = [];
        var _etype747 = 0;
        _rtmp3748 = input.readListBegin();
        _etype747 = _rtmp3748.etype;
        _size744 = _rtmp3748.size;
        for (var _i749 = 0; _i749 < _size744; ++_i749)
        {
          var elem750 = null;
          elem750 = input.readString();
          this.success.push(elem750);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_names_ps_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_names_ps_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter751 in this.success)
    {
      if (this.success.hasOwnProperty(iter751))
      {
        iter751 = this.success[iter751];
        output.writeString(iter751);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_by_filter_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.filter = null;
  this.max_parts = -1;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
    if (args.max_parts !== undefined) {
      this.max_parts = args.max_parts;
    }
  }
};
ThriftHiveMetastore_get_partitions_by_filter_args.prototype = {};
ThriftHiveMetastore_get_partitions_by_filter_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.filter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_by_filter_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_by_filter_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRING, 3);
    output.writeString(this.filter);
    output.writeFieldEnd();
  }
  if (this.max_parts !== null && this.max_parts !== undefined) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 4);
    output.writeI16(this.max_parts);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_by_filter_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partitions_by_filter_result.prototype = {};
ThriftHiveMetastore_get_partitions_by_filter_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size752 = 0;
        var _rtmp3756;
        this.success = [];
        var _etype755 = 0;
        _rtmp3756 = input.readListBegin();
        _etype755 = _rtmp3756.etype;
        _size752 = _rtmp3756.size;
        for (var _i757 = 0; _i757 < _size752; ++_i757)
        {
          var elem758 = null;
          elem758 = new ttypes.Partition();
          elem758.read(input);
          this.success.push(elem758);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_by_filter_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_by_filter_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter759 in this.success)
    {
      if (this.success.hasOwnProperty(iter759))
      {
        iter759 = this.success[iter759];
        iter759.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_part_specs_by_filter_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.filter = null;
  this.max_parts = -1;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
    if (args.max_parts !== undefined) {
      this.max_parts = args.max_parts;
    }
  }
};
ThriftHiveMetastore_get_part_specs_by_filter_args.prototype = {};
ThriftHiveMetastore_get_part_specs_by_filter_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.filter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.max_parts = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_part_specs_by_filter_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_part_specs_by_filter_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRING, 3);
    output.writeString(this.filter);
    output.writeFieldEnd();
  }
  if (this.max_parts !== null && this.max_parts !== undefined) {
    output.writeFieldBegin('max_parts', Thrift.Type.I32, 4);
    output.writeI32(this.max_parts);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_part_specs_by_filter_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_part_specs_by_filter_result.prototype = {};
ThriftHiveMetastore_get_part_specs_by_filter_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size760 = 0;
        var _rtmp3764;
        this.success = [];
        var _etype763 = 0;
        _rtmp3764 = input.readListBegin();
        _etype763 = _rtmp3764.etype;
        _size760 = _rtmp3764.size;
        for (var _i765 = 0; _i765 < _size760; ++_i765)
        {
          var elem766 = null;
          elem766 = new ttypes.PartitionSpec();
          elem766.read(input);
          this.success.push(elem766);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_part_specs_by_filter_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_part_specs_by_filter_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter767 in this.success)
    {
      if (this.success.hasOwnProperty(iter767))
      {
        iter767 = this.success[iter767];
        iter767.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_by_expr_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined) {
      this.req = args.req;
    }
  }
};
ThriftHiveMetastore_get_partitions_by_expr_args.prototype = {};
ThriftHiveMetastore_get_partitions_by_expr_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new ttypes.PartitionsByExprRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_by_expr_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_by_expr_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_by_expr_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partitions_by_expr_result.prototype = {};
ThriftHiveMetastore_get_partitions_by_expr_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PartitionsByExprResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_by_expr_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_by_expr_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_by_names_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.names = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.names !== undefined) {
      this.names = args.names;
    }
  }
};
ThriftHiveMetastore_get_partitions_by_names_args.prototype = {};
ThriftHiveMetastore_get_partitions_by_names_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size768 = 0;
        var _rtmp3772;
        this.names = [];
        var _etype771 = 0;
        _rtmp3772 = input.readListBegin();
        _etype771 = _rtmp3772.etype;
        _size768 = _rtmp3772.size;
        for (var _i773 = 0; _i773 < _size768; ++_i773)
        {
          var elem774 = null;
          elem774 = input.readString();
          this.names.push(elem774);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_by_names_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_by_names_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.names !== null && this.names !== undefined) {
    output.writeFieldBegin('names', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.names.length);
    for (var iter775 in this.names)
    {
      if (this.names.hasOwnProperty(iter775))
      {
        iter775 = this.names[iter775];
        output.writeString(iter775);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_by_names_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partitions_by_names_result.prototype = {};
ThriftHiveMetastore_get_partitions_by_names_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size776 = 0;
        var _rtmp3780;
        this.success = [];
        var _etype779 = 0;
        _rtmp3780 = input.readListBegin();
        _etype779 = _rtmp3780.etype;
        _size776 = _rtmp3780.size;
        for (var _i781 = 0; _i781 < _size776; ++_i781)
        {
          var elem782 = null;
          elem782 = new ttypes.Partition();
          elem782.read(input);
          this.success.push(elem782);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_by_names_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_by_names_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter783 in this.success)
    {
      if (this.success.hasOwnProperty(iter783))
      {
        iter783 = this.success[iter783];
        iter783.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_alter_partition_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.new_part = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.new_part !== undefined) {
      this.new_part = args.new_part;
    }
  }
};
ThriftHiveMetastore_alter_partition_args.prototype = {};
ThriftHiveMetastore_alter_partition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.new_part = new ttypes.Partition();
        this.new_part.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_partition_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_partition_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.new_part !== null && this.new_part !== undefined) {
    output.writeFieldBegin('new_part', Thrift.Type.STRUCT, 3);
    this.new_part.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_alter_partition_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.InvalidOperationException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_alter_partition_result.prototype = {};
ThriftHiveMetastore_alter_partition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidOperationException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_partition_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_partition_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_alter_partitions_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.new_parts = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.new_parts !== undefined) {
      this.new_parts = args.new_parts;
    }
  }
};
ThriftHiveMetastore_alter_partitions_args.prototype = {};
ThriftHiveMetastore_alter_partitions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size784 = 0;
        var _rtmp3788;
        this.new_parts = [];
        var _etype787 = 0;
        _rtmp3788 = input.readListBegin();
        _etype787 = _rtmp3788.etype;
        _size784 = _rtmp3788.size;
        for (var _i789 = 0; _i789 < _size784; ++_i789)
        {
          var elem790 = null;
          elem790 = new ttypes.Partition();
          elem790.read(input);
          this.new_parts.push(elem790);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_partitions_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_partitions_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.new_parts !== null && this.new_parts !== undefined) {
    output.writeFieldBegin('new_parts', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.new_parts.length);
    for (var iter791 in this.new_parts)
    {
      if (this.new_parts.hasOwnProperty(iter791))
      {
        iter791 = this.new_parts[iter791];
        iter791.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_alter_partitions_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.InvalidOperationException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_alter_partitions_result.prototype = {};
ThriftHiveMetastore_alter_partitions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidOperationException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_partitions_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_partitions_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_alter_partition_with_environment_context_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.new_part = null;
  this.environment_context = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.new_part !== undefined) {
      this.new_part = args.new_part;
    }
    if (args.environment_context !== undefined) {
      this.environment_context = args.environment_context;
    }
  }
};
ThriftHiveMetastore_alter_partition_with_environment_context_args.prototype = {};
ThriftHiveMetastore_alter_partition_with_environment_context_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.new_part = new ttypes.Partition();
        this.new_part.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.environment_context = new ttypes.EnvironmentContext();
        this.environment_context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_partition_with_environment_context_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_partition_with_environment_context_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.new_part !== null && this.new_part !== undefined) {
    output.writeFieldBegin('new_part', Thrift.Type.STRUCT, 3);
    this.new_part.write(output);
    output.writeFieldEnd();
  }
  if (this.environment_context !== null && this.environment_context !== undefined) {
    output.writeFieldBegin('environment_context', Thrift.Type.STRUCT, 4);
    this.environment_context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_alter_partition_with_environment_context_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.InvalidOperationException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_alter_partition_with_environment_context_result.prototype = {};
ThriftHiveMetastore_alter_partition_with_environment_context_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidOperationException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_partition_with_environment_context_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_partition_with_environment_context_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_rename_partition_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_vals = null;
  this.new_part = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_vals !== undefined) {
      this.part_vals = args.part_vals;
    }
    if (args.new_part !== undefined) {
      this.new_part = args.new_part;
    }
  }
};
ThriftHiveMetastore_rename_partition_args.prototype = {};
ThriftHiveMetastore_rename_partition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size792 = 0;
        var _rtmp3796;
        this.part_vals = [];
        var _etype795 = 0;
        _rtmp3796 = input.readListBegin();
        _etype795 = _rtmp3796.etype;
        _size792 = _rtmp3796.size;
        for (var _i797 = 0; _i797 < _size792; ++_i797)
        {
          var elem798 = null;
          elem798 = input.readString();
          this.part_vals.push(elem798);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.new_part = new ttypes.Partition();
        this.new_part.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_rename_partition_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_rename_partition_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length);
    for (var iter799 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter799))
      {
        iter799 = this.part_vals[iter799];
        output.writeString(iter799);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.new_part !== null && this.new_part !== undefined) {
    output.writeFieldBegin('new_part', Thrift.Type.STRUCT, 4);
    this.new_part.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_rename_partition_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.InvalidOperationException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_rename_partition_result.prototype = {};
ThriftHiveMetastore_rename_partition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidOperationException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_rename_partition_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_rename_partition_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_partition_name_has_valid_characters_args = function(args) {
  this.part_vals = null;
  this.throw_exception = null;
  if (args) {
    if (args.part_vals !== undefined) {
      this.part_vals = args.part_vals;
    }
    if (args.throw_exception !== undefined) {
      this.throw_exception = args.throw_exception;
    }
  }
};
ThriftHiveMetastore_partition_name_has_valid_characters_args.prototype = {};
ThriftHiveMetastore_partition_name_has_valid_characters_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size800 = 0;
        var _rtmp3804;
        this.part_vals = [];
        var _etype803 = 0;
        _rtmp3804 = input.readListBegin();
        _etype803 = _rtmp3804.etype;
        _size800 = _rtmp3804.size;
        for (var _i805 = 0; _i805 < _size800; ++_i805)
        {
          var elem806 = null;
          elem806 = input.readString();
          this.part_vals.push(elem806);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.throw_exception = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_partition_name_has_valid_characters_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_partition_name_has_valid_characters_args');
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length);
    for (var iter807 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter807))
      {
        iter807 = this.part_vals[iter807];
        output.writeString(iter807);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.throw_exception !== null && this.throw_exception !== undefined) {
    output.writeFieldBegin('throw_exception', Thrift.Type.BOOL, 2);
    output.writeBool(this.throw_exception);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_partition_name_has_valid_characters_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_partition_name_has_valid_characters_result.prototype = {};
ThriftHiveMetastore_partition_name_has_valid_characters_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_partition_name_has_valid_characters_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_partition_name_has_valid_characters_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_config_value_args = function(args) {
  this.name = null;
  this.defaultValue = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.defaultValue !== undefined) {
      this.defaultValue = args.defaultValue;
    }
  }
};
ThriftHiveMetastore_get_config_value_args.prototype = {};
ThriftHiveMetastore_get_config_value_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.defaultValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_config_value_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_config_value_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.defaultValue !== null && this.defaultValue !== undefined) {
    output.writeFieldBegin('defaultValue', Thrift.Type.STRING, 2);
    output.writeString(this.defaultValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_config_value_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.ConfigValSecurityException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_get_config_value_result.prototype = {};
ThriftHiveMetastore_get_config_value_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.ConfigValSecurityException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_config_value_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_config_value_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_partition_name_to_vals_args = function(args) {
  this.part_name = null;
  if (args) {
    if (args.part_name !== undefined) {
      this.part_name = args.part_name;
    }
  }
};
ThriftHiveMetastore_partition_name_to_vals_args.prototype = {};
ThriftHiveMetastore_partition_name_to_vals_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_partition_name_to_vals_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_partition_name_to_vals_args');
  if (this.part_name !== null && this.part_name !== undefined) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 1);
    output.writeString(this.part_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_partition_name_to_vals_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_partition_name_to_vals_result.prototype = {};
ThriftHiveMetastore_partition_name_to_vals_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size808 = 0;
        var _rtmp3812;
        this.success = [];
        var _etype811 = 0;
        _rtmp3812 = input.readListBegin();
        _etype811 = _rtmp3812.etype;
        _size808 = _rtmp3812.size;
        for (var _i813 = 0; _i813 < _size808; ++_i813)
        {
          var elem814 = null;
          elem814 = input.readString();
          this.success.push(elem814);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_partition_name_to_vals_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_partition_name_to_vals_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter815 in this.success)
    {
      if (this.success.hasOwnProperty(iter815))
      {
        iter815 = this.success[iter815];
        output.writeString(iter815);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_partition_name_to_spec_args = function(args) {
  this.part_name = null;
  if (args) {
    if (args.part_name !== undefined) {
      this.part_name = args.part_name;
    }
  }
};
ThriftHiveMetastore_partition_name_to_spec_args.prototype = {};
ThriftHiveMetastore_partition_name_to_spec_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_partition_name_to_spec_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_partition_name_to_spec_args');
  if (this.part_name !== null && this.part_name !== undefined) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 1);
    output.writeString(this.part_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_partition_name_to_spec_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_partition_name_to_spec_result.prototype = {};
ThriftHiveMetastore_partition_name_to_spec_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size816 = 0;
        var _rtmp3820;
        this.success = {};
        var _ktype817 = 0;
        var _vtype818 = 0;
        _rtmp3820 = input.readMapBegin();
        _ktype817 = _rtmp3820.ktype;
        _vtype818 = _rtmp3820.vtype;
        _size816 = _rtmp3820.size;
        for (var _i821 = 0; _i821 < _size816; ++_i821)
        {
          var key822 = null;
          var val823 = null;
          key822 = input.readString();
          val823 = input.readString();
          this.success[key822] = val823;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_partition_name_to_spec_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_partition_name_to_spec_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter824 in this.success)
    {
      if (this.success.hasOwnProperty(kiter824))
      {
        var viter825 = this.success[kiter824];
        output.writeString(kiter824);
        output.writeString(viter825);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_markPartitionForEvent_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_vals = null;
  this.eventType = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_vals !== undefined) {
      this.part_vals = args.part_vals;
    }
    if (args.eventType !== undefined) {
      this.eventType = args.eventType;
    }
  }
};
ThriftHiveMetastore_markPartitionForEvent_args.prototype = {};
ThriftHiveMetastore_markPartitionForEvent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size826 = 0;
        var _rtmp3830;
        this.part_vals = {};
        var _ktype827 = 0;
        var _vtype828 = 0;
        _rtmp3830 = input.readMapBegin();
        _ktype827 = _rtmp3830.ktype;
        _vtype828 = _rtmp3830.vtype;
        _size826 = _rtmp3830.size;
        for (var _i831 = 0; _i831 < _size826; ++_i831)
        {
          var key832 = null;
          var val833 = null;
          key832 = input.readString();
          val833 = input.readString();
          this.part_vals[key832] = val833;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.eventType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_markPartitionForEvent_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_markPartitionForEvent_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.part_vals));
    for (var kiter834 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(kiter834))
      {
        var viter835 = this.part_vals[kiter834];
        output.writeString(kiter834);
        output.writeString(viter835);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.eventType !== null && this.eventType !== undefined) {
    output.writeFieldBegin('eventType', Thrift.Type.I32, 4);
    output.writeI32(this.eventType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_markPartitionForEvent_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  this.o4 = null;
  this.o5 = null;
  this.o6 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.UnknownDBException) {
    this.o3 = args;
    return;
  }
  if (args instanceof ttypes.UnknownTableException) {
    this.o4 = args;
    return;
  }
  if (args instanceof ttypes.UnknownPartitionException) {
    this.o5 = args;
    return;
  }
  if (args instanceof ttypes.InvalidPartitionException) {
    this.o6 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
    if (args.o4 !== undefined) {
      this.o4 = args.o4;
    }
    if (args.o5 !== undefined) {
      this.o5 = args.o5;
    }
    if (args.o6 !== undefined) {
      this.o6 = args.o6;
    }
  }
};
ThriftHiveMetastore_markPartitionForEvent_result.prototype = {};
ThriftHiveMetastore_markPartitionForEvent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.UnknownDBException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.o4 = new ttypes.UnknownTableException();
        this.o4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.o5 = new ttypes.UnknownPartitionException();
        this.o5.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.o6 = new ttypes.InvalidPartitionException();
        this.o6.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_markPartitionForEvent_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_markPartitionForEvent_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4);
    this.o4.write(output);
    output.writeFieldEnd();
  }
  if (this.o5 !== null && this.o5 !== undefined) {
    output.writeFieldBegin('o5', Thrift.Type.STRUCT, 5);
    this.o5.write(output);
    output.writeFieldEnd();
  }
  if (this.o6 !== null && this.o6 !== undefined) {
    output.writeFieldBegin('o6', Thrift.Type.STRUCT, 6);
    this.o6.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_isPartitionMarkedForEvent_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_vals = null;
  this.eventType = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_vals !== undefined) {
      this.part_vals = args.part_vals;
    }
    if (args.eventType !== undefined) {
      this.eventType = args.eventType;
    }
  }
};
ThriftHiveMetastore_isPartitionMarkedForEvent_args.prototype = {};
ThriftHiveMetastore_isPartitionMarkedForEvent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size836 = 0;
        var _rtmp3840;
        this.part_vals = {};
        var _ktype837 = 0;
        var _vtype838 = 0;
        _rtmp3840 = input.readMapBegin();
        _ktype837 = _rtmp3840.ktype;
        _vtype838 = _rtmp3840.vtype;
        _size836 = _rtmp3840.size;
        for (var _i841 = 0; _i841 < _size836; ++_i841)
        {
          var key842 = null;
          var val843 = null;
          key842 = input.readString();
          val843 = input.readString();
          this.part_vals[key842] = val843;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.eventType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_isPartitionMarkedForEvent_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_isPartitionMarkedForEvent_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.part_vals));
    for (var kiter844 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(kiter844))
      {
        var viter845 = this.part_vals[kiter844];
        output.writeString(kiter844);
        output.writeString(viter845);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.eventType !== null && this.eventType !== undefined) {
    output.writeFieldBegin('eventType', Thrift.Type.I32, 4);
    output.writeI32(this.eventType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_isPartitionMarkedForEvent_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  this.o4 = null;
  this.o5 = null;
  this.o6 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.UnknownDBException) {
    this.o3 = args;
    return;
  }
  if (args instanceof ttypes.UnknownTableException) {
    this.o4 = args;
    return;
  }
  if (args instanceof ttypes.UnknownPartitionException) {
    this.o5 = args;
    return;
  }
  if (args instanceof ttypes.InvalidPartitionException) {
    this.o6 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
    if (args.o4 !== undefined) {
      this.o4 = args.o4;
    }
    if (args.o5 !== undefined) {
      this.o5 = args.o5;
    }
    if (args.o6 !== undefined) {
      this.o6 = args.o6;
    }
  }
};
ThriftHiveMetastore_isPartitionMarkedForEvent_result.prototype = {};
ThriftHiveMetastore_isPartitionMarkedForEvent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.UnknownDBException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.o4 = new ttypes.UnknownTableException();
        this.o4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.o5 = new ttypes.UnknownPartitionException();
        this.o5.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.o6 = new ttypes.InvalidPartitionException();
        this.o6.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_isPartitionMarkedForEvent_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_isPartitionMarkedForEvent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4);
    this.o4.write(output);
    output.writeFieldEnd();
  }
  if (this.o5 !== null && this.o5 !== undefined) {
    output.writeFieldBegin('o5', Thrift.Type.STRUCT, 5);
    this.o5.write(output);
    output.writeFieldEnd();
  }
  if (this.o6 !== null && this.o6 !== undefined) {
    output.writeFieldBegin('o6', Thrift.Type.STRUCT, 6);
    this.o6.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_add_index_args = function(args) {
  this.new_index = null;
  this.index_table = null;
  if (args) {
    if (args.new_index !== undefined) {
      this.new_index = args.new_index;
    }
    if (args.index_table !== undefined) {
      this.index_table = args.index_table;
    }
  }
};
ThriftHiveMetastore_add_index_args.prototype = {};
ThriftHiveMetastore_add_index_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.new_index = new ttypes.Index();
        this.new_index.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.index_table = new ttypes.Table();
        this.index_table.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_add_index_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_index_args');
  if (this.new_index !== null && this.new_index !== undefined) {
    output.writeFieldBegin('new_index', Thrift.Type.STRUCT, 1);
    this.new_index.write(output);
    output.writeFieldEnd();
  }
  if (this.index_table !== null && this.index_table !== undefined) {
    output.writeFieldBegin('index_table', Thrift.Type.STRUCT, 2);
    this.index_table.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_add_index_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.InvalidObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_add_index_result.prototype = {};
ThriftHiveMetastore_add_index_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Index();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.AlreadyExistsException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_add_index_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_index_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_alter_index_args = function(args) {
  this.dbname = null;
  this.base_tbl_name = null;
  this.idx_name = null;
  this.new_idx = null;
  if (args) {
    if (args.dbname !== undefined) {
      this.dbname = args.dbname;
    }
    if (args.base_tbl_name !== undefined) {
      this.base_tbl_name = args.base_tbl_name;
    }
    if (args.idx_name !== undefined) {
      this.idx_name = args.idx_name;
    }
    if (args.new_idx !== undefined) {
      this.new_idx = args.new_idx;
    }
  }
};
ThriftHiveMetastore_alter_index_args.prototype = {};
ThriftHiveMetastore_alter_index_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.base_tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.idx_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.new_idx = new ttypes.Index();
        this.new_idx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_index_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_index_args');
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.base_tbl_name !== null && this.base_tbl_name !== undefined) {
    output.writeFieldBegin('base_tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.base_tbl_name);
    output.writeFieldEnd();
  }
  if (this.idx_name !== null && this.idx_name !== undefined) {
    output.writeFieldBegin('idx_name', Thrift.Type.STRING, 3);
    output.writeString(this.idx_name);
    output.writeFieldEnd();
  }
  if (this.new_idx !== null && this.new_idx !== undefined) {
    output.writeFieldBegin('new_idx', Thrift.Type.STRUCT, 4);
    this.new_idx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_alter_index_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.InvalidOperationException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_alter_index_result.prototype = {};
ThriftHiveMetastore_alter_index_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidOperationException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_index_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_index_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_drop_index_by_name_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.index_name = null;
  this.deleteData = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.index_name !== undefined) {
      this.index_name = args.index_name;
    }
    if (args.deleteData !== undefined) {
      this.deleteData = args.deleteData;
    }
  }
};
ThriftHiveMetastore_drop_index_by_name_args.prototype = {};
ThriftHiveMetastore_drop_index_by_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.index_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_index_by_name_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_index_by_name_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.index_name !== null && this.index_name !== undefined) {
    output.writeFieldBegin('index_name', Thrift.Type.STRING, 3);
    output.writeString(this.index_name);
    output.writeFieldEnd();
  }
  if (this.deleteData !== null && this.deleteData !== undefined) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 4);
    output.writeBool(this.deleteData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_drop_index_by_name_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_drop_index_by_name_result.prototype = {};
ThriftHiveMetastore_drop_index_by_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_index_by_name_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_index_by_name_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_index_by_name_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.index_name = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.index_name !== undefined) {
      this.index_name = args.index_name;
    }
  }
};
ThriftHiveMetastore_get_index_by_name_args.prototype = {};
ThriftHiveMetastore_get_index_by_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.index_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_index_by_name_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_index_by_name_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.index_name !== null && this.index_name !== undefined) {
    output.writeFieldBegin('index_name', Thrift.Type.STRING, 3);
    output.writeString(this.index_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_index_by_name_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_index_by_name_result.prototype = {};
ThriftHiveMetastore_get_index_by_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Index();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_index_by_name_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_index_by_name_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_indexes_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.max_indexes = -1;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.max_indexes !== undefined) {
      this.max_indexes = args.max_indexes;
    }
  }
};
ThriftHiveMetastore_get_indexes_args.prototype = {};
ThriftHiveMetastore_get_indexes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.max_indexes = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_indexes_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_indexes_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.max_indexes !== null && this.max_indexes !== undefined) {
    output.writeFieldBegin('max_indexes', Thrift.Type.I16, 3);
    output.writeI16(this.max_indexes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_indexes_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_indexes_result.prototype = {};
ThriftHiveMetastore_get_indexes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size846 = 0;
        var _rtmp3850;
        this.success = [];
        var _etype849 = 0;
        _rtmp3850 = input.readListBegin();
        _etype849 = _rtmp3850.etype;
        _size846 = _rtmp3850.size;
        for (var _i851 = 0; _i851 < _size846; ++_i851)
        {
          var elem852 = null;
          elem852 = new ttypes.Index();
          elem852.read(input);
          this.success.push(elem852);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_indexes_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_indexes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter853 in this.success)
    {
      if (this.success.hasOwnProperty(iter853))
      {
        iter853 = this.success[iter853];
        iter853.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_index_names_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.max_indexes = -1;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.max_indexes !== undefined) {
      this.max_indexes = args.max_indexes;
    }
  }
};
ThriftHiveMetastore_get_index_names_args.prototype = {};
ThriftHiveMetastore_get_index_names_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.max_indexes = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_index_names_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_index_names_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.max_indexes !== null && this.max_indexes !== undefined) {
    output.writeFieldBegin('max_indexes', Thrift.Type.I16, 3);
    output.writeI16(this.max_indexes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_index_names_result = function(args) {
  this.success = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_index_names_result.prototype = {};
ThriftHiveMetastore_get_index_names_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size854 = 0;
        var _rtmp3858;
        this.success = [];
        var _etype857 = 0;
        _rtmp3858 = input.readListBegin();
        _etype857 = _rtmp3858.etype;
        _size854 = _rtmp3858.size;
        for (var _i859 = 0; _i859 < _size854; ++_i859)
        {
          var elem860 = null;
          elem860 = input.readString();
          this.success.push(elem860);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_index_names_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_index_names_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter861 in this.success)
    {
      if (this.success.hasOwnProperty(iter861))
      {
        iter861 = this.success[iter861];
        output.writeString(iter861);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 1);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_update_table_column_statistics_args = function(args) {
  this.stats_obj = null;
  if (args) {
    if (args.stats_obj !== undefined) {
      this.stats_obj = args.stats_obj;
    }
  }
};
ThriftHiveMetastore_update_table_column_statistics_args.prototype = {};
ThriftHiveMetastore_update_table_column_statistics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.stats_obj = new ttypes.ColumnStatistics();
        this.stats_obj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_update_table_column_statistics_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_update_table_column_statistics_args');
  if (this.stats_obj !== null && this.stats_obj !== undefined) {
    output.writeFieldBegin('stats_obj', Thrift.Type.STRUCT, 1);
    this.stats_obj.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_update_table_column_statistics_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  this.o4 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args instanceof ttypes.InvalidInputException) {
    this.o4 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
    if (args.o4 !== undefined) {
      this.o4 = args.o4;
    }
  }
};
ThriftHiveMetastore_update_table_column_statistics_result.prototype = {};
ThriftHiveMetastore_update_table_column_statistics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.o4 = new ttypes.InvalidInputException();
        this.o4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_update_table_column_statistics_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_update_table_column_statistics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4);
    this.o4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_update_partition_column_statistics_args = function(args) {
  this.stats_obj = null;
  if (args) {
    if (args.stats_obj !== undefined) {
      this.stats_obj = args.stats_obj;
    }
  }
};
ThriftHiveMetastore_update_partition_column_statistics_args.prototype = {};
ThriftHiveMetastore_update_partition_column_statistics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.stats_obj = new ttypes.ColumnStatistics();
        this.stats_obj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_update_partition_column_statistics_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_update_partition_column_statistics_args');
  if (this.stats_obj !== null && this.stats_obj !== undefined) {
    output.writeFieldBegin('stats_obj', Thrift.Type.STRUCT, 1);
    this.stats_obj.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_update_partition_column_statistics_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  this.o4 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args instanceof ttypes.InvalidInputException) {
    this.o4 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
    if (args.o4 !== undefined) {
      this.o4 = args.o4;
    }
  }
};
ThriftHiveMetastore_update_partition_column_statistics_result.prototype = {};
ThriftHiveMetastore_update_partition_column_statistics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.o4 = new ttypes.InvalidInputException();
        this.o4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_update_partition_column_statistics_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_update_partition_column_statistics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4);
    this.o4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_table_column_statistics_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.col_name = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.col_name !== undefined) {
      this.col_name = args.col_name;
    }
  }
};
ThriftHiveMetastore_get_table_column_statistics_args.prototype = {};
ThriftHiveMetastore_get_table_column_statistics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.col_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_table_column_statistics_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_column_statistics_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.col_name !== null && this.col_name !== undefined) {
    output.writeFieldBegin('col_name', Thrift.Type.STRING, 3);
    output.writeString(this.col_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_table_column_statistics_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  this.o4 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.InvalidInputException) {
    this.o3 = args;
    return;
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o4 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
    if (args.o4 !== undefined) {
      this.o4 = args.o4;
    }
  }
};
ThriftHiveMetastore_get_table_column_statistics_result.prototype = {};
ThriftHiveMetastore_get_table_column_statistics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ColumnStatistics();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.InvalidInputException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.o4 = new ttypes.InvalidObjectException();
        this.o4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_table_column_statistics_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_column_statistics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4);
    this.o4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_column_statistics_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_name = null;
  this.col_name = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_name !== undefined) {
      this.part_name = args.part_name;
    }
    if (args.col_name !== undefined) {
      this.col_name = args.col_name;
    }
  }
};
ThriftHiveMetastore_get_partition_column_statistics_args.prototype = {};
ThriftHiveMetastore_get_partition_column_statistics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.col_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_column_statistics_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_column_statistics_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_name !== null && this.part_name !== undefined) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 3);
    output.writeString(this.part_name);
    output.writeFieldEnd();
  }
  if (this.col_name !== null && this.col_name !== undefined) {
    output.writeFieldBegin('col_name', Thrift.Type.STRING, 4);
    output.writeString(this.col_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_column_statistics_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  this.o4 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.InvalidInputException) {
    this.o3 = args;
    return;
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o4 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
    if (args.o4 !== undefined) {
      this.o4 = args.o4;
    }
  }
};
ThriftHiveMetastore_get_partition_column_statistics_result.prototype = {};
ThriftHiveMetastore_get_partition_column_statistics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ColumnStatistics();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.InvalidInputException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.o4 = new ttypes.InvalidObjectException();
        this.o4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_column_statistics_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_column_statistics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4);
    this.o4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_table_statistics_req_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
ThriftHiveMetastore_get_table_statistics_req_args.prototype = {};
ThriftHiveMetastore_get_table_statistics_req_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.TableStatsRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_table_statistics_req_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_statistics_req_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_table_statistics_req_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_table_statistics_req_result.prototype = {};
ThriftHiveMetastore_get_table_statistics_req_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TableStatsResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_table_statistics_req_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_statistics_req_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_statistics_req_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
ThriftHiveMetastore_get_partitions_statistics_req_args.prototype = {};
ThriftHiveMetastore_get_partitions_statistics_req_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.PartitionsStatsRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_statistics_req_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_statistics_req_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_statistics_req_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partitions_statistics_req_result.prototype = {};
ThriftHiveMetastore_get_partitions_statistics_req_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PartitionsStatsResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_statistics_req_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_statistics_req_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_aggr_stats_for_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
ThriftHiveMetastore_get_aggr_stats_for_args.prototype = {};
ThriftHiveMetastore_get_aggr_stats_for_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.PartitionsStatsRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_aggr_stats_for_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_aggr_stats_for_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_aggr_stats_for_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_aggr_stats_for_result.prototype = {};
ThriftHiveMetastore_get_aggr_stats_for_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AggrStats();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_aggr_stats_for_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_aggr_stats_for_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_set_aggr_stats_for_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
ThriftHiveMetastore_set_aggr_stats_for_args.prototype = {};
ThriftHiveMetastore_set_aggr_stats_for_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.SetPartitionsStatsRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_set_aggr_stats_for_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_set_aggr_stats_for_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_set_aggr_stats_for_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  this.o4 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args instanceof ttypes.InvalidInputException) {
    this.o4 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
    if (args.o4 !== undefined) {
      this.o4 = args.o4;
    }
  }
};
ThriftHiveMetastore_set_aggr_stats_for_result.prototype = {};
ThriftHiveMetastore_set_aggr_stats_for_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.o4 = new ttypes.InvalidInputException();
        this.o4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_set_aggr_stats_for_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_set_aggr_stats_for_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4);
    this.o4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_delete_partition_column_statistics_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_name = null;
  this.col_name = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_name !== undefined) {
      this.part_name = args.part_name;
    }
    if (args.col_name !== undefined) {
      this.col_name = args.col_name;
    }
  }
};
ThriftHiveMetastore_delete_partition_column_statistics_args.prototype = {};
ThriftHiveMetastore_delete_partition_column_statistics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.col_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_delete_partition_column_statistics_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_delete_partition_column_statistics_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_name !== null && this.part_name !== undefined) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 3);
    output.writeString(this.part_name);
    output.writeFieldEnd();
  }
  if (this.col_name !== null && this.col_name !== undefined) {
    output.writeFieldBegin('col_name', Thrift.Type.STRING, 4);
    output.writeString(this.col_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_delete_partition_column_statistics_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  this.o4 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o3 = args;
    return;
  }
  if (args instanceof ttypes.InvalidInputException) {
    this.o4 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
    if (args.o4 !== undefined) {
      this.o4 = args.o4;
    }
  }
};
ThriftHiveMetastore_delete_partition_column_statistics_result.prototype = {};
ThriftHiveMetastore_delete_partition_column_statistics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.InvalidObjectException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.o4 = new ttypes.InvalidInputException();
        this.o4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_delete_partition_column_statistics_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_delete_partition_column_statistics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4);
    this.o4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_delete_table_column_statistics_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.col_name = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.col_name !== undefined) {
      this.col_name = args.col_name;
    }
  }
};
ThriftHiveMetastore_delete_table_column_statistics_args.prototype = {};
ThriftHiveMetastore_delete_table_column_statistics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.col_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_delete_table_column_statistics_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_delete_table_column_statistics_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.col_name !== null && this.col_name !== undefined) {
    output.writeFieldBegin('col_name', Thrift.Type.STRING, 3);
    output.writeString(this.col_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_delete_table_column_statistics_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  this.o4 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o3 = args;
    return;
  }
  if (args instanceof ttypes.InvalidInputException) {
    this.o4 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
    if (args.o4 !== undefined) {
      this.o4 = args.o4;
    }
  }
};
ThriftHiveMetastore_delete_table_column_statistics_result.prototype = {};
ThriftHiveMetastore_delete_table_column_statistics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.InvalidObjectException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.o4 = new ttypes.InvalidInputException();
        this.o4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_delete_table_column_statistics_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_delete_table_column_statistics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4);
    this.o4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_create_function_args = function(args) {
  this.func = null;
  if (args) {
    if (args.func !== undefined) {
      this.func = args.func;
    }
  }
};
ThriftHiveMetastore_create_function_args.prototype = {};
ThriftHiveMetastore_create_function_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.func = new ttypes.Function();
        this.func.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_create_function_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_function_args');
  if (this.func !== null && this.func !== undefined) {
    output.writeFieldBegin('func', Thrift.Type.STRUCT, 1);
    this.func.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_create_function_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  this.o4 = null;
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o4 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
    if (args.o4 !== undefined) {
      this.o4 = args.o4;
    }
  }
};
ThriftHiveMetastore_create_function_result.prototype = {};
ThriftHiveMetastore_create_function_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.AlreadyExistsException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.o4 = new ttypes.NoSuchObjectException();
        this.o4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_create_function_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_function_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4);
    this.o4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_drop_function_args = function(args) {
  this.dbName = null;
  this.funcName = null;
  if (args) {
    if (args.dbName !== undefined) {
      this.dbName = args.dbName;
    }
    if (args.funcName !== undefined) {
      this.funcName = args.funcName;
    }
  }
};
ThriftHiveMetastore_drop_function_args.prototype = {};
ThriftHiveMetastore_drop_function_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.funcName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_function_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_function_args');
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 1);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.funcName !== null && this.funcName !== undefined) {
    output.writeFieldBegin('funcName', Thrift.Type.STRING, 2);
    output.writeString(this.funcName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_drop_function_result = function(args) {
  this.o1 = null;
  this.o3 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_drop_function_result.prototype = {};
ThriftHiveMetastore_drop_function_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_function_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_function_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 2);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_alter_function_args = function(args) {
  this.dbName = null;
  this.funcName = null;
  this.newFunc = null;
  if (args) {
    if (args.dbName !== undefined) {
      this.dbName = args.dbName;
    }
    if (args.funcName !== undefined) {
      this.funcName = args.funcName;
    }
    if (args.newFunc !== undefined) {
      this.newFunc = args.newFunc;
    }
  }
};
ThriftHiveMetastore_alter_function_args.prototype = {};
ThriftHiveMetastore_alter_function_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.funcName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.newFunc = new ttypes.Function();
        this.newFunc.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_function_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_function_args');
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 1);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.funcName !== null && this.funcName !== undefined) {
    output.writeFieldBegin('funcName', Thrift.Type.STRING, 2);
    output.writeString(this.funcName);
    output.writeFieldEnd();
  }
  if (this.newFunc !== null && this.newFunc !== undefined) {
    output.writeFieldBegin('newFunc', Thrift.Type.STRUCT, 3);
    this.newFunc.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_alter_function_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.InvalidOperationException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_alter_function_result.prototype = {};
ThriftHiveMetastore_alter_function_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidOperationException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_function_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_function_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_functions_args = function(args) {
  this.dbName = null;
  this.pattern = null;
  if (args) {
    if (args.dbName !== undefined) {
      this.dbName = args.dbName;
    }
    if (args.pattern !== undefined) {
      this.pattern = args.pattern;
    }
  }
};
ThriftHiveMetastore_get_functions_args.prototype = {};
ThriftHiveMetastore_get_functions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.pattern = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_functions_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_functions_args');
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 1);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.pattern !== null && this.pattern !== undefined) {
    output.writeFieldBegin('pattern', Thrift.Type.STRING, 2);
    output.writeString(this.pattern);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_functions_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_get_functions_result.prototype = {};
ThriftHiveMetastore_get_functions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size862 = 0;
        var _rtmp3866;
        this.success = [];
        var _etype865 = 0;
        _rtmp3866 = input.readListBegin();
        _etype865 = _rtmp3866.etype;
        _size862 = _rtmp3866.size;
        for (var _i867 = 0; _i867 < _size862; ++_i867)
        {
          var elem868 = null;
          elem868 = input.readString();
          this.success.push(elem868);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_functions_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_functions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter869 in this.success)
    {
      if (this.success.hasOwnProperty(iter869))
      {
        iter869 = this.success[iter869];
        output.writeString(iter869);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_function_args = function(args) {
  this.dbName = null;
  this.funcName = null;
  if (args) {
    if (args.dbName !== undefined) {
      this.dbName = args.dbName;
    }
    if (args.funcName !== undefined) {
      this.funcName = args.funcName;
    }
  }
};
ThriftHiveMetastore_get_function_args.prototype = {};
ThriftHiveMetastore_get_function_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.funcName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_function_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_function_args');
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 1);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.funcName !== null && this.funcName !== undefined) {
    output.writeFieldBegin('funcName', Thrift.Type.STRING, 2);
    output.writeString(this.funcName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_function_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_function_result.prototype = {};
ThriftHiveMetastore_get_function_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Function();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_function_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_function_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_create_role_args = function(args) {
  this.role = null;
  if (args) {
    if (args.role !== undefined) {
      this.role = args.role;
    }
  }
};
ThriftHiveMetastore_create_role_args.prototype = {};
ThriftHiveMetastore_create_role_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.role = new ttypes.Role();
        this.role.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_create_role_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_role_args');
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.STRUCT, 1);
    this.role.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_create_role_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_create_role_result.prototype = {};
ThriftHiveMetastore_create_role_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_create_role_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_role_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_drop_role_args = function(args) {
  this.role_name = null;
  if (args) {
    if (args.role_name !== undefined) {
      this.role_name = args.role_name;
    }
  }
};
ThriftHiveMetastore_drop_role_args.prototype = {};
ThriftHiveMetastore_drop_role_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.role_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_role_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_role_args');
  if (this.role_name !== null && this.role_name !== undefined) {
    output.writeFieldBegin('role_name', Thrift.Type.STRING, 1);
    output.writeString(this.role_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_drop_role_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_drop_role_result.prototype = {};
ThriftHiveMetastore_drop_role_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_role_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_role_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_role_names_args = function(args) {
};
ThriftHiveMetastore_get_role_names_args.prototype = {};
ThriftHiveMetastore_get_role_names_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_role_names_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_role_names_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_role_names_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_get_role_names_result.prototype = {};
ThriftHiveMetastore_get_role_names_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size870 = 0;
        var _rtmp3874;
        this.success = [];
        var _etype873 = 0;
        _rtmp3874 = input.readListBegin();
        _etype873 = _rtmp3874.etype;
        _size870 = _rtmp3874.size;
        for (var _i875 = 0; _i875 < _size870; ++_i875)
        {
          var elem876 = null;
          elem876 = input.readString();
          this.success.push(elem876);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_role_names_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_role_names_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter877 in this.success)
    {
      if (this.success.hasOwnProperty(iter877))
      {
        iter877 = this.success[iter877];
        output.writeString(iter877);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_grant_role_args = function(args) {
  this.role_name = null;
  this.principal_name = null;
  this.principal_type = null;
  this.grantor = null;
  this.grantorType = null;
  this.grant_option = null;
  if (args) {
    if (args.role_name !== undefined) {
      this.role_name = args.role_name;
    }
    if (args.principal_name !== undefined) {
      this.principal_name = args.principal_name;
    }
    if (args.principal_type !== undefined) {
      this.principal_type = args.principal_type;
    }
    if (args.grantor !== undefined) {
      this.grantor = args.grantor;
    }
    if (args.grantorType !== undefined) {
      this.grantorType = args.grantorType;
    }
    if (args.grant_option !== undefined) {
      this.grant_option = args.grant_option;
    }
  }
};
ThriftHiveMetastore_grant_role_args.prototype = {};
ThriftHiveMetastore_grant_role_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.role_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.principal_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.principal_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.grantor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.grantorType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.grant_option = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_grant_role_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_grant_role_args');
  if (this.role_name !== null && this.role_name !== undefined) {
    output.writeFieldBegin('role_name', Thrift.Type.STRING, 1);
    output.writeString(this.role_name);
    output.writeFieldEnd();
  }
  if (this.principal_name !== null && this.principal_name !== undefined) {
    output.writeFieldBegin('principal_name', Thrift.Type.STRING, 2);
    output.writeString(this.principal_name);
    output.writeFieldEnd();
  }
  if (this.principal_type !== null && this.principal_type !== undefined) {
    output.writeFieldBegin('principal_type', Thrift.Type.I32, 3);
    output.writeI32(this.principal_type);
    output.writeFieldEnd();
  }
  if (this.grantor !== null && this.grantor !== undefined) {
    output.writeFieldBegin('grantor', Thrift.Type.STRING, 4);
    output.writeString(this.grantor);
    output.writeFieldEnd();
  }
  if (this.grantorType !== null && this.grantorType !== undefined) {
    output.writeFieldBegin('grantorType', Thrift.Type.I32, 5);
    output.writeI32(this.grantorType);
    output.writeFieldEnd();
  }
  if (this.grant_option !== null && this.grant_option !== undefined) {
    output.writeFieldBegin('grant_option', Thrift.Type.BOOL, 6);
    output.writeBool(this.grant_option);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_grant_role_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_grant_role_result.prototype = {};
ThriftHiveMetastore_grant_role_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_grant_role_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_grant_role_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_revoke_role_args = function(args) {
  this.role_name = null;
  this.principal_name = null;
  this.principal_type = null;
  if (args) {
    if (args.role_name !== undefined) {
      this.role_name = args.role_name;
    }
    if (args.principal_name !== undefined) {
      this.principal_name = args.principal_name;
    }
    if (args.principal_type !== undefined) {
      this.principal_type = args.principal_type;
    }
  }
};
ThriftHiveMetastore_revoke_role_args.prototype = {};
ThriftHiveMetastore_revoke_role_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.role_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.principal_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.principal_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_revoke_role_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_revoke_role_args');
  if (this.role_name !== null && this.role_name !== undefined) {
    output.writeFieldBegin('role_name', Thrift.Type.STRING, 1);
    output.writeString(this.role_name);
    output.writeFieldEnd();
  }
  if (this.principal_name !== null && this.principal_name !== undefined) {
    output.writeFieldBegin('principal_name', Thrift.Type.STRING, 2);
    output.writeString(this.principal_name);
    output.writeFieldEnd();
  }
  if (this.principal_type !== null && this.principal_type !== undefined) {
    output.writeFieldBegin('principal_type', Thrift.Type.I32, 3);
    output.writeI32(this.principal_type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_revoke_role_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_revoke_role_result.prototype = {};
ThriftHiveMetastore_revoke_role_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_revoke_role_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_revoke_role_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_list_roles_args = function(args) {
  this.principal_name = null;
  this.principal_type = null;
  if (args) {
    if (args.principal_name !== undefined) {
      this.principal_name = args.principal_name;
    }
    if (args.principal_type !== undefined) {
      this.principal_type = args.principal_type;
    }
  }
};
ThriftHiveMetastore_list_roles_args.prototype = {};
ThriftHiveMetastore_list_roles_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.principal_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.principal_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_list_roles_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_list_roles_args');
  if (this.principal_name !== null && this.principal_name !== undefined) {
    output.writeFieldBegin('principal_name', Thrift.Type.STRING, 1);
    output.writeString(this.principal_name);
    output.writeFieldEnd();
  }
  if (this.principal_type !== null && this.principal_type !== undefined) {
    output.writeFieldBegin('principal_type', Thrift.Type.I32, 2);
    output.writeI32(this.principal_type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_list_roles_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_list_roles_result.prototype = {};
ThriftHiveMetastore_list_roles_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size878 = 0;
        var _rtmp3882;
        this.success = [];
        var _etype881 = 0;
        _rtmp3882 = input.readListBegin();
        _etype881 = _rtmp3882.etype;
        _size878 = _rtmp3882.size;
        for (var _i883 = 0; _i883 < _size878; ++_i883)
        {
          var elem884 = null;
          elem884 = new ttypes.Role();
          elem884.read(input);
          this.success.push(elem884);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_list_roles_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_list_roles_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter885 in this.success)
    {
      if (this.success.hasOwnProperty(iter885))
      {
        iter885 = this.success[iter885];
        iter885.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_grant_revoke_role_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
ThriftHiveMetastore_grant_revoke_role_args.prototype = {};
ThriftHiveMetastore_grant_revoke_role_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GrantRevokeRoleRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_grant_revoke_role_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_grant_revoke_role_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_grant_revoke_role_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_grant_revoke_role_result.prototype = {};
ThriftHiveMetastore_grant_revoke_role_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GrantRevokeRoleResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_grant_revoke_role_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_grant_revoke_role_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_principals_in_role_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
ThriftHiveMetastore_get_principals_in_role_args.prototype = {};
ThriftHiveMetastore_get_principals_in_role_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetPrincipalsInRoleRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_principals_in_role_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_principals_in_role_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_principals_in_role_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_get_principals_in_role_result.prototype = {};
ThriftHiveMetastore_get_principals_in_role_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GetPrincipalsInRoleResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_principals_in_role_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_principals_in_role_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_role_grants_for_principal_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
ThriftHiveMetastore_get_role_grants_for_principal_args.prototype = {};
ThriftHiveMetastore_get_role_grants_for_principal_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetRoleGrantsForPrincipalRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_role_grants_for_principal_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_role_grants_for_principal_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_role_grants_for_principal_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_get_role_grants_for_principal_result.prototype = {};
ThriftHiveMetastore_get_role_grants_for_principal_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GetRoleGrantsForPrincipalResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_role_grants_for_principal_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_role_grants_for_principal_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_privilege_set_args = function(args) {
  this.hiveObject = null;
  this.user_name = null;
  this.group_names = null;
  if (args) {
    if (args.hiveObject !== undefined) {
      this.hiveObject = args.hiveObject;
    }
    if (args.user_name !== undefined) {
      this.user_name = args.user_name;
    }
    if (args.group_names !== undefined) {
      this.group_names = args.group_names;
    }
  }
};
ThriftHiveMetastore_get_privilege_set_args.prototype = {};
ThriftHiveMetastore_get_privilege_set_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.hiveObject = new ttypes.HiveObjectRef();
        this.hiveObject.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size886 = 0;
        var _rtmp3890;
        this.group_names = [];
        var _etype889 = 0;
        _rtmp3890 = input.readListBegin();
        _etype889 = _rtmp3890.etype;
        _size886 = _rtmp3890.size;
        for (var _i891 = 0; _i891 < _size886; ++_i891)
        {
          var elem892 = null;
          elem892 = input.readString();
          this.group_names.push(elem892);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_privilege_set_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_privilege_set_args');
  if (this.hiveObject !== null && this.hiveObject !== undefined) {
    output.writeFieldBegin('hiveObject', Thrift.Type.STRUCT, 1);
    this.hiveObject.write(output);
    output.writeFieldEnd();
  }
  if (this.user_name !== null && this.user_name !== undefined) {
    output.writeFieldBegin('user_name', Thrift.Type.STRING, 2);
    output.writeString(this.user_name);
    output.writeFieldEnd();
  }
  if (this.group_names !== null && this.group_names !== undefined) {
    output.writeFieldBegin('group_names', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.group_names.length);
    for (var iter893 in this.group_names)
    {
      if (this.group_names.hasOwnProperty(iter893))
      {
        iter893 = this.group_names[iter893];
        output.writeString(iter893);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_privilege_set_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_get_privilege_set_result.prototype = {};
ThriftHiveMetastore_get_privilege_set_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PrincipalPrivilegeSet();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_privilege_set_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_privilege_set_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_list_privileges_args = function(args) {
  this.principal_name = null;
  this.principal_type = null;
  this.hiveObject = null;
  if (args) {
    if (args.principal_name !== undefined) {
      this.principal_name = args.principal_name;
    }
    if (args.principal_type !== undefined) {
      this.principal_type = args.principal_type;
    }
    if (args.hiveObject !== undefined) {
      this.hiveObject = args.hiveObject;
    }
  }
};
ThriftHiveMetastore_list_privileges_args.prototype = {};
ThriftHiveMetastore_list_privileges_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.principal_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.principal_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.hiveObject = new ttypes.HiveObjectRef();
        this.hiveObject.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_list_privileges_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_list_privileges_args');
  if (this.principal_name !== null && this.principal_name !== undefined) {
    output.writeFieldBegin('principal_name', Thrift.Type.STRING, 1);
    output.writeString(this.principal_name);
    output.writeFieldEnd();
  }
  if (this.principal_type !== null && this.principal_type !== undefined) {
    output.writeFieldBegin('principal_type', Thrift.Type.I32, 2);
    output.writeI32(this.principal_type);
    output.writeFieldEnd();
  }
  if (this.hiveObject !== null && this.hiveObject !== undefined) {
    output.writeFieldBegin('hiveObject', Thrift.Type.STRUCT, 3);
    this.hiveObject.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_list_privileges_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_list_privileges_result.prototype = {};
ThriftHiveMetastore_list_privileges_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size894 = 0;
        var _rtmp3898;
        this.success = [];
        var _etype897 = 0;
        _rtmp3898 = input.readListBegin();
        _etype897 = _rtmp3898.etype;
        _size894 = _rtmp3898.size;
        for (var _i899 = 0; _i899 < _size894; ++_i899)
        {
          var elem900 = null;
          elem900 = new ttypes.HiveObjectPrivilege();
          elem900.read(input);
          this.success.push(elem900);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_list_privileges_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_list_privileges_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter901 in this.success)
    {
      if (this.success.hasOwnProperty(iter901))
      {
        iter901 = this.success[iter901];
        iter901.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_grant_privileges_args = function(args) {
  this.privileges = null;
  if (args) {
    if (args.privileges !== undefined) {
      this.privileges = args.privileges;
    }
  }
};
ThriftHiveMetastore_grant_privileges_args.prototype = {};
ThriftHiveMetastore_grant_privileges_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.privileges = new ttypes.PrivilegeBag();
        this.privileges.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_grant_privileges_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_grant_privileges_args');
  if (this.privileges !== null && this.privileges !== undefined) {
    output.writeFieldBegin('privileges', Thrift.Type.STRUCT, 1);
    this.privileges.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_grant_privileges_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_grant_privileges_result.prototype = {};
ThriftHiveMetastore_grant_privileges_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_grant_privileges_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_grant_privileges_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_revoke_privileges_args = function(args) {
  this.privileges = null;
  if (args) {
    if (args.privileges !== undefined) {
      this.privileges = args.privileges;
    }
  }
};
ThriftHiveMetastore_revoke_privileges_args.prototype = {};
ThriftHiveMetastore_revoke_privileges_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.privileges = new ttypes.PrivilegeBag();
        this.privileges.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_revoke_privileges_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_revoke_privileges_args');
  if (this.privileges !== null && this.privileges !== undefined) {
    output.writeFieldBegin('privileges', Thrift.Type.STRUCT, 1);
    this.privileges.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_revoke_privileges_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_revoke_privileges_result.prototype = {};
ThriftHiveMetastore_revoke_privileges_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_revoke_privileges_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_revoke_privileges_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_grant_revoke_privileges_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
ThriftHiveMetastore_grant_revoke_privileges_args.prototype = {};
ThriftHiveMetastore_grant_revoke_privileges_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GrantRevokePrivilegeRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_grant_revoke_privileges_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_grant_revoke_privileges_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_grant_revoke_privileges_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_grant_revoke_privileges_result.prototype = {};
ThriftHiveMetastore_grant_revoke_privileges_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GrantRevokePrivilegeResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_grant_revoke_privileges_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_grant_revoke_privileges_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_set_ugi_args = function(args) {
  this.user_name = null;
  this.group_names = null;
  if (args) {
    if (args.user_name !== undefined) {
      this.user_name = args.user_name;
    }
    if (args.group_names !== undefined) {
      this.group_names = args.group_names;
    }
  }
};
ThriftHiveMetastore_set_ugi_args.prototype = {};
ThriftHiveMetastore_set_ugi_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.user_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size902 = 0;
        var _rtmp3906;
        this.group_names = [];
        var _etype905 = 0;
        _rtmp3906 = input.readListBegin();
        _etype905 = _rtmp3906.etype;
        _size902 = _rtmp3906.size;
        for (var _i907 = 0; _i907 < _size902; ++_i907)
        {
          var elem908 = null;
          elem908 = input.readString();
          this.group_names.push(elem908);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_set_ugi_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_set_ugi_args');
  if (this.user_name !== null && this.user_name !== undefined) {
    output.writeFieldBegin('user_name', Thrift.Type.STRING, 1);
    output.writeString(this.user_name);
    output.writeFieldEnd();
  }
  if (this.group_names !== null && this.group_names !== undefined) {
    output.writeFieldBegin('group_names', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.group_names.length);
    for (var iter909 in this.group_names)
    {
      if (this.group_names.hasOwnProperty(iter909))
      {
        iter909 = this.group_names[iter909];
        output.writeString(iter909);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_set_ugi_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_set_ugi_result.prototype = {};
ThriftHiveMetastore_set_ugi_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size910 = 0;
        var _rtmp3914;
        this.success = [];
        var _etype913 = 0;
        _rtmp3914 = input.readListBegin();
        _etype913 = _rtmp3914.etype;
        _size910 = _rtmp3914.size;
        for (var _i915 = 0; _i915 < _size910; ++_i915)
        {
          var elem916 = null;
          elem916 = input.readString();
          this.success.push(elem916);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_set_ugi_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_set_ugi_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter917 in this.success)
    {
      if (this.success.hasOwnProperty(iter917))
      {
        iter917 = this.success[iter917];
        output.writeString(iter917);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_delegation_token_args = function(args) {
  this.token_owner = null;
  this.renewer_kerberos_principal_name = null;
  if (args) {
    if (args.token_owner !== undefined) {
      this.token_owner = args.token_owner;
    }
    if (args.renewer_kerberos_principal_name !== undefined) {
      this.renewer_kerberos_principal_name = args.renewer_kerberos_principal_name;
    }
  }
};
ThriftHiveMetastore_get_delegation_token_args.prototype = {};
ThriftHiveMetastore_get_delegation_token_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token_owner = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.renewer_kerberos_principal_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_delegation_token_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_delegation_token_args');
  if (this.token_owner !== null && this.token_owner !== undefined) {
    output.writeFieldBegin('token_owner', Thrift.Type.STRING, 1);
    output.writeString(this.token_owner);
    output.writeFieldEnd();
  }
  if (this.renewer_kerberos_principal_name !== null && this.renewer_kerberos_principal_name !== undefined) {
    output.writeFieldBegin('renewer_kerberos_principal_name', Thrift.Type.STRING, 2);
    output.writeString(this.renewer_kerberos_principal_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_delegation_token_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_get_delegation_token_result.prototype = {};
ThriftHiveMetastore_get_delegation_token_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_delegation_token_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_delegation_token_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_renew_delegation_token_args = function(args) {
  this.token_str_form = null;
  if (args) {
    if (args.token_str_form !== undefined) {
      this.token_str_form = args.token_str_form;
    }
  }
};
ThriftHiveMetastore_renew_delegation_token_args.prototype = {};
ThriftHiveMetastore_renew_delegation_token_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token_str_form = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_renew_delegation_token_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_renew_delegation_token_args');
  if (this.token_str_form !== null && this.token_str_form !== undefined) {
    output.writeFieldBegin('token_str_form', Thrift.Type.STRING, 1);
    output.writeString(this.token_str_form);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_renew_delegation_token_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_renew_delegation_token_result.prototype = {};
ThriftHiveMetastore_renew_delegation_token_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_renew_delegation_token_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_renew_delegation_token_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_cancel_delegation_token_args = function(args) {
  this.token_str_form = null;
  if (args) {
    if (args.token_str_form !== undefined) {
      this.token_str_form = args.token_str_form;
    }
  }
};
ThriftHiveMetastore_cancel_delegation_token_args.prototype = {};
ThriftHiveMetastore_cancel_delegation_token_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token_str_form = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_cancel_delegation_token_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_cancel_delegation_token_args');
  if (this.token_str_form !== null && this.token_str_form !== undefined) {
    output.writeFieldBegin('token_str_form', Thrift.Type.STRING, 1);
    output.writeString(this.token_str_form);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_cancel_delegation_token_result = function(args) {
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_cancel_delegation_token_result.prototype = {};
ThriftHiveMetastore_cancel_delegation_token_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_cancel_delegation_token_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_cancel_delegation_token_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_open_txns_args = function(args) {
};
ThriftHiveMetastore_get_open_txns_args.prototype = {};
ThriftHiveMetastore_get_open_txns_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_open_txns_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_open_txns_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_open_txns_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ThriftHiveMetastore_get_open_txns_result.prototype = {};
ThriftHiveMetastore_get_open_txns_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GetOpenTxnsResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_open_txns_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_open_txns_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_open_txns_info_args = function(args) {
};
ThriftHiveMetastore_get_open_txns_info_args.prototype = {};
ThriftHiveMetastore_get_open_txns_info_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_open_txns_info_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_open_txns_info_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_get_open_txns_info_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ThriftHiveMetastore_get_open_txns_info_result.prototype = {};
ThriftHiveMetastore_get_open_txns_info_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GetOpenTxnsInfoResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_open_txns_info_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_open_txns_info_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_open_txns_args = function(args) {
  this.rqst = null;
  if (args) {
    if (args.rqst !== undefined) {
      this.rqst = args.rqst;
    }
  }
};
ThriftHiveMetastore_open_txns_args.prototype = {};
ThriftHiveMetastore_open_txns_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.rqst = new ttypes.OpenTxnRequest();
        this.rqst.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_open_txns_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_open_txns_args');
  if (this.rqst !== null && this.rqst !== undefined) {
    output.writeFieldBegin('rqst', Thrift.Type.STRUCT, 1);
    this.rqst.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_open_txns_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ThriftHiveMetastore_open_txns_result.prototype = {};
ThriftHiveMetastore_open_txns_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.OpenTxnsResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_open_txns_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_open_txns_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_abort_txn_args = function(args) {
  this.rqst = null;
  if (args) {
    if (args.rqst !== undefined) {
      this.rqst = args.rqst;
    }
  }
};
ThriftHiveMetastore_abort_txn_args.prototype = {};
ThriftHiveMetastore_abort_txn_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.rqst = new ttypes.AbortTxnRequest();
        this.rqst.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_abort_txn_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_abort_txn_args');
  if (this.rqst !== null && this.rqst !== undefined) {
    output.writeFieldBegin('rqst', Thrift.Type.STRUCT, 1);
    this.rqst.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_abort_txn_result = function(args) {
  this.o1 = null;
  if (args instanceof ttypes.NoSuchTxnException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_abort_txn_result.prototype = {};
ThriftHiveMetastore_abort_txn_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchTxnException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_abort_txn_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_abort_txn_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_commit_txn_args = function(args) {
  this.rqst = null;
  if (args) {
    if (args.rqst !== undefined) {
      this.rqst = args.rqst;
    }
  }
};
ThriftHiveMetastore_commit_txn_args.prototype = {};
ThriftHiveMetastore_commit_txn_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.rqst = new ttypes.CommitTxnRequest();
        this.rqst.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_commit_txn_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_commit_txn_args');
  if (this.rqst !== null && this.rqst !== undefined) {
    output.writeFieldBegin('rqst', Thrift.Type.STRUCT, 1);
    this.rqst.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_commit_txn_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.NoSuchTxnException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.TxnAbortedException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_commit_txn_result.prototype = {};
ThriftHiveMetastore_commit_txn_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchTxnException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.TxnAbortedException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_commit_txn_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_commit_txn_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_lock_args = function(args) {
  this.rqst = null;
  if (args) {
    if (args.rqst !== undefined) {
      this.rqst = args.rqst;
    }
  }
};
ThriftHiveMetastore_lock_args.prototype = {};
ThriftHiveMetastore_lock_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.rqst = new ttypes.LockRequest();
        this.rqst.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_lock_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_lock_args');
  if (this.rqst !== null && this.rqst !== undefined) {
    output.writeFieldBegin('rqst', Thrift.Type.STRUCT, 1);
    this.rqst.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_lock_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.NoSuchTxnException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.TxnAbortedException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_lock_result.prototype = {};
ThriftHiveMetastore_lock_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.LockResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchTxnException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.TxnAbortedException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_lock_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_lock_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_check_lock_args = function(args) {
  this.rqst = null;
  if (args) {
    if (args.rqst !== undefined) {
      this.rqst = args.rqst;
    }
  }
};
ThriftHiveMetastore_check_lock_args.prototype = {};
ThriftHiveMetastore_check_lock_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.rqst = new ttypes.CheckLockRequest();
        this.rqst.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_check_lock_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_check_lock_args');
  if (this.rqst !== null && this.rqst !== undefined) {
    output.writeFieldBegin('rqst', Thrift.Type.STRUCT, 1);
    this.rqst.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_check_lock_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.NoSuchTxnException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.TxnAbortedException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchLockException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_check_lock_result.prototype = {};
ThriftHiveMetastore_check_lock_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.LockResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchTxnException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.TxnAbortedException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.NoSuchLockException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_check_lock_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_check_lock_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_unlock_args = function(args) {
  this.rqst = null;
  if (args) {
    if (args.rqst !== undefined) {
      this.rqst = args.rqst;
    }
  }
};
ThriftHiveMetastore_unlock_args.prototype = {};
ThriftHiveMetastore_unlock_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.rqst = new ttypes.UnlockRequest();
        this.rqst.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_unlock_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_unlock_args');
  if (this.rqst !== null && this.rqst !== undefined) {
    output.writeFieldBegin('rqst', Thrift.Type.STRUCT, 1);
    this.rqst.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_unlock_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.NoSuchLockException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.TxnOpenException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_unlock_result.prototype = {};
ThriftHiveMetastore_unlock_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchLockException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.TxnOpenException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_unlock_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_unlock_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_show_locks_args = function(args) {
  this.rqst = null;
  if (args) {
    if (args.rqst !== undefined) {
      this.rqst = args.rqst;
    }
  }
};
ThriftHiveMetastore_show_locks_args.prototype = {};
ThriftHiveMetastore_show_locks_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.rqst = new ttypes.ShowLocksRequest();
        this.rqst.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_show_locks_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_show_locks_args');
  if (this.rqst !== null && this.rqst !== undefined) {
    output.writeFieldBegin('rqst', Thrift.Type.STRUCT, 1);
    this.rqst.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_show_locks_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ThriftHiveMetastore_show_locks_result.prototype = {};
ThriftHiveMetastore_show_locks_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ShowLocksResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_show_locks_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_show_locks_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_heartbeat_args = function(args) {
  this.ids = null;
  if (args) {
    if (args.ids !== undefined) {
      this.ids = args.ids;
    }
  }
};
ThriftHiveMetastore_heartbeat_args.prototype = {};
ThriftHiveMetastore_heartbeat_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ids = new ttypes.HeartbeatRequest();
        this.ids.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_heartbeat_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_heartbeat_args');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.STRUCT, 1);
    this.ids.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_heartbeat_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.NoSuchLockException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchTxnException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.TxnAbortedException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_heartbeat_result.prototype = {};
ThriftHiveMetastore_heartbeat_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchLockException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchTxnException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.TxnAbortedException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_heartbeat_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_heartbeat_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_heartbeat_txn_range_args = function(args) {
  this.txns = null;
  if (args) {
    if (args.txns !== undefined) {
      this.txns = args.txns;
    }
  }
};
ThriftHiveMetastore_heartbeat_txn_range_args.prototype = {};
ThriftHiveMetastore_heartbeat_txn_range_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.txns = new ttypes.HeartbeatTxnRangeRequest();
        this.txns.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_heartbeat_txn_range_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_heartbeat_txn_range_args');
  if (this.txns !== null && this.txns !== undefined) {
    output.writeFieldBegin('txns', Thrift.Type.STRUCT, 1);
    this.txns.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_heartbeat_txn_range_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ThriftHiveMetastore_heartbeat_txn_range_result.prototype = {};
ThriftHiveMetastore_heartbeat_txn_range_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.HeartbeatTxnRangeResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_heartbeat_txn_range_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_heartbeat_txn_range_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_compact_args = function(args) {
  this.rqst = null;
  if (args) {
    if (args.rqst !== undefined) {
      this.rqst = args.rqst;
    }
  }
};
ThriftHiveMetastore_compact_args.prototype = {};
ThriftHiveMetastore_compact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.rqst = new ttypes.CompactionRequest();
        this.rqst.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_compact_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_compact_args');
  if (this.rqst !== null && this.rqst !== undefined) {
    output.writeFieldBegin('rqst', Thrift.Type.STRUCT, 1);
    this.rqst.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_compact_result = function(args) {
};
ThriftHiveMetastore_compact_result.prototype = {};
ThriftHiveMetastore_compact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_compact_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_compact_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_show_compact_args = function(args) {
  this.rqst = null;
  if (args) {
    if (args.rqst !== undefined) {
      this.rqst = args.rqst;
    }
  }
};
ThriftHiveMetastore_show_compact_args.prototype = {};
ThriftHiveMetastore_show_compact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.rqst = new ttypes.ShowCompactRequest();
        this.rqst.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_show_compact_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_show_compact_args');
  if (this.rqst !== null && this.rqst !== undefined) {
    output.writeFieldBegin('rqst', Thrift.Type.STRUCT, 1);
    this.rqst.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastore_show_compact_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ThriftHiveMetastore_show_compact_result.prototype = {};
ThriftHiveMetastore_show_compact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ShowCompactResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_show_compact_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_show_compact_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftHiveMetastoreClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
Thrift.inherits(ThriftHiveMetastoreClient, FacebookServiceClient);
ThriftHiveMetastoreClient.prototype.seqid = function() { return this._seqid; }
ThriftHiveMetastoreClient.prototype.new_seqid = function() { return this._seqid += 1; }
ThriftHiveMetastoreClient.prototype.getMetaConf = function(key, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getMetaConf(key);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getMetaConf(key);
  }
};

ThriftHiveMetastoreClient.prototype.send_getMetaConf = function(key) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getMetaConf', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_getMetaConf_args();
  args.key = key;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_getMetaConf = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_getMetaConf_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMetaConf failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.setMetaConf = function(key, value, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setMetaConf(key, value);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setMetaConf(key, value);
  }
};

ThriftHiveMetastoreClient.prototype.send_setMetaConf = function(key, value) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setMetaConf', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_setMetaConf_args();
  args.key = key;
  args.value = value;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_setMetaConf = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_setMetaConf_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.create_database = function(database, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_database(database);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_database(database);
  }
};

ThriftHiveMetastoreClient.prototype.send_create_database = function(database) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_database', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_create_database_args();
  args.database = database;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_create_database = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_create_database_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.get_database = function(name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_database(name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_database(name);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_database = function(name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_database', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_database_args();
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_database = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_database_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_database failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.drop_database = function(name, deleteData, cascade, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_drop_database(name, deleteData, cascade);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_drop_database(name, deleteData, cascade);
  }
};

ThriftHiveMetastoreClient.prototype.send_drop_database = function(name, deleteData, cascade) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_database', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_drop_database_args();
  args.name = name;
  args.deleteData = deleteData;
  args.cascade = cascade;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_drop_database = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_database_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.get_databases = function(pattern, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_databases(pattern);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_databases(pattern);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_databases = function(pattern) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_databases', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_databases_args();
  args.pattern = pattern;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_databases = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_databases_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_databases failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_all_databases = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_all_databases();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_all_databases();
  }
};

ThriftHiveMetastoreClient.prototype.send_get_all_databases = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_all_databases', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_all_databases_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_all_databases = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_all_databases_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_all_databases failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.alter_database = function(dbname, db, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_alter_database(dbname, db);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_alter_database(dbname, db);
  }
};

ThriftHiveMetastoreClient.prototype.send_alter_database = function(dbname, db) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('alter_database', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_alter_database_args();
  args.dbname = dbname;
  args.db = db;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_alter_database = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_alter_database_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.get_type = function(name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_type(name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_type(name);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_type = function(name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_type', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_type_args();
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_type = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_type_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_type failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.create_type = function(type, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_type(type);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_type(type);
  }
};

ThriftHiveMetastoreClient.prototype.send_create_type = function(type) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_type', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_create_type_args();
  args.type = type;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_create_type = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_create_type_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('create_type failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.drop_type = function(type, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_drop_type(type);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_drop_type(type);
  }
};

ThriftHiveMetastoreClient.prototype.send_drop_type = function(type) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_type', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_drop_type_args();
  args.type = type;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_drop_type = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_type_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('drop_type failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_type_all = function(name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_type_all(name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_type_all(name);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_type_all = function(name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_type_all', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_type_all_args();
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_type_all = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_type_all_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_type_all failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_fields = function(db_name, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_fields(db_name, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_fields(db_name, table_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_fields = function(db_name, table_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_fields', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_fields_args();
  args.db_name = db_name;
  args.table_name = table_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_fields = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_fields_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_fields failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_schema = function(db_name, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_schema(db_name, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_schema(db_name, table_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_schema = function(db_name, table_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_schema', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_schema_args();
  args.db_name = db_name;
  args.table_name = table_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_schema = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_schema_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_schema failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.create_table = function(tbl, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_table(tbl);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_table(tbl);
  }
};

ThriftHiveMetastoreClient.prototype.send_create_table = function(tbl) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_table', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_create_table_args();
  args.tbl = tbl;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_create_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_create_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.o4) {
    return callback(result.o4);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.create_table_with_environment_context = function(tbl, environment_context, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_table_with_environment_context(tbl, environment_context);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_table_with_environment_context(tbl, environment_context);
  }
};

ThriftHiveMetastoreClient.prototype.send_create_table_with_environment_context = function(tbl, environment_context) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_table_with_environment_context', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_create_table_with_environment_context_args();
  args.tbl = tbl;
  args.environment_context = environment_context;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_create_table_with_environment_context = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_create_table_with_environment_context_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.o4) {
    return callback(result.o4);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.drop_table = function(dbname, name, deleteData, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_drop_table(dbname, name, deleteData);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_drop_table(dbname, name, deleteData);
  }
};

ThriftHiveMetastoreClient.prototype.send_drop_table = function(dbname, name, deleteData) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_table', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_drop_table_args();
  args.dbname = dbname;
  args.name = name;
  args.deleteData = deleteData;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_drop_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.drop_table_with_environment_context = function(dbname, name, deleteData, environment_context, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_drop_table_with_environment_context(dbname, name, deleteData, environment_context);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_drop_table_with_environment_context(dbname, name, deleteData, environment_context);
  }
};

ThriftHiveMetastoreClient.prototype.send_drop_table_with_environment_context = function(dbname, name, deleteData, environment_context) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_table_with_environment_context', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_drop_table_with_environment_context_args();
  args.dbname = dbname;
  args.name = name;
  args.deleteData = deleteData;
  args.environment_context = environment_context;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_drop_table_with_environment_context = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_table_with_environment_context_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.get_tables = function(db_name, pattern, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_tables(db_name, pattern);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_tables(db_name, pattern);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_tables = function(db_name, pattern) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_tables', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_tables_args();
  args.db_name = db_name;
  args.pattern = pattern;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_tables = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_tables_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_tables failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_all_tables = function(db_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_all_tables(db_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_all_tables(db_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_all_tables = function(db_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_all_tables', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_all_tables_args();
  args.db_name = db_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_all_tables = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_all_tables_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_all_tables failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_table = function(dbname, tbl_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_table(dbname, tbl_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_table(dbname, tbl_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_table = function(dbname, tbl_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_table', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_table_args();
  args.dbname = dbname;
  args.tbl_name = tbl_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_table failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_table_objects_by_name = function(dbname, tbl_names, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_table_objects_by_name(dbname, tbl_names);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_table_objects_by_name(dbname, tbl_names);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_table_objects_by_name = function(dbname, tbl_names) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_table_objects_by_name', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_table_objects_by_name_args();
  args.dbname = dbname;
  args.tbl_names = tbl_names;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_table_objects_by_name = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_table_objects_by_name_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_table_objects_by_name failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_table_names_by_filter = function(dbname, filter, max_tables, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_table_names_by_filter(dbname, filter, max_tables);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_table_names_by_filter(dbname, filter, max_tables);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_table_names_by_filter = function(dbname, filter, max_tables) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_table_names_by_filter', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_table_names_by_filter_args();
  args.dbname = dbname;
  args.filter = filter;
  args.max_tables = max_tables;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_table_names_by_filter = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_table_names_by_filter_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_table_names_by_filter failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.alter_table = function(dbname, tbl_name, new_tbl, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_alter_table(dbname, tbl_name, new_tbl);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_alter_table(dbname, tbl_name, new_tbl);
  }
};

ThriftHiveMetastoreClient.prototype.send_alter_table = function(dbname, tbl_name, new_tbl) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('alter_table', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_alter_table_args();
  args.dbname = dbname;
  args.tbl_name = tbl_name;
  args.new_tbl = new_tbl;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_alter_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_alter_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.alter_table_with_environment_context = function(dbname, tbl_name, new_tbl, environment_context, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_alter_table_with_environment_context(dbname, tbl_name, new_tbl, environment_context);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_alter_table_with_environment_context(dbname, tbl_name, new_tbl, environment_context);
  }
};

ThriftHiveMetastoreClient.prototype.send_alter_table_with_environment_context = function(dbname, tbl_name, new_tbl, environment_context) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('alter_table_with_environment_context', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_alter_table_with_environment_context_args();
  args.dbname = dbname;
  args.tbl_name = tbl_name;
  args.new_tbl = new_tbl;
  args.environment_context = environment_context;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_alter_table_with_environment_context = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_alter_table_with_environment_context_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.add_partition = function(new_part, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_add_partition(new_part);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_add_partition(new_part);
  }
};

ThriftHiveMetastoreClient.prototype.send_add_partition = function(new_part) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('add_partition', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_add_partition_args();
  args.new_part = new_part;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_add_partition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_add_partition_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('add_partition failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.add_partition_with_environment_context = function(new_part, environment_context, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_add_partition_with_environment_context(new_part, environment_context);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_add_partition_with_environment_context(new_part, environment_context);
  }
};

ThriftHiveMetastoreClient.prototype.send_add_partition_with_environment_context = function(new_part, environment_context) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('add_partition_with_environment_context', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_add_partition_with_environment_context_args();
  args.new_part = new_part;
  args.environment_context = environment_context;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_add_partition_with_environment_context = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_add_partition_with_environment_context_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('add_partition_with_environment_context failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.add_partitions = function(new_parts, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_add_partitions(new_parts);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_add_partitions(new_parts);
  }
};

ThriftHiveMetastoreClient.prototype.send_add_partitions = function(new_parts) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('add_partitions', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_add_partitions_args();
  args.new_parts = new_parts;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_add_partitions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_add_partitions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('add_partitions failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.add_partitions_pspec = function(new_parts, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_add_partitions_pspec(new_parts);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_add_partitions_pspec(new_parts);
  }
};

ThriftHiveMetastoreClient.prototype.send_add_partitions_pspec = function(new_parts) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('add_partitions_pspec', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_add_partitions_pspec_args();
  args.new_parts = new_parts;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_add_partitions_pspec = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_add_partitions_pspec_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('add_partitions_pspec failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.append_partition = function(db_name, tbl_name, part_vals, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_append_partition(db_name, tbl_name, part_vals);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_append_partition(db_name, tbl_name, part_vals);
  }
};

ThriftHiveMetastoreClient.prototype.send_append_partition = function(db_name, tbl_name, part_vals) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('append_partition', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_append_partition_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.part_vals = part_vals;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_append_partition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_append_partition_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('append_partition failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.add_partitions_req = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_add_partitions_req(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_add_partitions_req(request);
  }
};

ThriftHiveMetastoreClient.prototype.send_add_partitions_req = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('add_partitions_req', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_add_partitions_req_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_add_partitions_req = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_add_partitions_req_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('add_partitions_req failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.append_partition_with_environment_context = function(db_name, tbl_name, part_vals, environment_context, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_append_partition_with_environment_context(db_name, tbl_name, part_vals, environment_context);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_append_partition_with_environment_context(db_name, tbl_name, part_vals, environment_context);
  }
};

ThriftHiveMetastoreClient.prototype.send_append_partition_with_environment_context = function(db_name, tbl_name, part_vals, environment_context) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('append_partition_with_environment_context', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_append_partition_with_environment_context_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.part_vals = part_vals;
  args.environment_context = environment_context;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_append_partition_with_environment_context = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_append_partition_with_environment_context_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('append_partition_with_environment_context failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.append_partition_by_name = function(db_name, tbl_name, part_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_append_partition_by_name(db_name, tbl_name, part_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_append_partition_by_name(db_name, tbl_name, part_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_append_partition_by_name = function(db_name, tbl_name, part_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('append_partition_by_name', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_append_partition_by_name_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.part_name = part_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_append_partition_by_name = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_append_partition_by_name_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('append_partition_by_name failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.append_partition_by_name_with_environment_context = function(db_name, tbl_name, part_name, environment_context, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_append_partition_by_name_with_environment_context(db_name, tbl_name, part_name, environment_context);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_append_partition_by_name_with_environment_context(db_name, tbl_name, part_name, environment_context);
  }
};

ThriftHiveMetastoreClient.prototype.send_append_partition_by_name_with_environment_context = function(db_name, tbl_name, part_name, environment_context) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('append_partition_by_name_with_environment_context', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_append_partition_by_name_with_environment_context_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.part_name = part_name;
  args.environment_context = environment_context;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_append_partition_by_name_with_environment_context = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_append_partition_by_name_with_environment_context_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('append_partition_by_name_with_environment_context failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.drop_partition = function(db_name, tbl_name, part_vals, deleteData, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_drop_partition(db_name, tbl_name, part_vals, deleteData);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_drop_partition(db_name, tbl_name, part_vals, deleteData);
  }
};

ThriftHiveMetastoreClient.prototype.send_drop_partition = function(db_name, tbl_name, part_vals, deleteData) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_partition', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_drop_partition_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.part_vals = part_vals;
  args.deleteData = deleteData;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_drop_partition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_partition_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('drop_partition failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.drop_partition_with_environment_context = function(db_name, tbl_name, part_vals, deleteData, environment_context, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_drop_partition_with_environment_context(db_name, tbl_name, part_vals, deleteData, environment_context);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_drop_partition_with_environment_context(db_name, tbl_name, part_vals, deleteData, environment_context);
  }
};

ThriftHiveMetastoreClient.prototype.send_drop_partition_with_environment_context = function(db_name, tbl_name, part_vals, deleteData, environment_context) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_partition_with_environment_context', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_drop_partition_with_environment_context_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.part_vals = part_vals;
  args.deleteData = deleteData;
  args.environment_context = environment_context;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_drop_partition_with_environment_context = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_partition_with_environment_context_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('drop_partition_with_environment_context failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.drop_partition_by_name = function(db_name, tbl_name, part_name, deleteData, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_drop_partition_by_name(db_name, tbl_name, part_name, deleteData);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_drop_partition_by_name(db_name, tbl_name, part_name, deleteData);
  }
};

ThriftHiveMetastoreClient.prototype.send_drop_partition_by_name = function(db_name, tbl_name, part_name, deleteData) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_partition_by_name', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_drop_partition_by_name_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.part_name = part_name;
  args.deleteData = deleteData;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_drop_partition_by_name = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_partition_by_name_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('drop_partition_by_name failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.drop_partition_by_name_with_environment_context = function(db_name, tbl_name, part_name, deleteData, environment_context, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_drop_partition_by_name_with_environment_context(db_name, tbl_name, part_name, deleteData, environment_context);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_drop_partition_by_name_with_environment_context(db_name, tbl_name, part_name, deleteData, environment_context);
  }
};

ThriftHiveMetastoreClient.prototype.send_drop_partition_by_name_with_environment_context = function(db_name, tbl_name, part_name, deleteData, environment_context) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_partition_by_name_with_environment_context', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_drop_partition_by_name_with_environment_context_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.part_name = part_name;
  args.deleteData = deleteData;
  args.environment_context = environment_context;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_drop_partition_by_name_with_environment_context = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_partition_by_name_with_environment_context_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('drop_partition_by_name_with_environment_context failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.drop_partitions_req = function(req, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_drop_partitions_req(req);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_drop_partitions_req(req);
  }
};

ThriftHiveMetastoreClient.prototype.send_drop_partitions_req = function(req) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_partitions_req', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_drop_partitions_req_args();
  args.req = req;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_drop_partitions_req = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_partitions_req_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('drop_partitions_req failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partition = function(db_name, tbl_name, part_vals, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_partition(db_name, tbl_name, part_vals);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_partition(db_name, tbl_name, part_vals);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_partition = function(db_name, tbl_name, part_vals) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partition', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_partition_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.part_vals = part_vals;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partition_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partition failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.exchange_partition = function(partitionSpecs, source_db, source_table_name, dest_db, dest_table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_exchange_partition(partitionSpecs, source_db, source_table_name, dest_db, dest_table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_exchange_partition(partitionSpecs, source_db, source_table_name, dest_db, dest_table_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_exchange_partition = function(partitionSpecs, source_db, source_table_name, dest_db, dest_table_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('exchange_partition', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_exchange_partition_args();
  args.partitionSpecs = partitionSpecs;
  args.source_db = source_db;
  args.source_table_name = source_table_name;
  args.dest_db = dest_db;
  args.dest_table_name = dest_table_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_exchange_partition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_exchange_partition_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.o4) {
    return callback(result.o4);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('exchange_partition failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partition_with_auth = function(db_name, tbl_name, part_vals, user_name, group_names, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_partition_with_auth(db_name, tbl_name, part_vals, user_name, group_names);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_partition_with_auth(db_name, tbl_name, part_vals, user_name, group_names);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_partition_with_auth = function(db_name, tbl_name, part_vals, user_name, group_names) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partition_with_auth', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_partition_with_auth_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.part_vals = part_vals;
  args.user_name = user_name;
  args.group_names = group_names;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partition_with_auth = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partition_with_auth_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partition_with_auth failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partition_by_name = function(db_name, tbl_name, part_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_partition_by_name(db_name, tbl_name, part_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_partition_by_name(db_name, tbl_name, part_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_partition_by_name = function(db_name, tbl_name, part_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partition_by_name', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_partition_by_name_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.part_name = part_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partition_by_name = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partition_by_name_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partition_by_name failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partitions = function(db_name, tbl_name, max_parts, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_partitions(db_name, tbl_name, max_parts);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_partitions(db_name, tbl_name, max_parts);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_partitions = function(db_name, tbl_name, max_parts) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partitions', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_partitions_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.max_parts = max_parts;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partitions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partitions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partitions failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partitions_with_auth = function(db_name, tbl_name, max_parts, user_name, group_names, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_partitions_with_auth(db_name, tbl_name, max_parts, user_name, group_names);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_partitions_with_auth(db_name, tbl_name, max_parts, user_name, group_names);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_partitions_with_auth = function(db_name, tbl_name, max_parts, user_name, group_names) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partitions_with_auth', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_partitions_with_auth_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.max_parts = max_parts;
  args.user_name = user_name;
  args.group_names = group_names;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partitions_with_auth = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partitions_with_auth_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partitions_with_auth failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partitions_pspec = function(db_name, tbl_name, max_parts, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_partitions_pspec(db_name, tbl_name, max_parts);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_partitions_pspec(db_name, tbl_name, max_parts);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_partitions_pspec = function(db_name, tbl_name, max_parts) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partitions_pspec', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_partitions_pspec_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.max_parts = max_parts;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partitions_pspec = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partitions_pspec_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partitions_pspec failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partition_names = function(db_name, tbl_name, max_parts, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_partition_names(db_name, tbl_name, max_parts);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_partition_names(db_name, tbl_name, max_parts);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_partition_names = function(db_name, tbl_name, max_parts) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partition_names', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_partition_names_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.max_parts = max_parts;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partition_names = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partition_names_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partition_names failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partitions_ps = function(db_name, tbl_name, part_vals, max_parts, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_partitions_ps(db_name, tbl_name, part_vals, max_parts);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_partitions_ps(db_name, tbl_name, part_vals, max_parts);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_partitions_ps = function(db_name, tbl_name, part_vals, max_parts) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partitions_ps', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_partitions_ps_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.part_vals = part_vals;
  args.max_parts = max_parts;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partitions_ps = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partitions_ps_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partitions_ps failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partitions_ps_with_auth = function(db_name, tbl_name, part_vals, max_parts, user_name, group_names, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_partitions_ps_with_auth(db_name, tbl_name, part_vals, max_parts, user_name, group_names);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_partitions_ps_with_auth(db_name, tbl_name, part_vals, max_parts, user_name, group_names);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_partitions_ps_with_auth = function(db_name, tbl_name, part_vals, max_parts, user_name, group_names) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partitions_ps_with_auth', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_partitions_ps_with_auth_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.part_vals = part_vals;
  args.max_parts = max_parts;
  args.user_name = user_name;
  args.group_names = group_names;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partitions_ps_with_auth = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partitions_ps_with_auth_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partitions_ps_with_auth failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partition_names_ps = function(db_name, tbl_name, part_vals, max_parts, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_partition_names_ps(db_name, tbl_name, part_vals, max_parts);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_partition_names_ps(db_name, tbl_name, part_vals, max_parts);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_partition_names_ps = function(db_name, tbl_name, part_vals, max_parts) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partition_names_ps', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_partition_names_ps_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.part_vals = part_vals;
  args.max_parts = max_parts;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partition_names_ps = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partition_names_ps_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partition_names_ps failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partitions_by_filter = function(db_name, tbl_name, filter, max_parts, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_partitions_by_filter(db_name, tbl_name, filter, max_parts);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_partitions_by_filter(db_name, tbl_name, filter, max_parts);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_partitions_by_filter = function(db_name, tbl_name, filter, max_parts) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partitions_by_filter', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_partitions_by_filter_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.filter = filter;
  args.max_parts = max_parts;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partitions_by_filter = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partitions_by_filter_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partitions_by_filter failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_part_specs_by_filter = function(db_name, tbl_name, filter, max_parts, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_part_specs_by_filter(db_name, tbl_name, filter, max_parts);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_part_specs_by_filter(db_name, tbl_name, filter, max_parts);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_part_specs_by_filter = function(db_name, tbl_name, filter, max_parts) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_part_specs_by_filter', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_part_specs_by_filter_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.filter = filter;
  args.max_parts = max_parts;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_part_specs_by_filter = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_part_specs_by_filter_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_part_specs_by_filter failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partitions_by_expr = function(req, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_partitions_by_expr(req);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_partitions_by_expr(req);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_partitions_by_expr = function(req) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partitions_by_expr', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_partitions_by_expr_args();
  args.req = req;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partitions_by_expr = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partitions_by_expr_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partitions_by_expr failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partitions_by_names = function(db_name, tbl_name, names, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_partitions_by_names(db_name, tbl_name, names);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_partitions_by_names(db_name, tbl_name, names);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_partitions_by_names = function(db_name, tbl_name, names) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partitions_by_names', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_partitions_by_names_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.names = names;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partitions_by_names = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partitions_by_names_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partitions_by_names failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.alter_partition = function(db_name, tbl_name, new_part, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_alter_partition(db_name, tbl_name, new_part);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_alter_partition(db_name, tbl_name, new_part);
  }
};

ThriftHiveMetastoreClient.prototype.send_alter_partition = function(db_name, tbl_name, new_part) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('alter_partition', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_alter_partition_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.new_part = new_part;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_alter_partition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_alter_partition_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.alter_partitions = function(db_name, tbl_name, new_parts, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_alter_partitions(db_name, tbl_name, new_parts);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_alter_partitions(db_name, tbl_name, new_parts);
  }
};

ThriftHiveMetastoreClient.prototype.send_alter_partitions = function(db_name, tbl_name, new_parts) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('alter_partitions', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_alter_partitions_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.new_parts = new_parts;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_alter_partitions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_alter_partitions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.alter_partition_with_environment_context = function(db_name, tbl_name, new_part, environment_context, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_alter_partition_with_environment_context(db_name, tbl_name, new_part, environment_context);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_alter_partition_with_environment_context(db_name, tbl_name, new_part, environment_context);
  }
};

ThriftHiveMetastoreClient.prototype.send_alter_partition_with_environment_context = function(db_name, tbl_name, new_part, environment_context) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('alter_partition_with_environment_context', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_alter_partition_with_environment_context_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.new_part = new_part;
  args.environment_context = environment_context;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_alter_partition_with_environment_context = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_alter_partition_with_environment_context_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.rename_partition = function(db_name, tbl_name, part_vals, new_part, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_rename_partition(db_name, tbl_name, part_vals, new_part);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_rename_partition(db_name, tbl_name, part_vals, new_part);
  }
};

ThriftHiveMetastoreClient.prototype.send_rename_partition = function(db_name, tbl_name, part_vals, new_part) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('rename_partition', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_rename_partition_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.part_vals = part_vals;
  args.new_part = new_part;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_rename_partition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_rename_partition_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.partition_name_has_valid_characters = function(part_vals, throw_exception, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_partition_name_has_valid_characters(part_vals, throw_exception);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_partition_name_has_valid_characters(part_vals, throw_exception);
  }
};

ThriftHiveMetastoreClient.prototype.send_partition_name_has_valid_characters = function(part_vals, throw_exception) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('partition_name_has_valid_characters', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_partition_name_has_valid_characters_args();
  args.part_vals = part_vals;
  args.throw_exception = throw_exception;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_partition_name_has_valid_characters = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_partition_name_has_valid_characters_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('partition_name_has_valid_characters failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_config_value = function(name, defaultValue, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_config_value(name, defaultValue);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_config_value(name, defaultValue);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_config_value = function(name, defaultValue) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_config_value', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_config_value_args();
  args.name = name;
  args.defaultValue = defaultValue;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_config_value = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_config_value_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_config_value failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.partition_name_to_vals = function(part_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_partition_name_to_vals(part_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_partition_name_to_vals(part_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_partition_name_to_vals = function(part_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('partition_name_to_vals', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_partition_name_to_vals_args();
  args.part_name = part_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_partition_name_to_vals = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_partition_name_to_vals_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('partition_name_to_vals failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.partition_name_to_spec = function(part_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_partition_name_to_spec(part_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_partition_name_to_spec(part_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_partition_name_to_spec = function(part_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('partition_name_to_spec', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_partition_name_to_spec_args();
  args.part_name = part_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_partition_name_to_spec = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_partition_name_to_spec_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('partition_name_to_spec failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.markPartitionForEvent = function(db_name, tbl_name, part_vals, eventType, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_markPartitionForEvent(db_name, tbl_name, part_vals, eventType);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_markPartitionForEvent(db_name, tbl_name, part_vals, eventType);
  }
};

ThriftHiveMetastoreClient.prototype.send_markPartitionForEvent = function(db_name, tbl_name, part_vals, eventType) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('markPartitionForEvent', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_markPartitionForEvent_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.part_vals = part_vals;
  args.eventType = eventType;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_markPartitionForEvent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_markPartitionForEvent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.o4) {
    return callback(result.o4);
  }
  if (null !== result.o5) {
    return callback(result.o5);
  }
  if (null !== result.o6) {
    return callback(result.o6);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.isPartitionMarkedForEvent = function(db_name, tbl_name, part_vals, eventType, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isPartitionMarkedForEvent(db_name, tbl_name, part_vals, eventType);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isPartitionMarkedForEvent(db_name, tbl_name, part_vals, eventType);
  }
};

ThriftHiveMetastoreClient.prototype.send_isPartitionMarkedForEvent = function(db_name, tbl_name, part_vals, eventType) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isPartitionMarkedForEvent', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_isPartitionMarkedForEvent_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.part_vals = part_vals;
  args.eventType = eventType;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_isPartitionMarkedForEvent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_isPartitionMarkedForEvent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.o4) {
    return callback(result.o4);
  }
  if (null !== result.o5) {
    return callback(result.o5);
  }
  if (null !== result.o6) {
    return callback(result.o6);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isPartitionMarkedForEvent failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.add_index = function(new_index, index_table, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_add_index(new_index, index_table);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_add_index(new_index, index_table);
  }
};

ThriftHiveMetastoreClient.prototype.send_add_index = function(new_index, index_table) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('add_index', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_add_index_args();
  args.new_index = new_index;
  args.index_table = index_table;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_add_index = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_add_index_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('add_index failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.alter_index = function(dbname, base_tbl_name, idx_name, new_idx, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_alter_index(dbname, base_tbl_name, idx_name, new_idx);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_alter_index(dbname, base_tbl_name, idx_name, new_idx);
  }
};

ThriftHiveMetastoreClient.prototype.send_alter_index = function(dbname, base_tbl_name, idx_name, new_idx) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('alter_index', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_alter_index_args();
  args.dbname = dbname;
  args.base_tbl_name = base_tbl_name;
  args.idx_name = idx_name;
  args.new_idx = new_idx;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_alter_index = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_alter_index_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.drop_index_by_name = function(db_name, tbl_name, index_name, deleteData, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_drop_index_by_name(db_name, tbl_name, index_name, deleteData);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_drop_index_by_name(db_name, tbl_name, index_name, deleteData);
  }
};

ThriftHiveMetastoreClient.prototype.send_drop_index_by_name = function(db_name, tbl_name, index_name, deleteData) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_index_by_name', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_drop_index_by_name_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.index_name = index_name;
  args.deleteData = deleteData;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_drop_index_by_name = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_index_by_name_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('drop_index_by_name failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_index_by_name = function(db_name, tbl_name, index_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_index_by_name(db_name, tbl_name, index_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_index_by_name(db_name, tbl_name, index_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_index_by_name = function(db_name, tbl_name, index_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_index_by_name', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_index_by_name_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.index_name = index_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_index_by_name = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_index_by_name_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_index_by_name failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_indexes = function(db_name, tbl_name, max_indexes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_indexes(db_name, tbl_name, max_indexes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_indexes(db_name, tbl_name, max_indexes);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_indexes = function(db_name, tbl_name, max_indexes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_indexes', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_indexes_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.max_indexes = max_indexes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_indexes = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_indexes_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_indexes failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_index_names = function(db_name, tbl_name, max_indexes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_index_names(db_name, tbl_name, max_indexes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_index_names(db_name, tbl_name, max_indexes);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_index_names = function(db_name, tbl_name, max_indexes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_index_names', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_index_names_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.max_indexes = max_indexes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_index_names = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_index_names_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_index_names failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.update_table_column_statistics = function(stats_obj, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_update_table_column_statistics(stats_obj);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_update_table_column_statistics(stats_obj);
  }
};

ThriftHiveMetastoreClient.prototype.send_update_table_column_statistics = function(stats_obj) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('update_table_column_statistics', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_update_table_column_statistics_args();
  args.stats_obj = stats_obj;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_update_table_column_statistics = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_update_table_column_statistics_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.o4) {
    return callback(result.o4);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('update_table_column_statistics failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.update_partition_column_statistics = function(stats_obj, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_update_partition_column_statistics(stats_obj);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_update_partition_column_statistics(stats_obj);
  }
};

ThriftHiveMetastoreClient.prototype.send_update_partition_column_statistics = function(stats_obj) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('update_partition_column_statistics', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_update_partition_column_statistics_args();
  args.stats_obj = stats_obj;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_update_partition_column_statistics = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_update_partition_column_statistics_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.o4) {
    return callback(result.o4);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('update_partition_column_statistics failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_table_column_statistics = function(db_name, tbl_name, col_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_table_column_statistics(db_name, tbl_name, col_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_table_column_statistics(db_name, tbl_name, col_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_table_column_statistics = function(db_name, tbl_name, col_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_table_column_statistics', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_table_column_statistics_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.col_name = col_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_table_column_statistics = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_table_column_statistics_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.o4) {
    return callback(result.o4);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_table_column_statistics failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partition_column_statistics = function(db_name, tbl_name, part_name, col_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_partition_column_statistics(db_name, tbl_name, part_name, col_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_partition_column_statistics(db_name, tbl_name, part_name, col_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_partition_column_statistics = function(db_name, tbl_name, part_name, col_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partition_column_statistics', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_partition_column_statistics_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.part_name = part_name;
  args.col_name = col_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partition_column_statistics = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partition_column_statistics_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.o4) {
    return callback(result.o4);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partition_column_statistics failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_table_statistics_req = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_table_statistics_req(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_table_statistics_req(request);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_table_statistics_req = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_table_statistics_req', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_table_statistics_req_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_table_statistics_req = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_table_statistics_req_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_table_statistics_req failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partitions_statistics_req = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_partitions_statistics_req(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_partitions_statistics_req(request);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_partitions_statistics_req = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partitions_statistics_req', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_partitions_statistics_req_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partitions_statistics_req = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partitions_statistics_req_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partitions_statistics_req failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_aggr_stats_for = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_aggr_stats_for(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_aggr_stats_for(request);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_aggr_stats_for = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_aggr_stats_for', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_aggr_stats_for_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_aggr_stats_for = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_aggr_stats_for_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_aggr_stats_for failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.set_aggr_stats_for = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_aggr_stats_for(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_aggr_stats_for(request);
  }
};

ThriftHiveMetastoreClient.prototype.send_set_aggr_stats_for = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('set_aggr_stats_for', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_set_aggr_stats_for_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_set_aggr_stats_for = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_set_aggr_stats_for_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.o4) {
    return callback(result.o4);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('set_aggr_stats_for failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.delete_partition_column_statistics = function(db_name, tbl_name, part_name, col_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_delete_partition_column_statistics(db_name, tbl_name, part_name, col_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_delete_partition_column_statistics(db_name, tbl_name, part_name, col_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_delete_partition_column_statistics = function(db_name, tbl_name, part_name, col_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('delete_partition_column_statistics', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_delete_partition_column_statistics_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.part_name = part_name;
  args.col_name = col_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_delete_partition_column_statistics = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_delete_partition_column_statistics_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.o4) {
    return callback(result.o4);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('delete_partition_column_statistics failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.delete_table_column_statistics = function(db_name, tbl_name, col_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_delete_table_column_statistics(db_name, tbl_name, col_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_delete_table_column_statistics(db_name, tbl_name, col_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_delete_table_column_statistics = function(db_name, tbl_name, col_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('delete_table_column_statistics', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_delete_table_column_statistics_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.col_name = col_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_delete_table_column_statistics = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_delete_table_column_statistics_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.o4) {
    return callback(result.o4);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('delete_table_column_statistics failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.create_function = function(func, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_function(func);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_function(func);
  }
};

ThriftHiveMetastoreClient.prototype.send_create_function = function(func) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_function', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_create_function_args();
  args.func = func;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_create_function = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_create_function_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.o4) {
    return callback(result.o4);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.drop_function = function(dbName, funcName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_drop_function(dbName, funcName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_drop_function(dbName, funcName);
  }
};

ThriftHiveMetastoreClient.prototype.send_drop_function = function(dbName, funcName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_function', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_drop_function_args();
  args.dbName = dbName;
  args.funcName = funcName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_drop_function = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_function_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.alter_function = function(dbName, funcName, newFunc, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_alter_function(dbName, funcName, newFunc);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_alter_function(dbName, funcName, newFunc);
  }
};

ThriftHiveMetastoreClient.prototype.send_alter_function = function(dbName, funcName, newFunc) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('alter_function', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_alter_function_args();
  args.dbName = dbName;
  args.funcName = funcName;
  args.newFunc = newFunc;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_alter_function = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_alter_function_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.get_functions = function(dbName, pattern, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_functions(dbName, pattern);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_functions(dbName, pattern);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_functions = function(dbName, pattern) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_functions', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_functions_args();
  args.dbName = dbName;
  args.pattern = pattern;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_functions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_functions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_functions failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_function = function(dbName, funcName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_function(dbName, funcName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_function(dbName, funcName);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_function = function(dbName, funcName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_function', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_function_args();
  args.dbName = dbName;
  args.funcName = funcName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_function = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_function_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_function failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.create_role = function(role, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_role(role);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_role(role);
  }
};

ThriftHiveMetastoreClient.prototype.send_create_role = function(role) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_role', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_create_role_args();
  args.role = role;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_create_role = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_create_role_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('create_role failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.drop_role = function(role_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_drop_role(role_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_drop_role(role_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_drop_role = function(role_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_role', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_drop_role_args();
  args.role_name = role_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_drop_role = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_role_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('drop_role failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_role_names = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_role_names();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_role_names();
  }
};

ThriftHiveMetastoreClient.prototype.send_get_role_names = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_role_names', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_role_names_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_role_names = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_role_names_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_role_names failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.grant_role = function(role_name, principal_name, principal_type, grantor, grantorType, grant_option, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_grant_role(role_name, principal_name, principal_type, grantor, grantorType, grant_option);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_grant_role(role_name, principal_name, principal_type, grantor, grantorType, grant_option);
  }
};

ThriftHiveMetastoreClient.prototype.send_grant_role = function(role_name, principal_name, principal_type, grantor, grantorType, grant_option) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('grant_role', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_grant_role_args();
  args.role_name = role_name;
  args.principal_name = principal_name;
  args.principal_type = principal_type;
  args.grantor = grantor;
  args.grantorType = grantorType;
  args.grant_option = grant_option;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_grant_role = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_grant_role_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('grant_role failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.revoke_role = function(role_name, principal_name, principal_type, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_revoke_role(role_name, principal_name, principal_type);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_revoke_role(role_name, principal_name, principal_type);
  }
};

ThriftHiveMetastoreClient.prototype.send_revoke_role = function(role_name, principal_name, principal_type) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('revoke_role', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_revoke_role_args();
  args.role_name = role_name;
  args.principal_name = principal_name;
  args.principal_type = principal_type;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_revoke_role = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_revoke_role_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('revoke_role failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.list_roles = function(principal_name, principal_type, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_list_roles(principal_name, principal_type);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_list_roles(principal_name, principal_type);
  }
};

ThriftHiveMetastoreClient.prototype.send_list_roles = function(principal_name, principal_type) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('list_roles', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_list_roles_args();
  args.principal_name = principal_name;
  args.principal_type = principal_type;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_list_roles = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_list_roles_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('list_roles failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.grant_revoke_role = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_grant_revoke_role(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_grant_revoke_role(request);
  }
};

ThriftHiveMetastoreClient.prototype.send_grant_revoke_role = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('grant_revoke_role', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_grant_revoke_role_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_grant_revoke_role = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_grant_revoke_role_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('grant_revoke_role failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_principals_in_role = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_principals_in_role(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_principals_in_role(request);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_principals_in_role = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_principals_in_role', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_principals_in_role_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_principals_in_role = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_principals_in_role_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_principals_in_role failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_role_grants_for_principal = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_role_grants_for_principal(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_role_grants_for_principal(request);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_role_grants_for_principal = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_role_grants_for_principal', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_role_grants_for_principal_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_role_grants_for_principal = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_role_grants_for_principal_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_role_grants_for_principal failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_privilege_set = function(hiveObject, user_name, group_names, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_privilege_set(hiveObject, user_name, group_names);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_privilege_set(hiveObject, user_name, group_names);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_privilege_set = function(hiveObject, user_name, group_names) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_privilege_set', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_privilege_set_args();
  args.hiveObject = hiveObject;
  args.user_name = user_name;
  args.group_names = group_names;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_privilege_set = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_privilege_set_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_privilege_set failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.list_privileges = function(principal_name, principal_type, hiveObject, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_list_privileges(principal_name, principal_type, hiveObject);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_list_privileges(principal_name, principal_type, hiveObject);
  }
};

ThriftHiveMetastoreClient.prototype.send_list_privileges = function(principal_name, principal_type, hiveObject) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('list_privileges', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_list_privileges_args();
  args.principal_name = principal_name;
  args.principal_type = principal_type;
  args.hiveObject = hiveObject;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_list_privileges = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_list_privileges_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('list_privileges failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.grant_privileges = function(privileges, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_grant_privileges(privileges);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_grant_privileges(privileges);
  }
};

ThriftHiveMetastoreClient.prototype.send_grant_privileges = function(privileges) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('grant_privileges', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_grant_privileges_args();
  args.privileges = privileges;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_grant_privileges = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_grant_privileges_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('grant_privileges failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.revoke_privileges = function(privileges, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_revoke_privileges(privileges);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_revoke_privileges(privileges);
  }
};

ThriftHiveMetastoreClient.prototype.send_revoke_privileges = function(privileges) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('revoke_privileges', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_revoke_privileges_args();
  args.privileges = privileges;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_revoke_privileges = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_revoke_privileges_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('revoke_privileges failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.grant_revoke_privileges = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_grant_revoke_privileges(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_grant_revoke_privileges(request);
  }
};

ThriftHiveMetastoreClient.prototype.send_grant_revoke_privileges = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('grant_revoke_privileges', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_grant_revoke_privileges_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_grant_revoke_privileges = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_grant_revoke_privileges_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('grant_revoke_privileges failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.set_ugi = function(user_name, group_names, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_ugi(user_name, group_names);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_ugi(user_name, group_names);
  }
};

ThriftHiveMetastoreClient.prototype.send_set_ugi = function(user_name, group_names) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('set_ugi', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_set_ugi_args();
  args.user_name = user_name;
  args.group_names = group_names;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_set_ugi = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_set_ugi_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('set_ugi failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_delegation_token = function(token_owner, renewer_kerberos_principal_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_delegation_token(token_owner, renewer_kerberos_principal_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_delegation_token(token_owner, renewer_kerberos_principal_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_delegation_token = function(token_owner, renewer_kerberos_principal_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_delegation_token', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_delegation_token_args();
  args.token_owner = token_owner;
  args.renewer_kerberos_principal_name = renewer_kerberos_principal_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_delegation_token = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_delegation_token_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_delegation_token failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.renew_delegation_token = function(token_str_form, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_renew_delegation_token(token_str_form);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_renew_delegation_token(token_str_form);
  }
};

ThriftHiveMetastoreClient.prototype.send_renew_delegation_token = function(token_str_form) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('renew_delegation_token', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_renew_delegation_token_args();
  args.token_str_form = token_str_form;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_renew_delegation_token = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_renew_delegation_token_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('renew_delegation_token failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.cancel_delegation_token = function(token_str_form, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_cancel_delegation_token(token_str_form);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_cancel_delegation_token(token_str_form);
  }
};

ThriftHiveMetastoreClient.prototype.send_cancel_delegation_token = function(token_str_form) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('cancel_delegation_token', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_cancel_delegation_token_args();
  args.token_str_form = token_str_form;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_cancel_delegation_token = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_cancel_delegation_token_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.get_open_txns = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_open_txns();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_open_txns();
  }
};

ThriftHiveMetastoreClient.prototype.send_get_open_txns = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_open_txns', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_open_txns_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_open_txns = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_open_txns_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_open_txns failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_open_txns_info = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_open_txns_info();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_open_txns_info();
  }
};

ThriftHiveMetastoreClient.prototype.send_get_open_txns_info = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_open_txns_info', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_open_txns_info_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_open_txns_info = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_open_txns_info_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_open_txns_info failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.open_txns = function(rqst, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_open_txns(rqst);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_open_txns(rqst);
  }
};

ThriftHiveMetastoreClient.prototype.send_open_txns = function(rqst) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('open_txns', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_open_txns_args();
  args.rqst = rqst;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_open_txns = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_open_txns_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('open_txns failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.abort_txn = function(rqst, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_abort_txn(rqst);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_abort_txn(rqst);
  }
};

ThriftHiveMetastoreClient.prototype.send_abort_txn = function(rqst) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('abort_txn', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_abort_txn_args();
  args.rqst = rqst;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_abort_txn = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_abort_txn_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.commit_txn = function(rqst, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_commit_txn(rqst);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_commit_txn(rqst);
  }
};

ThriftHiveMetastoreClient.prototype.send_commit_txn = function(rqst) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('commit_txn', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_commit_txn_args();
  args.rqst = rqst;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_commit_txn = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_commit_txn_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.lock = function(rqst, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_lock(rqst);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_lock(rqst);
  }
};

ThriftHiveMetastoreClient.prototype.send_lock = function(rqst) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('lock', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_lock_args();
  args.rqst = rqst;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_lock = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_lock_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('lock failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.check_lock = function(rqst, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_check_lock(rqst);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_check_lock(rqst);
  }
};

ThriftHiveMetastoreClient.prototype.send_check_lock = function(rqst) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('check_lock', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_check_lock_args();
  args.rqst = rqst;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_check_lock = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_check_lock_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('check_lock failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.unlock = function(rqst, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unlock(rqst);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unlock(rqst);
  }
};

ThriftHiveMetastoreClient.prototype.send_unlock = function(rqst) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('unlock', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_unlock_args();
  args.rqst = rqst;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_unlock = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_unlock_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.show_locks = function(rqst, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_show_locks(rqst);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_show_locks(rqst);
  }
};

ThriftHiveMetastoreClient.prototype.send_show_locks = function(rqst) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('show_locks', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_show_locks_args();
  args.rqst = rqst;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_show_locks = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_show_locks_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('show_locks failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.heartbeat = function(ids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_heartbeat(ids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_heartbeat(ids);
  }
};

ThriftHiveMetastoreClient.prototype.send_heartbeat = function(ids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('heartbeat', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_heartbeat_args();
  args.ids = ids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_heartbeat = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_heartbeat_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.heartbeat_txn_range = function(txns, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_heartbeat_txn_range(txns);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_heartbeat_txn_range(txns);
  }
};

ThriftHiveMetastoreClient.prototype.send_heartbeat_txn_range = function(txns) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('heartbeat_txn_range', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_heartbeat_txn_range_args();
  args.txns = txns;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_heartbeat_txn_range = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_heartbeat_txn_range_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('heartbeat_txn_range failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.compact = function(rqst, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_compact(rqst);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_compact(rqst);
  }
};

ThriftHiveMetastoreClient.prototype.send_compact = function(rqst) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('compact', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_compact_args();
  args.rqst = rqst;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_compact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_compact_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
ThriftHiveMetastoreClient.prototype.show_compact = function(rqst, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_show_compact(rqst);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_show_compact(rqst);
  }
};

ThriftHiveMetastoreClient.prototype.send_show_compact = function(rqst) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('show_compact', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_show_compact_args();
  args.rqst = rqst;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_show_compact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_show_compact_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('show_compact failed: unknown result');
};
ThriftHiveMetastoreProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
Thrift.inherits(ThriftHiveMetastoreProcessor, FacebookServiceProcessor)
ThriftHiveMetastoreProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

ThriftHiveMetastoreProcessor.prototype.process_getMetaConf = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_getMetaConf_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getMetaConf.length === 1) {
    Q.fcall(this._handler.getMetaConf, args.key)
      .then(function(result) {
        var result = new ThriftHiveMetastore_getMetaConf_result({success: result});
        output.writeMessageBegin("getMetaConf", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_getMetaConf_result(err);
        output.writeMessageBegin("getMetaConf", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getMetaConf(args.key,  function (err, result) {
      var result = new ThriftHiveMetastore_getMetaConf_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getMetaConf", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_setMetaConf = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_setMetaConf_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setMetaConf.length === 2) {
    Q.fcall(this._handler.setMetaConf, args.key, args.value)
      .then(function(result) {
        var result = new ThriftHiveMetastore_setMetaConf_result({success: result});
        output.writeMessageBegin("setMetaConf", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_setMetaConf_result(err);
        output.writeMessageBegin("setMetaConf", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setMetaConf(args.key, args.value,  function (err, result) {
      var result = new ThriftHiveMetastore_setMetaConf_result((err != null ? err : {success: result}));
      output.writeMessageBegin("setMetaConf", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_create_database = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_create_database_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_database.length === 1) {
    Q.fcall(this._handler.create_database, args.database)
      .then(function(result) {
        var result = new ThriftHiveMetastore_create_database_result({success: result});
        output.writeMessageBegin("create_database", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_create_database_result(err);
        output.writeMessageBegin("create_database", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.create_database(args.database,  function (err, result) {
      var result = new ThriftHiveMetastore_create_database_result((err != null ? err : {success: result}));
      output.writeMessageBegin("create_database", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_database = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_database_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_database.length === 1) {
    Q.fcall(this._handler.get_database, args.name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_database_result({success: result});
        output.writeMessageBegin("get_database", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_database_result(err);
        output.writeMessageBegin("get_database", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_database(args.name,  function (err, result) {
      var result = new ThriftHiveMetastore_get_database_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_database", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_drop_database = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_database_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.drop_database.length === 3) {
    Q.fcall(this._handler.drop_database, args.name, args.deleteData, args.cascade)
      .then(function(result) {
        var result = new ThriftHiveMetastore_drop_database_result({success: result});
        output.writeMessageBegin("drop_database", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_drop_database_result(err);
        output.writeMessageBegin("drop_database", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.drop_database(args.name, args.deleteData, args.cascade,  function (err, result) {
      var result = new ThriftHiveMetastore_drop_database_result((err != null ? err : {success: result}));
      output.writeMessageBegin("drop_database", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_databases = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_databases_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_databases.length === 1) {
    Q.fcall(this._handler.get_databases, args.pattern)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_databases_result({success: result});
        output.writeMessageBegin("get_databases", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_databases_result(err);
        output.writeMessageBegin("get_databases", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_databases(args.pattern,  function (err, result) {
      var result = new ThriftHiveMetastore_get_databases_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_databases", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_all_databases = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_all_databases_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_all_databases.length === 0) {
    Q.fcall(this._handler.get_all_databases)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_all_databases_result({success: result});
        output.writeMessageBegin("get_all_databases", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_all_databases_result(err);
        output.writeMessageBegin("get_all_databases", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_all_databases( function (err, result) {
      var result = new ThriftHiveMetastore_get_all_databases_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_all_databases", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_alter_database = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_database_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.alter_database.length === 2) {
    Q.fcall(this._handler.alter_database, args.dbname, args.db)
      .then(function(result) {
        var result = new ThriftHiveMetastore_alter_database_result({success: result});
        output.writeMessageBegin("alter_database", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_alter_database_result(err);
        output.writeMessageBegin("alter_database", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.alter_database(args.dbname, args.db,  function (err, result) {
      var result = new ThriftHiveMetastore_alter_database_result((err != null ? err : {success: result}));
      output.writeMessageBegin("alter_database", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_type = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_type_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_type.length === 1) {
    Q.fcall(this._handler.get_type, args.name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_type_result({success: result});
        output.writeMessageBegin("get_type", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_type_result(err);
        output.writeMessageBegin("get_type", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_type(args.name,  function (err, result) {
      var result = new ThriftHiveMetastore_get_type_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_type", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_create_type = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_create_type_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_type.length === 1) {
    Q.fcall(this._handler.create_type, args.type)
      .then(function(result) {
        var result = new ThriftHiveMetastore_create_type_result({success: result});
        output.writeMessageBegin("create_type", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_create_type_result(err);
        output.writeMessageBegin("create_type", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.create_type(args.type,  function (err, result) {
      var result = new ThriftHiveMetastore_create_type_result((err != null ? err : {success: result}));
      output.writeMessageBegin("create_type", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_drop_type = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_type_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.drop_type.length === 1) {
    Q.fcall(this._handler.drop_type, args.type)
      .then(function(result) {
        var result = new ThriftHiveMetastore_drop_type_result({success: result});
        output.writeMessageBegin("drop_type", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_drop_type_result(err);
        output.writeMessageBegin("drop_type", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.drop_type(args.type,  function (err, result) {
      var result = new ThriftHiveMetastore_drop_type_result((err != null ? err : {success: result}));
      output.writeMessageBegin("drop_type", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_type_all = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_type_all_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_type_all.length === 1) {
    Q.fcall(this._handler.get_type_all, args.name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_type_all_result({success: result});
        output.writeMessageBegin("get_type_all", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_type_all_result(err);
        output.writeMessageBegin("get_type_all", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_type_all(args.name,  function (err, result) {
      var result = new ThriftHiveMetastore_get_type_all_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_type_all", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_fields = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_fields_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_fields.length === 2) {
    Q.fcall(this._handler.get_fields, args.db_name, args.table_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_fields_result({success: result});
        output.writeMessageBegin("get_fields", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_fields_result(err);
        output.writeMessageBegin("get_fields", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_fields(args.db_name, args.table_name,  function (err, result) {
      var result = new ThriftHiveMetastore_get_fields_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_fields", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_schema = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_schema_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_schema.length === 2) {
    Q.fcall(this._handler.get_schema, args.db_name, args.table_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_schema_result({success: result});
        output.writeMessageBegin("get_schema", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_schema_result(err);
        output.writeMessageBegin("get_schema", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_schema(args.db_name, args.table_name,  function (err, result) {
      var result = new ThriftHiveMetastore_get_schema_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_schema", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_create_table = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_create_table_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_table.length === 1) {
    Q.fcall(this._handler.create_table, args.tbl)
      .then(function(result) {
        var result = new ThriftHiveMetastore_create_table_result({success: result});
        output.writeMessageBegin("create_table", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_create_table_result(err);
        output.writeMessageBegin("create_table", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.create_table(args.tbl,  function (err, result) {
      var result = new ThriftHiveMetastore_create_table_result((err != null ? err : {success: result}));
      output.writeMessageBegin("create_table", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_create_table_with_environment_context = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_create_table_with_environment_context_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_table_with_environment_context.length === 2) {
    Q.fcall(this._handler.create_table_with_environment_context, args.tbl, args.environment_context)
      .then(function(result) {
        var result = new ThriftHiveMetastore_create_table_with_environment_context_result({success: result});
        output.writeMessageBegin("create_table_with_environment_context", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_create_table_with_environment_context_result(err);
        output.writeMessageBegin("create_table_with_environment_context", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.create_table_with_environment_context(args.tbl, args.environment_context,  function (err, result) {
      var result = new ThriftHiveMetastore_create_table_with_environment_context_result((err != null ? err : {success: result}));
      output.writeMessageBegin("create_table_with_environment_context", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_drop_table = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_table_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.drop_table.length === 3) {
    Q.fcall(this._handler.drop_table, args.dbname, args.name, args.deleteData)
      .then(function(result) {
        var result = new ThriftHiveMetastore_drop_table_result({success: result});
        output.writeMessageBegin("drop_table", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_drop_table_result(err);
        output.writeMessageBegin("drop_table", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.drop_table(args.dbname, args.name, args.deleteData,  function (err, result) {
      var result = new ThriftHiveMetastore_drop_table_result((err != null ? err : {success: result}));
      output.writeMessageBegin("drop_table", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_drop_table_with_environment_context = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_table_with_environment_context_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.drop_table_with_environment_context.length === 4) {
    Q.fcall(this._handler.drop_table_with_environment_context, args.dbname, args.name, args.deleteData, args.environment_context)
      .then(function(result) {
        var result = new ThriftHiveMetastore_drop_table_with_environment_context_result({success: result});
        output.writeMessageBegin("drop_table_with_environment_context", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_drop_table_with_environment_context_result(err);
        output.writeMessageBegin("drop_table_with_environment_context", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.drop_table_with_environment_context(args.dbname, args.name, args.deleteData, args.environment_context,  function (err, result) {
      var result = new ThriftHiveMetastore_drop_table_with_environment_context_result((err != null ? err : {success: result}));
      output.writeMessageBegin("drop_table_with_environment_context", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_tables = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_tables_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_tables.length === 2) {
    Q.fcall(this._handler.get_tables, args.db_name, args.pattern)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_tables_result({success: result});
        output.writeMessageBegin("get_tables", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_tables_result(err);
        output.writeMessageBegin("get_tables", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_tables(args.db_name, args.pattern,  function (err, result) {
      var result = new ThriftHiveMetastore_get_tables_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_tables", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_all_tables = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_all_tables_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_all_tables.length === 1) {
    Q.fcall(this._handler.get_all_tables, args.db_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_all_tables_result({success: result});
        output.writeMessageBegin("get_all_tables", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_all_tables_result(err);
        output.writeMessageBegin("get_all_tables", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_all_tables(args.db_name,  function (err, result) {
      var result = new ThriftHiveMetastore_get_all_tables_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_all_tables", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_table = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_table_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_table.length === 2) {
    Q.fcall(this._handler.get_table, args.dbname, args.tbl_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_table_result({success: result});
        output.writeMessageBegin("get_table", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_table_result(err);
        output.writeMessageBegin("get_table", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_table(args.dbname, args.tbl_name,  function (err, result) {
      var result = new ThriftHiveMetastore_get_table_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_table", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_table_objects_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_table_objects_by_name_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_table_objects_by_name.length === 2) {
    Q.fcall(this._handler.get_table_objects_by_name, args.dbname, args.tbl_names)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_table_objects_by_name_result({success: result});
        output.writeMessageBegin("get_table_objects_by_name", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_table_objects_by_name_result(err);
        output.writeMessageBegin("get_table_objects_by_name", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_table_objects_by_name(args.dbname, args.tbl_names,  function (err, result) {
      var result = new ThriftHiveMetastore_get_table_objects_by_name_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_table_objects_by_name", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_table_names_by_filter = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_table_names_by_filter_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_table_names_by_filter.length === 3) {
    Q.fcall(this._handler.get_table_names_by_filter, args.dbname, args.filter, args.max_tables)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_table_names_by_filter_result({success: result});
        output.writeMessageBegin("get_table_names_by_filter", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_table_names_by_filter_result(err);
        output.writeMessageBegin("get_table_names_by_filter", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_table_names_by_filter(args.dbname, args.filter, args.max_tables,  function (err, result) {
      var result = new ThriftHiveMetastore_get_table_names_by_filter_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_table_names_by_filter", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_alter_table = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_table_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.alter_table.length === 3) {
    Q.fcall(this._handler.alter_table, args.dbname, args.tbl_name, args.new_tbl)
      .then(function(result) {
        var result = new ThriftHiveMetastore_alter_table_result({success: result});
        output.writeMessageBegin("alter_table", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_alter_table_result(err);
        output.writeMessageBegin("alter_table", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.alter_table(args.dbname, args.tbl_name, args.new_tbl,  function (err, result) {
      var result = new ThriftHiveMetastore_alter_table_result((err != null ? err : {success: result}));
      output.writeMessageBegin("alter_table", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_alter_table_with_environment_context = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_table_with_environment_context_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.alter_table_with_environment_context.length === 4) {
    Q.fcall(this._handler.alter_table_with_environment_context, args.dbname, args.tbl_name, args.new_tbl, args.environment_context)
      .then(function(result) {
        var result = new ThriftHiveMetastore_alter_table_with_environment_context_result({success: result});
        output.writeMessageBegin("alter_table_with_environment_context", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_alter_table_with_environment_context_result(err);
        output.writeMessageBegin("alter_table_with_environment_context", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.alter_table_with_environment_context(args.dbname, args.tbl_name, args.new_tbl, args.environment_context,  function (err, result) {
      var result = new ThriftHiveMetastore_alter_table_with_environment_context_result((err != null ? err : {success: result}));
      output.writeMessageBegin("alter_table_with_environment_context", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_add_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_add_partition_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.add_partition.length === 1) {
    Q.fcall(this._handler.add_partition, args.new_part)
      .then(function(result) {
        var result = new ThriftHiveMetastore_add_partition_result({success: result});
        output.writeMessageBegin("add_partition", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_add_partition_result(err);
        output.writeMessageBegin("add_partition", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.add_partition(args.new_part,  function (err, result) {
      var result = new ThriftHiveMetastore_add_partition_result((err != null ? err : {success: result}));
      output.writeMessageBegin("add_partition", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_add_partition_with_environment_context = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_add_partition_with_environment_context_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.add_partition_with_environment_context.length === 2) {
    Q.fcall(this._handler.add_partition_with_environment_context, args.new_part, args.environment_context)
      .then(function(result) {
        var result = new ThriftHiveMetastore_add_partition_with_environment_context_result({success: result});
        output.writeMessageBegin("add_partition_with_environment_context", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_add_partition_with_environment_context_result(err);
        output.writeMessageBegin("add_partition_with_environment_context", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.add_partition_with_environment_context(args.new_part, args.environment_context,  function (err, result) {
      var result = new ThriftHiveMetastore_add_partition_with_environment_context_result((err != null ? err : {success: result}));
      output.writeMessageBegin("add_partition_with_environment_context", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_add_partitions = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_add_partitions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.add_partitions.length === 1) {
    Q.fcall(this._handler.add_partitions, args.new_parts)
      .then(function(result) {
        var result = new ThriftHiveMetastore_add_partitions_result({success: result});
        output.writeMessageBegin("add_partitions", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_add_partitions_result(err);
        output.writeMessageBegin("add_partitions", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.add_partitions(args.new_parts,  function (err, result) {
      var result = new ThriftHiveMetastore_add_partitions_result((err != null ? err : {success: result}));
      output.writeMessageBegin("add_partitions", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_add_partitions_pspec = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_add_partitions_pspec_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.add_partitions_pspec.length === 1) {
    Q.fcall(this._handler.add_partitions_pspec, args.new_parts)
      .then(function(result) {
        var result = new ThriftHiveMetastore_add_partitions_pspec_result({success: result});
        output.writeMessageBegin("add_partitions_pspec", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_add_partitions_pspec_result(err);
        output.writeMessageBegin("add_partitions_pspec", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.add_partitions_pspec(args.new_parts,  function (err, result) {
      var result = new ThriftHiveMetastore_add_partitions_pspec_result((err != null ? err : {success: result}));
      output.writeMessageBegin("add_partitions_pspec", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_append_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_append_partition_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.append_partition.length === 3) {
    Q.fcall(this._handler.append_partition, args.db_name, args.tbl_name, args.part_vals)
      .then(function(result) {
        var result = new ThriftHiveMetastore_append_partition_result({success: result});
        output.writeMessageBegin("append_partition", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_append_partition_result(err);
        output.writeMessageBegin("append_partition", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.append_partition(args.db_name, args.tbl_name, args.part_vals,  function (err, result) {
      var result = new ThriftHiveMetastore_append_partition_result((err != null ? err : {success: result}));
      output.writeMessageBegin("append_partition", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_add_partitions_req = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_add_partitions_req_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.add_partitions_req.length === 1) {
    Q.fcall(this._handler.add_partitions_req, args.request)
      .then(function(result) {
        var result = new ThriftHiveMetastore_add_partitions_req_result({success: result});
        output.writeMessageBegin("add_partitions_req", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_add_partitions_req_result(err);
        output.writeMessageBegin("add_partitions_req", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.add_partitions_req(args.request,  function (err, result) {
      var result = new ThriftHiveMetastore_add_partitions_req_result((err != null ? err : {success: result}));
      output.writeMessageBegin("add_partitions_req", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_append_partition_with_environment_context = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_append_partition_with_environment_context_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.append_partition_with_environment_context.length === 4) {
    Q.fcall(this._handler.append_partition_with_environment_context, args.db_name, args.tbl_name, args.part_vals, args.environment_context)
      .then(function(result) {
        var result = new ThriftHiveMetastore_append_partition_with_environment_context_result({success: result});
        output.writeMessageBegin("append_partition_with_environment_context", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_append_partition_with_environment_context_result(err);
        output.writeMessageBegin("append_partition_with_environment_context", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.append_partition_with_environment_context(args.db_name, args.tbl_name, args.part_vals, args.environment_context,  function (err, result) {
      var result = new ThriftHiveMetastore_append_partition_with_environment_context_result((err != null ? err : {success: result}));
      output.writeMessageBegin("append_partition_with_environment_context", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_append_partition_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_append_partition_by_name_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.append_partition_by_name.length === 3) {
    Q.fcall(this._handler.append_partition_by_name, args.db_name, args.tbl_name, args.part_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_append_partition_by_name_result({success: result});
        output.writeMessageBegin("append_partition_by_name", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_append_partition_by_name_result(err);
        output.writeMessageBegin("append_partition_by_name", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.append_partition_by_name(args.db_name, args.tbl_name, args.part_name,  function (err, result) {
      var result = new ThriftHiveMetastore_append_partition_by_name_result((err != null ? err : {success: result}));
      output.writeMessageBegin("append_partition_by_name", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_append_partition_by_name_with_environment_context = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_append_partition_by_name_with_environment_context_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.append_partition_by_name_with_environment_context.length === 4) {
    Q.fcall(this._handler.append_partition_by_name_with_environment_context, args.db_name, args.tbl_name, args.part_name, args.environment_context)
      .then(function(result) {
        var result = new ThriftHiveMetastore_append_partition_by_name_with_environment_context_result({success: result});
        output.writeMessageBegin("append_partition_by_name_with_environment_context", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_append_partition_by_name_with_environment_context_result(err);
        output.writeMessageBegin("append_partition_by_name_with_environment_context", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.append_partition_by_name_with_environment_context(args.db_name, args.tbl_name, args.part_name, args.environment_context,  function (err, result) {
      var result = new ThriftHiveMetastore_append_partition_by_name_with_environment_context_result((err != null ? err : {success: result}));
      output.writeMessageBegin("append_partition_by_name_with_environment_context", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_drop_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_partition_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.drop_partition.length === 4) {
    Q.fcall(this._handler.drop_partition, args.db_name, args.tbl_name, args.part_vals, args.deleteData)
      .then(function(result) {
        var result = new ThriftHiveMetastore_drop_partition_result({success: result});
        output.writeMessageBegin("drop_partition", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_drop_partition_result(err);
        output.writeMessageBegin("drop_partition", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.drop_partition(args.db_name, args.tbl_name, args.part_vals, args.deleteData,  function (err, result) {
      var result = new ThriftHiveMetastore_drop_partition_result((err != null ? err : {success: result}));
      output.writeMessageBegin("drop_partition", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_drop_partition_with_environment_context = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_partition_with_environment_context_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.drop_partition_with_environment_context.length === 5) {
    Q.fcall(this._handler.drop_partition_with_environment_context, args.db_name, args.tbl_name, args.part_vals, args.deleteData, args.environment_context)
      .then(function(result) {
        var result = new ThriftHiveMetastore_drop_partition_with_environment_context_result({success: result});
        output.writeMessageBegin("drop_partition_with_environment_context", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_drop_partition_with_environment_context_result(err);
        output.writeMessageBegin("drop_partition_with_environment_context", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.drop_partition_with_environment_context(args.db_name, args.tbl_name, args.part_vals, args.deleteData, args.environment_context,  function (err, result) {
      var result = new ThriftHiveMetastore_drop_partition_with_environment_context_result((err != null ? err : {success: result}));
      output.writeMessageBegin("drop_partition_with_environment_context", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_drop_partition_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_partition_by_name_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.drop_partition_by_name.length === 4) {
    Q.fcall(this._handler.drop_partition_by_name, args.db_name, args.tbl_name, args.part_name, args.deleteData)
      .then(function(result) {
        var result = new ThriftHiveMetastore_drop_partition_by_name_result({success: result});
        output.writeMessageBegin("drop_partition_by_name", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_drop_partition_by_name_result(err);
        output.writeMessageBegin("drop_partition_by_name", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.drop_partition_by_name(args.db_name, args.tbl_name, args.part_name, args.deleteData,  function (err, result) {
      var result = new ThriftHiveMetastore_drop_partition_by_name_result((err != null ? err : {success: result}));
      output.writeMessageBegin("drop_partition_by_name", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_drop_partition_by_name_with_environment_context = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_partition_by_name_with_environment_context_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.drop_partition_by_name_with_environment_context.length === 5) {
    Q.fcall(this._handler.drop_partition_by_name_with_environment_context, args.db_name, args.tbl_name, args.part_name, args.deleteData, args.environment_context)
      .then(function(result) {
        var result = new ThriftHiveMetastore_drop_partition_by_name_with_environment_context_result({success: result});
        output.writeMessageBegin("drop_partition_by_name_with_environment_context", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_drop_partition_by_name_with_environment_context_result(err);
        output.writeMessageBegin("drop_partition_by_name_with_environment_context", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.drop_partition_by_name_with_environment_context(args.db_name, args.tbl_name, args.part_name, args.deleteData, args.environment_context,  function (err, result) {
      var result = new ThriftHiveMetastore_drop_partition_by_name_with_environment_context_result((err != null ? err : {success: result}));
      output.writeMessageBegin("drop_partition_by_name_with_environment_context", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_drop_partitions_req = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_partitions_req_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.drop_partitions_req.length === 1) {
    Q.fcall(this._handler.drop_partitions_req, args.req)
      .then(function(result) {
        var result = new ThriftHiveMetastore_drop_partitions_req_result({success: result});
        output.writeMessageBegin("drop_partitions_req", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_drop_partitions_req_result(err);
        output.writeMessageBegin("drop_partitions_req", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.drop_partitions_req(args.req,  function (err, result) {
      var result = new ThriftHiveMetastore_drop_partitions_req_result((err != null ? err : {success: result}));
      output.writeMessageBegin("drop_partitions_req", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_partition.length === 3) {
    Q.fcall(this._handler.get_partition, args.db_name, args.tbl_name, args.part_vals)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_partition_result({success: result});
        output.writeMessageBegin("get_partition", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_partition_result(err);
        output.writeMessageBegin("get_partition", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_partition(args.db_name, args.tbl_name, args.part_vals,  function (err, result) {
      var result = new ThriftHiveMetastore_get_partition_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_partition", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_exchange_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_exchange_partition_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.exchange_partition.length === 5) {
    Q.fcall(this._handler.exchange_partition, args.partitionSpecs, args.source_db, args.source_table_name, args.dest_db, args.dest_table_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_exchange_partition_result({success: result});
        output.writeMessageBegin("exchange_partition", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_exchange_partition_result(err);
        output.writeMessageBegin("exchange_partition", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.exchange_partition(args.partitionSpecs, args.source_db, args.source_table_name, args.dest_db, args.dest_table_name,  function (err, result) {
      var result = new ThriftHiveMetastore_exchange_partition_result((err != null ? err : {success: result}));
      output.writeMessageBegin("exchange_partition", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_partition_with_auth = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_with_auth_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_partition_with_auth.length === 5) {
    Q.fcall(this._handler.get_partition_with_auth, args.db_name, args.tbl_name, args.part_vals, args.user_name, args.group_names)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_partition_with_auth_result({success: result});
        output.writeMessageBegin("get_partition_with_auth", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_partition_with_auth_result(err);
        output.writeMessageBegin("get_partition_with_auth", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_partition_with_auth(args.db_name, args.tbl_name, args.part_vals, args.user_name, args.group_names,  function (err, result) {
      var result = new ThriftHiveMetastore_get_partition_with_auth_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_partition_with_auth", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_partition_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_by_name_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_partition_by_name.length === 3) {
    Q.fcall(this._handler.get_partition_by_name, args.db_name, args.tbl_name, args.part_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_partition_by_name_result({success: result});
        output.writeMessageBegin("get_partition_by_name", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_partition_by_name_result(err);
        output.writeMessageBegin("get_partition_by_name", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_partition_by_name(args.db_name, args.tbl_name, args.part_name,  function (err, result) {
      var result = new ThriftHiveMetastore_get_partition_by_name_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_partition_by_name", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_partitions = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_partitions.length === 3) {
    Q.fcall(this._handler.get_partitions, args.db_name, args.tbl_name, args.max_parts)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_partitions_result({success: result});
        output.writeMessageBegin("get_partitions", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_partitions_result(err);
        output.writeMessageBegin("get_partitions", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_partitions(args.db_name, args.tbl_name, args.max_parts,  function (err, result) {
      var result = new ThriftHiveMetastore_get_partitions_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_partitions", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_partitions_with_auth = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_with_auth_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_partitions_with_auth.length === 5) {
    Q.fcall(this._handler.get_partitions_with_auth, args.db_name, args.tbl_name, args.max_parts, args.user_name, args.group_names)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_partitions_with_auth_result({success: result});
        output.writeMessageBegin("get_partitions_with_auth", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_partitions_with_auth_result(err);
        output.writeMessageBegin("get_partitions_with_auth", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_partitions_with_auth(args.db_name, args.tbl_name, args.max_parts, args.user_name, args.group_names,  function (err, result) {
      var result = new ThriftHiveMetastore_get_partitions_with_auth_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_partitions_with_auth", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_partitions_pspec = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_pspec_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_partitions_pspec.length === 3) {
    Q.fcall(this._handler.get_partitions_pspec, args.db_name, args.tbl_name, args.max_parts)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_partitions_pspec_result({success: result});
        output.writeMessageBegin("get_partitions_pspec", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_partitions_pspec_result(err);
        output.writeMessageBegin("get_partitions_pspec", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_partitions_pspec(args.db_name, args.tbl_name, args.max_parts,  function (err, result) {
      var result = new ThriftHiveMetastore_get_partitions_pspec_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_partitions_pspec", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_partition_names = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_names_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_partition_names.length === 3) {
    Q.fcall(this._handler.get_partition_names, args.db_name, args.tbl_name, args.max_parts)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_partition_names_result({success: result});
        output.writeMessageBegin("get_partition_names", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_partition_names_result(err);
        output.writeMessageBegin("get_partition_names", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_partition_names(args.db_name, args.tbl_name, args.max_parts,  function (err, result) {
      var result = new ThriftHiveMetastore_get_partition_names_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_partition_names", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_partitions_ps = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_ps_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_partitions_ps.length === 4) {
    Q.fcall(this._handler.get_partitions_ps, args.db_name, args.tbl_name, args.part_vals, args.max_parts)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_partitions_ps_result({success: result});
        output.writeMessageBegin("get_partitions_ps", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_partitions_ps_result(err);
        output.writeMessageBegin("get_partitions_ps", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_partitions_ps(args.db_name, args.tbl_name, args.part_vals, args.max_parts,  function (err, result) {
      var result = new ThriftHiveMetastore_get_partitions_ps_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_partitions_ps", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_partitions_ps_with_auth = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_ps_with_auth_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_partitions_ps_with_auth.length === 6) {
    Q.fcall(this._handler.get_partitions_ps_with_auth, args.db_name, args.tbl_name, args.part_vals, args.max_parts, args.user_name, args.group_names)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_partitions_ps_with_auth_result({success: result});
        output.writeMessageBegin("get_partitions_ps_with_auth", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_partitions_ps_with_auth_result(err);
        output.writeMessageBegin("get_partitions_ps_with_auth", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_partitions_ps_with_auth(args.db_name, args.tbl_name, args.part_vals, args.max_parts, args.user_name, args.group_names,  function (err, result) {
      var result = new ThriftHiveMetastore_get_partitions_ps_with_auth_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_partitions_ps_with_auth", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_partition_names_ps = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_names_ps_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_partition_names_ps.length === 4) {
    Q.fcall(this._handler.get_partition_names_ps, args.db_name, args.tbl_name, args.part_vals, args.max_parts)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_partition_names_ps_result({success: result});
        output.writeMessageBegin("get_partition_names_ps", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_partition_names_ps_result(err);
        output.writeMessageBegin("get_partition_names_ps", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_partition_names_ps(args.db_name, args.tbl_name, args.part_vals, args.max_parts,  function (err, result) {
      var result = new ThriftHiveMetastore_get_partition_names_ps_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_partition_names_ps", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_partitions_by_filter = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_by_filter_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_partitions_by_filter.length === 4) {
    Q.fcall(this._handler.get_partitions_by_filter, args.db_name, args.tbl_name, args.filter, args.max_parts)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_partitions_by_filter_result({success: result});
        output.writeMessageBegin("get_partitions_by_filter", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_partitions_by_filter_result(err);
        output.writeMessageBegin("get_partitions_by_filter", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_partitions_by_filter(args.db_name, args.tbl_name, args.filter, args.max_parts,  function (err, result) {
      var result = new ThriftHiveMetastore_get_partitions_by_filter_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_partitions_by_filter", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_part_specs_by_filter = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_part_specs_by_filter_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_part_specs_by_filter.length === 4) {
    Q.fcall(this._handler.get_part_specs_by_filter, args.db_name, args.tbl_name, args.filter, args.max_parts)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_part_specs_by_filter_result({success: result});
        output.writeMessageBegin("get_part_specs_by_filter", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_part_specs_by_filter_result(err);
        output.writeMessageBegin("get_part_specs_by_filter", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_part_specs_by_filter(args.db_name, args.tbl_name, args.filter, args.max_parts,  function (err, result) {
      var result = new ThriftHiveMetastore_get_part_specs_by_filter_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_part_specs_by_filter", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_partitions_by_expr = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_by_expr_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_partitions_by_expr.length === 1) {
    Q.fcall(this._handler.get_partitions_by_expr, args.req)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_partitions_by_expr_result({success: result});
        output.writeMessageBegin("get_partitions_by_expr", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_partitions_by_expr_result(err);
        output.writeMessageBegin("get_partitions_by_expr", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_partitions_by_expr(args.req,  function (err, result) {
      var result = new ThriftHiveMetastore_get_partitions_by_expr_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_partitions_by_expr", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_partitions_by_names = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_by_names_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_partitions_by_names.length === 3) {
    Q.fcall(this._handler.get_partitions_by_names, args.db_name, args.tbl_name, args.names)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_partitions_by_names_result({success: result});
        output.writeMessageBegin("get_partitions_by_names", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_partitions_by_names_result(err);
        output.writeMessageBegin("get_partitions_by_names", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_partitions_by_names(args.db_name, args.tbl_name, args.names,  function (err, result) {
      var result = new ThriftHiveMetastore_get_partitions_by_names_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_partitions_by_names", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_alter_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_partition_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.alter_partition.length === 3) {
    Q.fcall(this._handler.alter_partition, args.db_name, args.tbl_name, args.new_part)
      .then(function(result) {
        var result = new ThriftHiveMetastore_alter_partition_result({success: result});
        output.writeMessageBegin("alter_partition", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_alter_partition_result(err);
        output.writeMessageBegin("alter_partition", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.alter_partition(args.db_name, args.tbl_name, args.new_part,  function (err, result) {
      var result = new ThriftHiveMetastore_alter_partition_result((err != null ? err : {success: result}));
      output.writeMessageBegin("alter_partition", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_alter_partitions = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_partitions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.alter_partitions.length === 3) {
    Q.fcall(this._handler.alter_partitions, args.db_name, args.tbl_name, args.new_parts)
      .then(function(result) {
        var result = new ThriftHiveMetastore_alter_partitions_result({success: result});
        output.writeMessageBegin("alter_partitions", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_alter_partitions_result(err);
        output.writeMessageBegin("alter_partitions", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.alter_partitions(args.db_name, args.tbl_name, args.new_parts,  function (err, result) {
      var result = new ThriftHiveMetastore_alter_partitions_result((err != null ? err : {success: result}));
      output.writeMessageBegin("alter_partitions", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_alter_partition_with_environment_context = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_partition_with_environment_context_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.alter_partition_with_environment_context.length === 4) {
    Q.fcall(this._handler.alter_partition_with_environment_context, args.db_name, args.tbl_name, args.new_part, args.environment_context)
      .then(function(result) {
        var result = new ThriftHiveMetastore_alter_partition_with_environment_context_result({success: result});
        output.writeMessageBegin("alter_partition_with_environment_context", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_alter_partition_with_environment_context_result(err);
        output.writeMessageBegin("alter_partition_with_environment_context", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.alter_partition_with_environment_context(args.db_name, args.tbl_name, args.new_part, args.environment_context,  function (err, result) {
      var result = new ThriftHiveMetastore_alter_partition_with_environment_context_result((err != null ? err : {success: result}));
      output.writeMessageBegin("alter_partition_with_environment_context", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_rename_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_rename_partition_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.rename_partition.length === 4) {
    Q.fcall(this._handler.rename_partition, args.db_name, args.tbl_name, args.part_vals, args.new_part)
      .then(function(result) {
        var result = new ThriftHiveMetastore_rename_partition_result({success: result});
        output.writeMessageBegin("rename_partition", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_rename_partition_result(err);
        output.writeMessageBegin("rename_partition", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.rename_partition(args.db_name, args.tbl_name, args.part_vals, args.new_part,  function (err, result) {
      var result = new ThriftHiveMetastore_rename_partition_result((err != null ? err : {success: result}));
      output.writeMessageBegin("rename_partition", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_partition_name_has_valid_characters = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_partition_name_has_valid_characters_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.partition_name_has_valid_characters.length === 2) {
    Q.fcall(this._handler.partition_name_has_valid_characters, args.part_vals, args.throw_exception)
      .then(function(result) {
        var result = new ThriftHiveMetastore_partition_name_has_valid_characters_result({success: result});
        output.writeMessageBegin("partition_name_has_valid_characters", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_partition_name_has_valid_characters_result(err);
        output.writeMessageBegin("partition_name_has_valid_characters", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.partition_name_has_valid_characters(args.part_vals, args.throw_exception,  function (err, result) {
      var result = new ThriftHiveMetastore_partition_name_has_valid_characters_result((err != null ? err : {success: result}));
      output.writeMessageBegin("partition_name_has_valid_characters", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_config_value = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_config_value_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_config_value.length === 2) {
    Q.fcall(this._handler.get_config_value, args.name, args.defaultValue)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_config_value_result({success: result});
        output.writeMessageBegin("get_config_value", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_config_value_result(err);
        output.writeMessageBegin("get_config_value", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_config_value(args.name, args.defaultValue,  function (err, result) {
      var result = new ThriftHiveMetastore_get_config_value_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_config_value", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_partition_name_to_vals = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_partition_name_to_vals_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.partition_name_to_vals.length === 1) {
    Q.fcall(this._handler.partition_name_to_vals, args.part_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_partition_name_to_vals_result({success: result});
        output.writeMessageBegin("partition_name_to_vals", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_partition_name_to_vals_result(err);
        output.writeMessageBegin("partition_name_to_vals", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.partition_name_to_vals(args.part_name,  function (err, result) {
      var result = new ThriftHiveMetastore_partition_name_to_vals_result((err != null ? err : {success: result}));
      output.writeMessageBegin("partition_name_to_vals", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_partition_name_to_spec = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_partition_name_to_spec_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.partition_name_to_spec.length === 1) {
    Q.fcall(this._handler.partition_name_to_spec, args.part_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_partition_name_to_spec_result({success: result});
        output.writeMessageBegin("partition_name_to_spec", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_partition_name_to_spec_result(err);
        output.writeMessageBegin("partition_name_to_spec", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.partition_name_to_spec(args.part_name,  function (err, result) {
      var result = new ThriftHiveMetastore_partition_name_to_spec_result((err != null ? err : {success: result}));
      output.writeMessageBegin("partition_name_to_spec", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_markPartitionForEvent = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_markPartitionForEvent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.markPartitionForEvent.length === 4) {
    Q.fcall(this._handler.markPartitionForEvent, args.db_name, args.tbl_name, args.part_vals, args.eventType)
      .then(function(result) {
        var result = new ThriftHiveMetastore_markPartitionForEvent_result({success: result});
        output.writeMessageBegin("markPartitionForEvent", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_markPartitionForEvent_result(err);
        output.writeMessageBegin("markPartitionForEvent", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.markPartitionForEvent(args.db_name, args.tbl_name, args.part_vals, args.eventType,  function (err, result) {
      var result = new ThriftHiveMetastore_markPartitionForEvent_result((err != null ? err : {success: result}));
      output.writeMessageBegin("markPartitionForEvent", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_isPartitionMarkedForEvent = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_isPartitionMarkedForEvent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isPartitionMarkedForEvent.length === 4) {
    Q.fcall(this._handler.isPartitionMarkedForEvent, args.db_name, args.tbl_name, args.part_vals, args.eventType)
      .then(function(result) {
        var result = new ThriftHiveMetastore_isPartitionMarkedForEvent_result({success: result});
        output.writeMessageBegin("isPartitionMarkedForEvent", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_isPartitionMarkedForEvent_result(err);
        output.writeMessageBegin("isPartitionMarkedForEvent", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isPartitionMarkedForEvent(args.db_name, args.tbl_name, args.part_vals, args.eventType,  function (err, result) {
      var result = new ThriftHiveMetastore_isPartitionMarkedForEvent_result((err != null ? err : {success: result}));
      output.writeMessageBegin("isPartitionMarkedForEvent", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_add_index = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_add_index_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.add_index.length === 2) {
    Q.fcall(this._handler.add_index, args.new_index, args.index_table)
      .then(function(result) {
        var result = new ThriftHiveMetastore_add_index_result({success: result});
        output.writeMessageBegin("add_index", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_add_index_result(err);
        output.writeMessageBegin("add_index", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.add_index(args.new_index, args.index_table,  function (err, result) {
      var result = new ThriftHiveMetastore_add_index_result((err != null ? err : {success: result}));
      output.writeMessageBegin("add_index", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_alter_index = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_index_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.alter_index.length === 4) {
    Q.fcall(this._handler.alter_index, args.dbname, args.base_tbl_name, args.idx_name, args.new_idx)
      .then(function(result) {
        var result = new ThriftHiveMetastore_alter_index_result({success: result});
        output.writeMessageBegin("alter_index", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_alter_index_result(err);
        output.writeMessageBegin("alter_index", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.alter_index(args.dbname, args.base_tbl_name, args.idx_name, args.new_idx,  function (err, result) {
      var result = new ThriftHiveMetastore_alter_index_result((err != null ? err : {success: result}));
      output.writeMessageBegin("alter_index", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_drop_index_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_index_by_name_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.drop_index_by_name.length === 4) {
    Q.fcall(this._handler.drop_index_by_name, args.db_name, args.tbl_name, args.index_name, args.deleteData)
      .then(function(result) {
        var result = new ThriftHiveMetastore_drop_index_by_name_result({success: result});
        output.writeMessageBegin("drop_index_by_name", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_drop_index_by_name_result(err);
        output.writeMessageBegin("drop_index_by_name", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.drop_index_by_name(args.db_name, args.tbl_name, args.index_name, args.deleteData,  function (err, result) {
      var result = new ThriftHiveMetastore_drop_index_by_name_result((err != null ? err : {success: result}));
      output.writeMessageBegin("drop_index_by_name", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_index_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_index_by_name_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_index_by_name.length === 3) {
    Q.fcall(this._handler.get_index_by_name, args.db_name, args.tbl_name, args.index_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_index_by_name_result({success: result});
        output.writeMessageBegin("get_index_by_name", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_index_by_name_result(err);
        output.writeMessageBegin("get_index_by_name", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_index_by_name(args.db_name, args.tbl_name, args.index_name,  function (err, result) {
      var result = new ThriftHiveMetastore_get_index_by_name_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_index_by_name", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_indexes = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_indexes_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_indexes.length === 3) {
    Q.fcall(this._handler.get_indexes, args.db_name, args.tbl_name, args.max_indexes)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_indexes_result({success: result});
        output.writeMessageBegin("get_indexes", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_indexes_result(err);
        output.writeMessageBegin("get_indexes", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_indexes(args.db_name, args.tbl_name, args.max_indexes,  function (err, result) {
      var result = new ThriftHiveMetastore_get_indexes_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_indexes", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_index_names = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_index_names_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_index_names.length === 3) {
    Q.fcall(this._handler.get_index_names, args.db_name, args.tbl_name, args.max_indexes)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_index_names_result({success: result});
        output.writeMessageBegin("get_index_names", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_index_names_result(err);
        output.writeMessageBegin("get_index_names", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_index_names(args.db_name, args.tbl_name, args.max_indexes,  function (err, result) {
      var result = new ThriftHiveMetastore_get_index_names_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_index_names", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_update_table_column_statistics = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_update_table_column_statistics_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.update_table_column_statistics.length === 1) {
    Q.fcall(this._handler.update_table_column_statistics, args.stats_obj)
      .then(function(result) {
        var result = new ThriftHiveMetastore_update_table_column_statistics_result({success: result});
        output.writeMessageBegin("update_table_column_statistics", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_update_table_column_statistics_result(err);
        output.writeMessageBegin("update_table_column_statistics", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.update_table_column_statistics(args.stats_obj,  function (err, result) {
      var result = new ThriftHiveMetastore_update_table_column_statistics_result((err != null ? err : {success: result}));
      output.writeMessageBegin("update_table_column_statistics", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_update_partition_column_statistics = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_update_partition_column_statistics_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.update_partition_column_statistics.length === 1) {
    Q.fcall(this._handler.update_partition_column_statistics, args.stats_obj)
      .then(function(result) {
        var result = new ThriftHiveMetastore_update_partition_column_statistics_result({success: result});
        output.writeMessageBegin("update_partition_column_statistics", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_update_partition_column_statistics_result(err);
        output.writeMessageBegin("update_partition_column_statistics", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.update_partition_column_statistics(args.stats_obj,  function (err, result) {
      var result = new ThriftHiveMetastore_update_partition_column_statistics_result((err != null ? err : {success: result}));
      output.writeMessageBegin("update_partition_column_statistics", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_table_column_statistics = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_table_column_statistics_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_table_column_statistics.length === 3) {
    Q.fcall(this._handler.get_table_column_statistics, args.db_name, args.tbl_name, args.col_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_table_column_statistics_result({success: result});
        output.writeMessageBegin("get_table_column_statistics", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_table_column_statistics_result(err);
        output.writeMessageBegin("get_table_column_statistics", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_table_column_statistics(args.db_name, args.tbl_name, args.col_name,  function (err, result) {
      var result = new ThriftHiveMetastore_get_table_column_statistics_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_table_column_statistics", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_partition_column_statistics = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_column_statistics_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_partition_column_statistics.length === 4) {
    Q.fcall(this._handler.get_partition_column_statistics, args.db_name, args.tbl_name, args.part_name, args.col_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_partition_column_statistics_result({success: result});
        output.writeMessageBegin("get_partition_column_statistics", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_partition_column_statistics_result(err);
        output.writeMessageBegin("get_partition_column_statistics", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_partition_column_statistics(args.db_name, args.tbl_name, args.part_name, args.col_name,  function (err, result) {
      var result = new ThriftHiveMetastore_get_partition_column_statistics_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_partition_column_statistics", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_table_statistics_req = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_table_statistics_req_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_table_statistics_req.length === 1) {
    Q.fcall(this._handler.get_table_statistics_req, args.request)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_table_statistics_req_result({success: result});
        output.writeMessageBegin("get_table_statistics_req", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_table_statistics_req_result(err);
        output.writeMessageBegin("get_table_statistics_req", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_table_statistics_req(args.request,  function (err, result) {
      var result = new ThriftHiveMetastore_get_table_statistics_req_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_table_statistics_req", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_partitions_statistics_req = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_statistics_req_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_partitions_statistics_req.length === 1) {
    Q.fcall(this._handler.get_partitions_statistics_req, args.request)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_partitions_statistics_req_result({success: result});
        output.writeMessageBegin("get_partitions_statistics_req", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_partitions_statistics_req_result(err);
        output.writeMessageBegin("get_partitions_statistics_req", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_partitions_statistics_req(args.request,  function (err, result) {
      var result = new ThriftHiveMetastore_get_partitions_statistics_req_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_partitions_statistics_req", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_aggr_stats_for = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_aggr_stats_for_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_aggr_stats_for.length === 1) {
    Q.fcall(this._handler.get_aggr_stats_for, args.request)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_aggr_stats_for_result({success: result});
        output.writeMessageBegin("get_aggr_stats_for", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_aggr_stats_for_result(err);
        output.writeMessageBegin("get_aggr_stats_for", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_aggr_stats_for(args.request,  function (err, result) {
      var result = new ThriftHiveMetastore_get_aggr_stats_for_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_aggr_stats_for", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_set_aggr_stats_for = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_set_aggr_stats_for_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_aggr_stats_for.length === 1) {
    Q.fcall(this._handler.set_aggr_stats_for, args.request)
      .then(function(result) {
        var result = new ThriftHiveMetastore_set_aggr_stats_for_result({success: result});
        output.writeMessageBegin("set_aggr_stats_for", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_set_aggr_stats_for_result(err);
        output.writeMessageBegin("set_aggr_stats_for", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.set_aggr_stats_for(args.request,  function (err, result) {
      var result = new ThriftHiveMetastore_set_aggr_stats_for_result((err != null ? err : {success: result}));
      output.writeMessageBegin("set_aggr_stats_for", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_delete_partition_column_statistics = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_delete_partition_column_statistics_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.delete_partition_column_statistics.length === 4) {
    Q.fcall(this._handler.delete_partition_column_statistics, args.db_name, args.tbl_name, args.part_name, args.col_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_delete_partition_column_statistics_result({success: result});
        output.writeMessageBegin("delete_partition_column_statistics", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_delete_partition_column_statistics_result(err);
        output.writeMessageBegin("delete_partition_column_statistics", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.delete_partition_column_statistics(args.db_name, args.tbl_name, args.part_name, args.col_name,  function (err, result) {
      var result = new ThriftHiveMetastore_delete_partition_column_statistics_result((err != null ? err : {success: result}));
      output.writeMessageBegin("delete_partition_column_statistics", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_delete_table_column_statistics = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_delete_table_column_statistics_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.delete_table_column_statistics.length === 3) {
    Q.fcall(this._handler.delete_table_column_statistics, args.db_name, args.tbl_name, args.col_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_delete_table_column_statistics_result({success: result});
        output.writeMessageBegin("delete_table_column_statistics", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_delete_table_column_statistics_result(err);
        output.writeMessageBegin("delete_table_column_statistics", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.delete_table_column_statistics(args.db_name, args.tbl_name, args.col_name,  function (err, result) {
      var result = new ThriftHiveMetastore_delete_table_column_statistics_result((err != null ? err : {success: result}));
      output.writeMessageBegin("delete_table_column_statistics", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_create_function = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_create_function_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_function.length === 1) {
    Q.fcall(this._handler.create_function, args.func)
      .then(function(result) {
        var result = new ThriftHiveMetastore_create_function_result({success: result});
        output.writeMessageBegin("create_function", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_create_function_result(err);
        output.writeMessageBegin("create_function", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.create_function(args.func,  function (err, result) {
      var result = new ThriftHiveMetastore_create_function_result((err != null ? err : {success: result}));
      output.writeMessageBegin("create_function", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_drop_function = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_function_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.drop_function.length === 2) {
    Q.fcall(this._handler.drop_function, args.dbName, args.funcName)
      .then(function(result) {
        var result = new ThriftHiveMetastore_drop_function_result({success: result});
        output.writeMessageBegin("drop_function", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_drop_function_result(err);
        output.writeMessageBegin("drop_function", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.drop_function(args.dbName, args.funcName,  function (err, result) {
      var result = new ThriftHiveMetastore_drop_function_result((err != null ? err : {success: result}));
      output.writeMessageBegin("drop_function", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_alter_function = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_function_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.alter_function.length === 3) {
    Q.fcall(this._handler.alter_function, args.dbName, args.funcName, args.newFunc)
      .then(function(result) {
        var result = new ThriftHiveMetastore_alter_function_result({success: result});
        output.writeMessageBegin("alter_function", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_alter_function_result(err);
        output.writeMessageBegin("alter_function", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.alter_function(args.dbName, args.funcName, args.newFunc,  function (err, result) {
      var result = new ThriftHiveMetastore_alter_function_result((err != null ? err : {success: result}));
      output.writeMessageBegin("alter_function", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_functions = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_functions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_functions.length === 2) {
    Q.fcall(this._handler.get_functions, args.dbName, args.pattern)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_functions_result({success: result});
        output.writeMessageBegin("get_functions", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_functions_result(err);
        output.writeMessageBegin("get_functions", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_functions(args.dbName, args.pattern,  function (err, result) {
      var result = new ThriftHiveMetastore_get_functions_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_functions", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_function = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_function_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_function.length === 2) {
    Q.fcall(this._handler.get_function, args.dbName, args.funcName)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_function_result({success: result});
        output.writeMessageBegin("get_function", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_function_result(err);
        output.writeMessageBegin("get_function", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_function(args.dbName, args.funcName,  function (err, result) {
      var result = new ThriftHiveMetastore_get_function_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_function", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_create_role = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_create_role_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_role.length === 1) {
    Q.fcall(this._handler.create_role, args.role)
      .then(function(result) {
        var result = new ThriftHiveMetastore_create_role_result({success: result});
        output.writeMessageBegin("create_role", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_create_role_result(err);
        output.writeMessageBegin("create_role", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.create_role(args.role,  function (err, result) {
      var result = new ThriftHiveMetastore_create_role_result((err != null ? err : {success: result}));
      output.writeMessageBegin("create_role", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_drop_role = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_role_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.drop_role.length === 1) {
    Q.fcall(this._handler.drop_role, args.role_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_drop_role_result({success: result});
        output.writeMessageBegin("drop_role", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_drop_role_result(err);
        output.writeMessageBegin("drop_role", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.drop_role(args.role_name,  function (err, result) {
      var result = new ThriftHiveMetastore_drop_role_result((err != null ? err : {success: result}));
      output.writeMessageBegin("drop_role", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_role_names = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_role_names_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_role_names.length === 0) {
    Q.fcall(this._handler.get_role_names)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_role_names_result({success: result});
        output.writeMessageBegin("get_role_names", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_role_names_result(err);
        output.writeMessageBegin("get_role_names", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_role_names( function (err, result) {
      var result = new ThriftHiveMetastore_get_role_names_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_role_names", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_grant_role = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_grant_role_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.grant_role.length === 6) {
    Q.fcall(this._handler.grant_role, args.role_name, args.principal_name, args.principal_type, args.grantor, args.grantorType, args.grant_option)
      .then(function(result) {
        var result = new ThriftHiveMetastore_grant_role_result({success: result});
        output.writeMessageBegin("grant_role", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_grant_role_result(err);
        output.writeMessageBegin("grant_role", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.grant_role(args.role_name, args.principal_name, args.principal_type, args.grantor, args.grantorType, args.grant_option,  function (err, result) {
      var result = new ThriftHiveMetastore_grant_role_result((err != null ? err : {success: result}));
      output.writeMessageBegin("grant_role", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_revoke_role = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_revoke_role_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.revoke_role.length === 3) {
    Q.fcall(this._handler.revoke_role, args.role_name, args.principal_name, args.principal_type)
      .then(function(result) {
        var result = new ThriftHiveMetastore_revoke_role_result({success: result});
        output.writeMessageBegin("revoke_role", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_revoke_role_result(err);
        output.writeMessageBegin("revoke_role", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.revoke_role(args.role_name, args.principal_name, args.principal_type,  function (err, result) {
      var result = new ThriftHiveMetastore_revoke_role_result((err != null ? err : {success: result}));
      output.writeMessageBegin("revoke_role", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_list_roles = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_list_roles_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.list_roles.length === 2) {
    Q.fcall(this._handler.list_roles, args.principal_name, args.principal_type)
      .then(function(result) {
        var result = new ThriftHiveMetastore_list_roles_result({success: result});
        output.writeMessageBegin("list_roles", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_list_roles_result(err);
        output.writeMessageBegin("list_roles", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.list_roles(args.principal_name, args.principal_type,  function (err, result) {
      var result = new ThriftHiveMetastore_list_roles_result((err != null ? err : {success: result}));
      output.writeMessageBegin("list_roles", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_grant_revoke_role = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_grant_revoke_role_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.grant_revoke_role.length === 1) {
    Q.fcall(this._handler.grant_revoke_role, args.request)
      .then(function(result) {
        var result = new ThriftHiveMetastore_grant_revoke_role_result({success: result});
        output.writeMessageBegin("grant_revoke_role", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_grant_revoke_role_result(err);
        output.writeMessageBegin("grant_revoke_role", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.grant_revoke_role(args.request,  function (err, result) {
      var result = new ThriftHiveMetastore_grant_revoke_role_result((err != null ? err : {success: result}));
      output.writeMessageBegin("grant_revoke_role", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_principals_in_role = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_principals_in_role_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_principals_in_role.length === 1) {
    Q.fcall(this._handler.get_principals_in_role, args.request)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_principals_in_role_result({success: result});
        output.writeMessageBegin("get_principals_in_role", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_principals_in_role_result(err);
        output.writeMessageBegin("get_principals_in_role", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_principals_in_role(args.request,  function (err, result) {
      var result = new ThriftHiveMetastore_get_principals_in_role_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_principals_in_role", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_role_grants_for_principal = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_role_grants_for_principal_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_role_grants_for_principal.length === 1) {
    Q.fcall(this._handler.get_role_grants_for_principal, args.request)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_role_grants_for_principal_result({success: result});
        output.writeMessageBegin("get_role_grants_for_principal", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_role_grants_for_principal_result(err);
        output.writeMessageBegin("get_role_grants_for_principal", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_role_grants_for_principal(args.request,  function (err, result) {
      var result = new ThriftHiveMetastore_get_role_grants_for_principal_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_role_grants_for_principal", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_privilege_set = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_privilege_set_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_privilege_set.length === 3) {
    Q.fcall(this._handler.get_privilege_set, args.hiveObject, args.user_name, args.group_names)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_privilege_set_result({success: result});
        output.writeMessageBegin("get_privilege_set", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_privilege_set_result(err);
        output.writeMessageBegin("get_privilege_set", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_privilege_set(args.hiveObject, args.user_name, args.group_names,  function (err, result) {
      var result = new ThriftHiveMetastore_get_privilege_set_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_privilege_set", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_list_privileges = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_list_privileges_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.list_privileges.length === 3) {
    Q.fcall(this._handler.list_privileges, args.principal_name, args.principal_type, args.hiveObject)
      .then(function(result) {
        var result = new ThriftHiveMetastore_list_privileges_result({success: result});
        output.writeMessageBegin("list_privileges", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_list_privileges_result(err);
        output.writeMessageBegin("list_privileges", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.list_privileges(args.principal_name, args.principal_type, args.hiveObject,  function (err, result) {
      var result = new ThriftHiveMetastore_list_privileges_result((err != null ? err : {success: result}));
      output.writeMessageBegin("list_privileges", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_grant_privileges = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_grant_privileges_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.grant_privileges.length === 1) {
    Q.fcall(this._handler.grant_privileges, args.privileges)
      .then(function(result) {
        var result = new ThriftHiveMetastore_grant_privileges_result({success: result});
        output.writeMessageBegin("grant_privileges", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_grant_privileges_result(err);
        output.writeMessageBegin("grant_privileges", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.grant_privileges(args.privileges,  function (err, result) {
      var result = new ThriftHiveMetastore_grant_privileges_result((err != null ? err : {success: result}));
      output.writeMessageBegin("grant_privileges", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_revoke_privileges = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_revoke_privileges_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.revoke_privileges.length === 1) {
    Q.fcall(this._handler.revoke_privileges, args.privileges)
      .then(function(result) {
        var result = new ThriftHiveMetastore_revoke_privileges_result({success: result});
        output.writeMessageBegin("revoke_privileges", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_revoke_privileges_result(err);
        output.writeMessageBegin("revoke_privileges", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.revoke_privileges(args.privileges,  function (err, result) {
      var result = new ThriftHiveMetastore_revoke_privileges_result((err != null ? err : {success: result}));
      output.writeMessageBegin("revoke_privileges", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_grant_revoke_privileges = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_grant_revoke_privileges_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.grant_revoke_privileges.length === 1) {
    Q.fcall(this._handler.grant_revoke_privileges, args.request)
      .then(function(result) {
        var result = new ThriftHiveMetastore_grant_revoke_privileges_result({success: result});
        output.writeMessageBegin("grant_revoke_privileges", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_grant_revoke_privileges_result(err);
        output.writeMessageBegin("grant_revoke_privileges", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.grant_revoke_privileges(args.request,  function (err, result) {
      var result = new ThriftHiveMetastore_grant_revoke_privileges_result((err != null ? err : {success: result}));
      output.writeMessageBegin("grant_revoke_privileges", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_set_ugi = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_set_ugi_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_ugi.length === 2) {
    Q.fcall(this._handler.set_ugi, args.user_name, args.group_names)
      .then(function(result) {
        var result = new ThriftHiveMetastore_set_ugi_result({success: result});
        output.writeMessageBegin("set_ugi", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_set_ugi_result(err);
        output.writeMessageBegin("set_ugi", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.set_ugi(args.user_name, args.group_names,  function (err, result) {
      var result = new ThriftHiveMetastore_set_ugi_result((err != null ? err : {success: result}));
      output.writeMessageBegin("set_ugi", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_delegation_token = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_delegation_token_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_delegation_token.length === 2) {
    Q.fcall(this._handler.get_delegation_token, args.token_owner, args.renewer_kerberos_principal_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_delegation_token_result({success: result});
        output.writeMessageBegin("get_delegation_token", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_delegation_token_result(err);
        output.writeMessageBegin("get_delegation_token", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_delegation_token(args.token_owner, args.renewer_kerberos_principal_name,  function (err, result) {
      var result = new ThriftHiveMetastore_get_delegation_token_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_delegation_token", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_renew_delegation_token = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_renew_delegation_token_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.renew_delegation_token.length === 1) {
    Q.fcall(this._handler.renew_delegation_token, args.token_str_form)
      .then(function(result) {
        var result = new ThriftHiveMetastore_renew_delegation_token_result({success: result});
        output.writeMessageBegin("renew_delegation_token", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_renew_delegation_token_result(err);
        output.writeMessageBegin("renew_delegation_token", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.renew_delegation_token(args.token_str_form,  function (err, result) {
      var result = new ThriftHiveMetastore_renew_delegation_token_result((err != null ? err : {success: result}));
      output.writeMessageBegin("renew_delegation_token", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_cancel_delegation_token = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_cancel_delegation_token_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.cancel_delegation_token.length === 1) {
    Q.fcall(this._handler.cancel_delegation_token, args.token_str_form)
      .then(function(result) {
        var result = new ThriftHiveMetastore_cancel_delegation_token_result({success: result});
        output.writeMessageBegin("cancel_delegation_token", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_cancel_delegation_token_result(err);
        output.writeMessageBegin("cancel_delegation_token", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.cancel_delegation_token(args.token_str_form,  function (err, result) {
      var result = new ThriftHiveMetastore_cancel_delegation_token_result((err != null ? err : {success: result}));
      output.writeMessageBegin("cancel_delegation_token", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_open_txns = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_open_txns_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_open_txns.length === 0) {
    Q.fcall(this._handler.get_open_txns)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_open_txns_result({success: result});
        output.writeMessageBegin("get_open_txns", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_open_txns_result(err);
        output.writeMessageBegin("get_open_txns", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_open_txns( function (err, result) {
      var result = new ThriftHiveMetastore_get_open_txns_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_open_txns", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_open_txns_info = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_open_txns_info_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_open_txns_info.length === 0) {
    Q.fcall(this._handler.get_open_txns_info)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_open_txns_info_result({success: result});
        output.writeMessageBegin("get_open_txns_info", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_get_open_txns_info_result(err);
        output.writeMessageBegin("get_open_txns_info", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_open_txns_info( function (err, result) {
      var result = new ThriftHiveMetastore_get_open_txns_info_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get_open_txns_info", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_open_txns = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_open_txns_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.open_txns.length === 1) {
    Q.fcall(this._handler.open_txns, args.rqst)
      .then(function(result) {
        var result = new ThriftHiveMetastore_open_txns_result({success: result});
        output.writeMessageBegin("open_txns", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_open_txns_result(err);
        output.writeMessageBegin("open_txns", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.open_txns(args.rqst,  function (err, result) {
      var result = new ThriftHiveMetastore_open_txns_result((err != null ? err : {success: result}));
      output.writeMessageBegin("open_txns", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_abort_txn = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_abort_txn_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.abort_txn.length === 1) {
    Q.fcall(this._handler.abort_txn, args.rqst)
      .then(function(result) {
        var result = new ThriftHiveMetastore_abort_txn_result({success: result});
        output.writeMessageBegin("abort_txn", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_abort_txn_result(err);
        output.writeMessageBegin("abort_txn", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.abort_txn(args.rqst,  function (err, result) {
      var result = new ThriftHiveMetastore_abort_txn_result((err != null ? err : {success: result}));
      output.writeMessageBegin("abort_txn", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_commit_txn = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_commit_txn_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.commit_txn.length === 1) {
    Q.fcall(this._handler.commit_txn, args.rqst)
      .then(function(result) {
        var result = new ThriftHiveMetastore_commit_txn_result({success: result});
        output.writeMessageBegin("commit_txn", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_commit_txn_result(err);
        output.writeMessageBegin("commit_txn", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.commit_txn(args.rqst,  function (err, result) {
      var result = new ThriftHiveMetastore_commit_txn_result((err != null ? err : {success: result}));
      output.writeMessageBegin("commit_txn", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_lock = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_lock_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.lock.length === 1) {
    Q.fcall(this._handler.lock, args.rqst)
      .then(function(result) {
        var result = new ThriftHiveMetastore_lock_result({success: result});
        output.writeMessageBegin("lock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_lock_result(err);
        output.writeMessageBegin("lock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.lock(args.rqst,  function (err, result) {
      var result = new ThriftHiveMetastore_lock_result((err != null ? err : {success: result}));
      output.writeMessageBegin("lock", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_check_lock = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_check_lock_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.check_lock.length === 1) {
    Q.fcall(this._handler.check_lock, args.rqst)
      .then(function(result) {
        var result = new ThriftHiveMetastore_check_lock_result({success: result});
        output.writeMessageBegin("check_lock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_check_lock_result(err);
        output.writeMessageBegin("check_lock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.check_lock(args.rqst,  function (err, result) {
      var result = new ThriftHiveMetastore_check_lock_result((err != null ? err : {success: result}));
      output.writeMessageBegin("check_lock", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_unlock = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_unlock_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.unlock.length === 1) {
    Q.fcall(this._handler.unlock, args.rqst)
      .then(function(result) {
        var result = new ThriftHiveMetastore_unlock_result({success: result});
        output.writeMessageBegin("unlock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_unlock_result(err);
        output.writeMessageBegin("unlock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.unlock(args.rqst,  function (err, result) {
      var result = new ThriftHiveMetastore_unlock_result((err != null ? err : {success: result}));
      output.writeMessageBegin("unlock", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_show_locks = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_show_locks_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.show_locks.length === 1) {
    Q.fcall(this._handler.show_locks, args.rqst)
      .then(function(result) {
        var result = new ThriftHiveMetastore_show_locks_result({success: result});
        output.writeMessageBegin("show_locks", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_show_locks_result(err);
        output.writeMessageBegin("show_locks", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.show_locks(args.rqst,  function (err, result) {
      var result = new ThriftHiveMetastore_show_locks_result((err != null ? err : {success: result}));
      output.writeMessageBegin("show_locks", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_heartbeat = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_heartbeat_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.heartbeat.length === 1) {
    Q.fcall(this._handler.heartbeat, args.ids)
      .then(function(result) {
        var result = new ThriftHiveMetastore_heartbeat_result({success: result});
        output.writeMessageBegin("heartbeat", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_heartbeat_result(err);
        output.writeMessageBegin("heartbeat", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.heartbeat(args.ids,  function (err, result) {
      var result = new ThriftHiveMetastore_heartbeat_result((err != null ? err : {success: result}));
      output.writeMessageBegin("heartbeat", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_heartbeat_txn_range = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_heartbeat_txn_range_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.heartbeat_txn_range.length === 1) {
    Q.fcall(this._handler.heartbeat_txn_range, args.txns)
      .then(function(result) {
        var result = new ThriftHiveMetastore_heartbeat_txn_range_result({success: result});
        output.writeMessageBegin("heartbeat_txn_range", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_heartbeat_txn_range_result(err);
        output.writeMessageBegin("heartbeat_txn_range", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.heartbeat_txn_range(args.txns,  function (err, result) {
      var result = new ThriftHiveMetastore_heartbeat_txn_range_result((err != null ? err : {success: result}));
      output.writeMessageBegin("heartbeat_txn_range", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_compact = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_compact_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.compact.length === 1) {
    Q.fcall(this._handler.compact, args.rqst)
      .then(function(result) {
        var result = new ThriftHiveMetastore_compact_result({success: result});
        output.writeMessageBegin("compact", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_compact_result(err);
        output.writeMessageBegin("compact", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.compact(args.rqst,  function (err, result) {
      var result = new ThriftHiveMetastore_compact_result((err != null ? err : {success: result}));
      output.writeMessageBegin("compact", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ThriftHiveMetastoreProcessor.prototype.process_show_compact = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_show_compact_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.show_compact.length === 1) {
    Q.fcall(this._handler.show_compact, args.rqst)
      .then(function(result) {
        var result = new ThriftHiveMetastore_show_compact_result({success: result});
        output.writeMessageBegin("show_compact", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ThriftHiveMetastore_show_compact_result(err);
        output.writeMessageBegin("show_compact", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.show_compact(args.rqst,  function (err, result) {
      var result = new ThriftHiveMetastore_show_compact_result((err != null ? err : {success: result}));
      output.writeMessageBegin("show_compact", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

