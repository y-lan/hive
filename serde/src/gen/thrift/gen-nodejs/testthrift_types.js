//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
InnerStruct = module.exports.InnerStruct = function(args) {
  this.field0 = null;
  if (args) {
    if (args.field0 !== undefined) {
      this.field0 = args.field0;
    }
  }
};
InnerStruct.prototype = {};
InnerStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.field0 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InnerStruct.prototype.write = function(output) {
  output.writeStructBegin('InnerStruct');
  if (this.field0 !== null && this.field0 !== undefined) {
    output.writeFieldBegin('field0', Thrift.Type.I32, 1);
    output.writeI32(this.field0);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftTestObj = module.exports.ThriftTestObj = function(args) {
  this.field1 = null;
  this.field2 = null;
  this.field3 = null;
  if (args) {
    if (args.field1 !== undefined) {
      this.field1 = args.field1;
    }
    if (args.field2 !== undefined) {
      this.field2 = args.field2;
    }
    if (args.field3 !== undefined) {
      this.field3 = args.field3;
    }
  }
};
ThriftTestObj.prototype = {};
ThriftTestObj.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.field1 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.field2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.field3 = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.InnerStruct();
          elem6.read(input);
          this.field3.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTestObj.prototype.write = function(output) {
  output.writeStructBegin('ThriftTestObj');
  if (this.field1 !== null && this.field1 !== undefined) {
    output.writeFieldBegin('field1', Thrift.Type.I32, 1);
    output.writeI32(this.field1);
    output.writeFieldEnd();
  }
  if (this.field2 !== null && this.field2 !== undefined) {
    output.writeFieldBegin('field2', Thrift.Type.STRING, 2);
    output.writeString(this.field2);
    output.writeFieldEnd();
  }
  if (this.field3 !== null && this.field3 !== undefined) {
    output.writeFieldBegin('field3', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.field3.length);
    for (var iter7 in this.field3)
    {
      if (this.field3.hasOwnProperty(iter7))
      {
        iter7 = this.field3[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

