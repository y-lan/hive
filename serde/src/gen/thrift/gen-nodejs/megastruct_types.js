//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.MyEnum = {
  'LLAMA' : 1,
  'ALPACA' : 2
};
MiniStruct = module.exports.MiniStruct = function(args) {
  this.my_string = null;
  this.my_enum = null;
  if (args) {
    if (args.my_string !== undefined) {
      this.my_string = args.my_string;
    }
    if (args.my_enum !== undefined) {
      this.my_enum = args.my_enum;
    }
  }
};
MiniStruct.prototype = {};
MiniStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.my_string = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.my_enum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MiniStruct.prototype.write = function(output) {
  output.writeStructBegin('MiniStruct');
  if (this.my_string !== null && this.my_string !== undefined) {
    output.writeFieldBegin('my_string', Thrift.Type.STRING, 1);
    output.writeString(this.my_string);
    output.writeFieldEnd();
  }
  if (this.my_enum !== null && this.my_enum !== undefined) {
    output.writeFieldBegin('my_enum', Thrift.Type.I32, 2);
    output.writeI32(this.my_enum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MegaStruct = module.exports.MegaStruct = function(args) {
  this.my_bool = null;
  this.my_byte = null;
  this.my_16bit_int = null;
  this.my_32bit_int = null;
  this.my_64bit_int = null;
  this.my_double = null;
  this.my_string = null;
  this.my_binary = null;
  this.my_string_string_map = null;
  this.my_string_enum_map = null;
  this.my_enum_string_map = null;
  this.my_enum_struct_map = null;
  this.my_enum_stringlist_map = null;
  this.my_enum_structlist_map = null;
  this.my_stringlist = null;
  this.my_structlist = null;
  this.my_enumlist = null;
  this.my_stringset = null;
  this.my_enumset = null;
  this.my_structset = null;
  if (args) {
    if (args.my_bool !== undefined) {
      this.my_bool = args.my_bool;
    }
    if (args.my_byte !== undefined) {
      this.my_byte = args.my_byte;
    }
    if (args.my_16bit_int !== undefined) {
      this.my_16bit_int = args.my_16bit_int;
    }
    if (args.my_32bit_int !== undefined) {
      this.my_32bit_int = args.my_32bit_int;
    }
    if (args.my_64bit_int !== undefined) {
      this.my_64bit_int = args.my_64bit_int;
    }
    if (args.my_double !== undefined) {
      this.my_double = args.my_double;
    }
    if (args.my_string !== undefined) {
      this.my_string = args.my_string;
    }
    if (args.my_binary !== undefined) {
      this.my_binary = args.my_binary;
    }
    if (args.my_string_string_map !== undefined) {
      this.my_string_string_map = args.my_string_string_map;
    }
    if (args.my_string_enum_map !== undefined) {
      this.my_string_enum_map = args.my_string_enum_map;
    }
    if (args.my_enum_string_map !== undefined) {
      this.my_enum_string_map = args.my_enum_string_map;
    }
    if (args.my_enum_struct_map !== undefined) {
      this.my_enum_struct_map = args.my_enum_struct_map;
    }
    if (args.my_enum_stringlist_map !== undefined) {
      this.my_enum_stringlist_map = args.my_enum_stringlist_map;
    }
    if (args.my_enum_structlist_map !== undefined) {
      this.my_enum_structlist_map = args.my_enum_structlist_map;
    }
    if (args.my_stringlist !== undefined) {
      this.my_stringlist = args.my_stringlist;
    }
    if (args.my_structlist !== undefined) {
      this.my_structlist = args.my_structlist;
    }
    if (args.my_enumlist !== undefined) {
      this.my_enumlist = args.my_enumlist;
    }
    if (args.my_stringset !== undefined) {
      this.my_stringset = args.my_stringset;
    }
    if (args.my_enumset !== undefined) {
      this.my_enumset = args.my_enumset;
    }
    if (args.my_structset !== undefined) {
      this.my_structset = args.my_structset;
    }
  }
};
MegaStruct.prototype = {};
MegaStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.my_bool = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this.my_byte = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.my_16bit_int = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.my_32bit_int = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.my_64bit_int = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.my_double = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.my_string = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.my_binary = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.my_string_string_map = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readString();
          this.my_string_string_map[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.MAP) {
        var _size8 = 0;
        var _rtmp312;
        this.my_string_enum_map = {};
        var _ktype9 = 0;
        var _vtype10 = 0;
        _rtmp312 = input.readMapBegin();
        _ktype9 = _rtmp312.ktype;
        _vtype10 = _rtmp312.vtype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var key14 = null;
          var val15 = null;
          key14 = input.readString();
          val15 = input.readI32();
          this.my_string_enum_map[key14] = val15;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.MAP) {
        var _size16 = 0;
        var _rtmp320;
        this.my_enum_string_map = {};
        var _ktype17 = 0;
        var _vtype18 = 0;
        _rtmp320 = input.readMapBegin();
        _ktype17 = _rtmp320.ktype;
        _vtype18 = _rtmp320.vtype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var key22 = null;
          var val23 = null;
          key22 = input.readI32();
          val23 = input.readString();
          this.my_enum_string_map[key22] = val23;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.MAP) {
        var _size24 = 0;
        var _rtmp328;
        this.my_enum_struct_map = {};
        var _ktype25 = 0;
        var _vtype26 = 0;
        _rtmp328 = input.readMapBegin();
        _ktype25 = _rtmp328.ktype;
        _vtype26 = _rtmp328.vtype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var key30 = null;
          var val31 = null;
          key30 = input.readI32();
          val31 = new ttypes.MiniStruct();
          val31.read(input);
          this.my_enum_struct_map[key30] = val31;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.MAP) {
        var _size32 = 0;
        var _rtmp336;
        this.my_enum_stringlist_map = {};
        var _ktype33 = 0;
        var _vtype34 = 0;
        _rtmp336 = input.readMapBegin();
        _ktype33 = _rtmp336.ktype;
        _vtype34 = _rtmp336.vtype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var key38 = null;
          var val39 = null;
          key38 = input.readI32();
          var _size40 = 0;
          var _rtmp344;
          val39 = [];
          var _etype43 = 0;
          _rtmp344 = input.readListBegin();
          _etype43 = _rtmp344.etype;
          _size40 = _rtmp344.size;
          for (var _i45 = 0; _i45 < _size40; ++_i45)
          {
            var elem46 = null;
            elem46 = input.readString();
            val39.push(elem46);
          }
          input.readListEnd();
          this.my_enum_stringlist_map[key38] = val39;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.MAP) {
        var _size47 = 0;
        var _rtmp351;
        this.my_enum_structlist_map = {};
        var _ktype48 = 0;
        var _vtype49 = 0;
        _rtmp351 = input.readMapBegin();
        _ktype48 = _rtmp351.ktype;
        _vtype49 = _rtmp351.vtype;
        _size47 = _rtmp351.size;
        for (var _i52 = 0; _i52 < _size47; ++_i52)
        {
          var key53 = null;
          var val54 = null;
          key53 = input.readI32();
          var _size55 = 0;
          var _rtmp359;
          val54 = [];
          var _etype58 = 0;
          _rtmp359 = input.readListBegin();
          _etype58 = _rtmp359.etype;
          _size55 = _rtmp359.size;
          for (var _i60 = 0; _i60 < _size55; ++_i60)
          {
            var elem61 = null;
            elem61 = new ttypes.MiniStruct();
            elem61.read(input);
            val54.push(elem61);
          }
          input.readListEnd();
          this.my_enum_structlist_map[key53] = val54;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.LIST) {
        var _size62 = 0;
        var _rtmp366;
        this.my_stringlist = [];
        var _etype65 = 0;
        _rtmp366 = input.readListBegin();
        _etype65 = _rtmp366.etype;
        _size62 = _rtmp366.size;
        for (var _i67 = 0; _i67 < _size62; ++_i67)
        {
          var elem68 = null;
          elem68 = input.readString();
          this.my_stringlist.push(elem68);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.LIST) {
        var _size69 = 0;
        var _rtmp373;
        this.my_structlist = [];
        var _etype72 = 0;
        _rtmp373 = input.readListBegin();
        _etype72 = _rtmp373.etype;
        _size69 = _rtmp373.size;
        for (var _i74 = 0; _i74 < _size69; ++_i74)
        {
          var elem75 = null;
          elem75 = new ttypes.MiniStruct();
          elem75.read(input);
          this.my_structlist.push(elem75);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.LIST) {
        var _size76 = 0;
        var _rtmp380;
        this.my_enumlist = [];
        var _etype79 = 0;
        _rtmp380 = input.readListBegin();
        _etype79 = _rtmp380.etype;
        _size76 = _rtmp380.size;
        for (var _i81 = 0; _i81 < _size76; ++_i81)
        {
          var elem82 = null;
          elem82 = input.readI32();
          this.my_enumlist.push(elem82);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.SET) {
        var _size83 = 0;
        var _rtmp387;
        this.my_stringset = [];
        var _etype86 = 0;
        _rtmp387 = input.readSetBegin();
        _etype86 = _rtmp387.etype;
        _size83 = _rtmp387.size;
        for (var _i88 = 0; _i88 < _size83; ++_i88)
        {
          var elem89 = null;
          elem89 = input.readString();
          this.my_stringset.push(elem89);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.SET) {
        var _size90 = 0;
        var _rtmp394;
        this.my_enumset = [];
        var _etype93 = 0;
        _rtmp394 = input.readSetBegin();
        _etype93 = _rtmp394.etype;
        _size90 = _rtmp394.size;
        for (var _i95 = 0; _i95 < _size90; ++_i95)
        {
          var elem96 = null;
          elem96 = input.readI32();
          this.my_enumset.push(elem96);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.SET) {
        var _size97 = 0;
        var _rtmp3101;
        this.my_structset = [];
        var _etype100 = 0;
        _rtmp3101 = input.readSetBegin();
        _etype100 = _rtmp3101.etype;
        _size97 = _rtmp3101.size;
        for (var _i102 = 0; _i102 < _size97; ++_i102)
        {
          var elem103 = null;
          elem103 = new ttypes.MiniStruct();
          elem103.read(input);
          this.my_structset.push(elem103);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MegaStruct.prototype.write = function(output) {
  output.writeStructBegin('MegaStruct');
  if (this.my_bool !== null && this.my_bool !== undefined) {
    output.writeFieldBegin('my_bool', Thrift.Type.BOOL, 1);
    output.writeBool(this.my_bool);
    output.writeFieldEnd();
  }
  if (this.my_byte !== null && this.my_byte !== undefined) {
    output.writeFieldBegin('my_byte', Thrift.Type.BYTE, 2);
    output.writeByte(this.my_byte);
    output.writeFieldEnd();
  }
  if (this.my_16bit_int !== null && this.my_16bit_int !== undefined) {
    output.writeFieldBegin('my_16bit_int', Thrift.Type.I16, 3);
    output.writeI16(this.my_16bit_int);
    output.writeFieldEnd();
  }
  if (this.my_32bit_int !== null && this.my_32bit_int !== undefined) {
    output.writeFieldBegin('my_32bit_int', Thrift.Type.I32, 4);
    output.writeI32(this.my_32bit_int);
    output.writeFieldEnd();
  }
  if (this.my_64bit_int !== null && this.my_64bit_int !== undefined) {
    output.writeFieldBegin('my_64bit_int', Thrift.Type.I64, 5);
    output.writeI64(this.my_64bit_int);
    output.writeFieldEnd();
  }
  if (this.my_double !== null && this.my_double !== undefined) {
    output.writeFieldBegin('my_double', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.my_double);
    output.writeFieldEnd();
  }
  if (this.my_string !== null && this.my_string !== undefined) {
    output.writeFieldBegin('my_string', Thrift.Type.STRING, 7);
    output.writeString(this.my_string);
    output.writeFieldEnd();
  }
  if (this.my_binary !== null && this.my_binary !== undefined) {
    output.writeFieldBegin('my_binary', Thrift.Type.STRING, 8);
    output.writeBinary(this.my_binary);
    output.writeFieldEnd();
  }
  if (this.my_string_string_map !== null && this.my_string_string_map !== undefined) {
    output.writeFieldBegin('my_string_string_map', Thrift.Type.MAP, 9);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.my_string_string_map));
    for (var kiter104 in this.my_string_string_map)
    {
      if (this.my_string_string_map.hasOwnProperty(kiter104))
      {
        var viter105 = this.my_string_string_map[kiter104];
        output.writeString(kiter104);
        output.writeString(viter105);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.my_string_enum_map !== null && this.my_string_enum_map !== undefined) {
    output.writeFieldBegin('my_string_enum_map', Thrift.Type.MAP, 10);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.my_string_enum_map));
    for (var kiter106 in this.my_string_enum_map)
    {
      if (this.my_string_enum_map.hasOwnProperty(kiter106))
      {
        var viter107 = this.my_string_enum_map[kiter106];
        output.writeString(kiter106);
        output.writeI32(viter107);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.my_enum_string_map !== null && this.my_enum_string_map !== undefined) {
    output.writeFieldBegin('my_enum_string_map', Thrift.Type.MAP, 11);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.my_enum_string_map));
    for (var kiter108 in this.my_enum_string_map)
    {
      if (this.my_enum_string_map.hasOwnProperty(kiter108))
      {
        var viter109 = this.my_enum_string_map[kiter108];
        output.writeI32(kiter108);
        output.writeString(viter109);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.my_enum_struct_map !== null && this.my_enum_struct_map !== undefined) {
    output.writeFieldBegin('my_enum_struct_map', Thrift.Type.MAP, 12);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRUCT, Thrift.objectLength(this.my_enum_struct_map));
    for (var kiter110 in this.my_enum_struct_map)
    {
      if (this.my_enum_struct_map.hasOwnProperty(kiter110))
      {
        var viter111 = this.my_enum_struct_map[kiter110];
        output.writeI32(kiter110);
        viter111.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.my_enum_stringlist_map !== null && this.my_enum_stringlist_map !== undefined) {
    output.writeFieldBegin('my_enum_stringlist_map', Thrift.Type.MAP, 13);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.LIST, Thrift.objectLength(this.my_enum_stringlist_map));
    for (var kiter112 in this.my_enum_stringlist_map)
    {
      if (this.my_enum_stringlist_map.hasOwnProperty(kiter112))
      {
        var viter113 = this.my_enum_stringlist_map[kiter112];
        output.writeI32(kiter112);
        output.writeListBegin(Thrift.Type.STRING, viter113.length);
        for (var iter114 in viter113)
        {
          if (viter113.hasOwnProperty(iter114))
          {
            iter114 = viter113[iter114];
            output.writeString(iter114);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.my_enum_structlist_map !== null && this.my_enum_structlist_map !== undefined) {
    output.writeFieldBegin('my_enum_structlist_map', Thrift.Type.MAP, 14);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.LIST, Thrift.objectLength(this.my_enum_structlist_map));
    for (var kiter115 in this.my_enum_structlist_map)
    {
      if (this.my_enum_structlist_map.hasOwnProperty(kiter115))
      {
        var viter116 = this.my_enum_structlist_map[kiter115];
        output.writeI32(kiter115);
        output.writeListBegin(Thrift.Type.STRUCT, viter116.length);
        for (var iter117 in viter116)
        {
          if (viter116.hasOwnProperty(iter117))
          {
            iter117 = viter116[iter117];
            iter117.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.my_stringlist !== null && this.my_stringlist !== undefined) {
    output.writeFieldBegin('my_stringlist', Thrift.Type.LIST, 15);
    output.writeListBegin(Thrift.Type.STRING, this.my_stringlist.length);
    for (var iter118 in this.my_stringlist)
    {
      if (this.my_stringlist.hasOwnProperty(iter118))
      {
        iter118 = this.my_stringlist[iter118];
        output.writeString(iter118);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.my_structlist !== null && this.my_structlist !== undefined) {
    output.writeFieldBegin('my_structlist', Thrift.Type.LIST, 16);
    output.writeListBegin(Thrift.Type.STRUCT, this.my_structlist.length);
    for (var iter119 in this.my_structlist)
    {
      if (this.my_structlist.hasOwnProperty(iter119))
      {
        iter119 = this.my_structlist[iter119];
        iter119.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.my_enumlist !== null && this.my_enumlist !== undefined) {
    output.writeFieldBegin('my_enumlist', Thrift.Type.LIST, 17);
    output.writeListBegin(Thrift.Type.I32, this.my_enumlist.length);
    for (var iter120 in this.my_enumlist)
    {
      if (this.my_enumlist.hasOwnProperty(iter120))
      {
        iter120 = this.my_enumlist[iter120];
        output.writeI32(iter120);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.my_stringset !== null && this.my_stringset !== undefined) {
    output.writeFieldBegin('my_stringset', Thrift.Type.SET, 18);
    output.writeSetBegin(Thrift.Type.STRING, this.my_stringset.length);
    for (var iter121 in this.my_stringset)
    {
      if (this.my_stringset.hasOwnProperty(iter121))
      {
        iter121 = this.my_stringset[iter121];
        output.writeString(iter121);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.my_enumset !== null && this.my_enumset !== undefined) {
    output.writeFieldBegin('my_enumset', Thrift.Type.SET, 19);
    output.writeSetBegin(Thrift.Type.I32, this.my_enumset.length);
    for (var iter122 in this.my_enumset)
    {
      if (this.my_enumset.hasOwnProperty(iter122))
      {
        iter122 = this.my_enumset[iter122];
        output.writeI32(iter122);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.my_structset !== null && this.my_structset !== undefined) {
    output.writeFieldBegin('my_structset', Thrift.Type.SET, 20);
    output.writeSetBegin(Thrift.Type.STRUCT, this.my_structset.length);
    for (var iter123 in this.my_structset)
    {
      if (this.my_structset.hasOwnProperty(iter123))
      {
        iter123 = this.my_structset[iter123];
        iter123.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

