//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
PropValueUnion = module.exports.PropValueUnion = function(args) {
  this.intValue = null;
  this.longValue = null;
  this.stringValue = null;
  this.doubleValue = null;
  this.flag = null;
  this.lString = null;
  this.unionMStringString = null;
  if (args) {
    if (args.intValue !== undefined) {
      this.intValue = args.intValue;
    }
    if (args.longValue !== undefined) {
      this.longValue = args.longValue;
    }
    if (args.stringValue !== undefined) {
      this.stringValue = args.stringValue;
    }
    if (args.doubleValue !== undefined) {
      this.doubleValue = args.doubleValue;
    }
    if (args.flag !== undefined) {
      this.flag = args.flag;
    }
    if (args.lString !== undefined) {
      this.lString = args.lString;
    }
    if (args.unionMStringString !== undefined) {
      this.unionMStringString = args.unionMStringString;
    }
  }
};
PropValueUnion.prototype = {};
PropValueUnion.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.intValue = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.longValue = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.stringValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.doubleValue = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.flag = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.lString = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.lString.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size7 = 0;
        var _rtmp311;
        this.unionMStringString = {};
        var _ktype8 = 0;
        var _vtype9 = 0;
        _rtmp311 = input.readMapBegin();
        _ktype8 = _rtmp311.ktype;
        _vtype9 = _rtmp311.vtype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var key13 = null;
          var val14 = null;
          key13 = input.readString();
          val14 = input.readString();
          this.unionMStringString[key13] = val14;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PropValueUnion.prototype.write = function(output) {
  output.writeStructBegin('PropValueUnion');
  if (this.intValue !== null && this.intValue !== undefined) {
    output.writeFieldBegin('intValue', Thrift.Type.I32, 1);
    output.writeI32(this.intValue);
    output.writeFieldEnd();
  }
  if (this.longValue !== null && this.longValue !== undefined) {
    output.writeFieldBegin('longValue', Thrift.Type.I64, 2);
    output.writeI64(this.longValue);
    output.writeFieldEnd();
  }
  if (this.stringValue !== null && this.stringValue !== undefined) {
    output.writeFieldBegin('stringValue', Thrift.Type.STRING, 3);
    output.writeString(this.stringValue);
    output.writeFieldEnd();
  }
  if (this.doubleValue !== null && this.doubleValue !== undefined) {
    output.writeFieldBegin('doubleValue', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.doubleValue);
    output.writeFieldEnd();
  }
  if (this.flag !== null && this.flag !== undefined) {
    output.writeFieldBegin('flag', Thrift.Type.BOOL, 5);
    output.writeBool(this.flag);
    output.writeFieldEnd();
  }
  if (this.lString !== null && this.lString !== undefined) {
    output.writeFieldBegin('lString', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.lString.length);
    for (var iter15 in this.lString)
    {
      if (this.lString.hasOwnProperty(iter15))
      {
        iter15 = this.lString[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.unionMStringString !== null && this.unionMStringString !== undefined) {
    output.writeFieldBegin('unionMStringString', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.unionMStringString));
    for (var kiter16 in this.unionMStringString)
    {
      if (this.unionMStringString.hasOwnProperty(kiter16))
      {
        var viter17 = this.unionMStringString[kiter16];
        output.writeString(kiter16);
        output.writeString(viter17);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IntString = module.exports.IntString = function(args) {
  this.myint = null;
  this.myString = null;
  this.underscore_int = null;
  if (args) {
    if (args.myint !== undefined) {
      this.myint = args.myint;
    }
    if (args.myString !== undefined) {
      this.myString = args.myString;
    }
    if (args.underscore_int !== undefined) {
      this.underscore_int = args.underscore_int;
    }
  }
};
IntString.prototype = {};
IntString.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.myint = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.myString = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.underscore_int = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IntString.prototype.write = function(output) {
  output.writeStructBegin('IntString');
  if (this.myint !== null && this.myint !== undefined) {
    output.writeFieldBegin('myint', Thrift.Type.I32, 1);
    output.writeI32(this.myint);
    output.writeFieldEnd();
  }
  if (this.myString !== null && this.myString !== undefined) {
    output.writeFieldBegin('myString', Thrift.Type.STRING, 2);
    output.writeString(this.myString);
    output.writeFieldEnd();
  }
  if (this.underscore_int !== null && this.underscore_int !== undefined) {
    output.writeFieldBegin('underscore_int', Thrift.Type.I32, 3);
    output.writeI32(this.underscore_int);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Complex = module.exports.Complex = function(args) {
  this.aint = null;
  this.aString = null;
  this.lint = null;
  this.lString = null;
  this.lintString = null;
  this.mStringString = null;
  this.attributes = null;
  this.unionField1 = null;
  this.unionField2 = null;
  this.unionField3 = null;
  if (args) {
    if (args.aint !== undefined) {
      this.aint = args.aint;
    }
    if (args.aString !== undefined) {
      this.aString = args.aString;
    }
    if (args.lint !== undefined) {
      this.lint = args.lint;
    }
    if (args.lString !== undefined) {
      this.lString = args.lString;
    }
    if (args.lintString !== undefined) {
      this.lintString = args.lintString;
    }
    if (args.mStringString !== undefined) {
      this.mStringString = args.mStringString;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.unionField1 !== undefined) {
      this.unionField1 = args.unionField1;
    }
    if (args.unionField2 !== undefined) {
      this.unionField2 = args.unionField2;
    }
    if (args.unionField3 !== undefined) {
      this.unionField3 = args.unionField3;
    }
  }
};
Complex.prototype = {};
Complex.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.aint = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.aString = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size18 = 0;
        var _rtmp322;
        this.lint = [];
        var _etype21 = 0;
        _rtmp322 = input.readListBegin();
        _etype21 = _rtmp322.etype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var elem24 = null;
          elem24 = input.readI32();
          this.lint.push(elem24);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size25 = 0;
        var _rtmp329;
        this.lString = [];
        var _etype28 = 0;
        _rtmp329 = input.readListBegin();
        _etype28 = _rtmp329.etype;
        _size25 = _rtmp329.size;
        for (var _i30 = 0; _i30 < _size25; ++_i30)
        {
          var elem31 = null;
          elem31 = input.readString();
          this.lString.push(elem31);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.lintString = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.IntString();
          elem38.read(input);
          this.lintString.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size39 = 0;
        var _rtmp343;
        this.mStringString = {};
        var _ktype40 = 0;
        var _vtype41 = 0;
        _rtmp343 = input.readMapBegin();
        _ktype40 = _rtmp343.ktype;
        _vtype41 = _rtmp343.vtype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var key45 = null;
          var val46 = null;
          key45 = input.readString();
          val46 = input.readString();
          this.mStringString[key45] = val46;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size47 = 0;
        var _rtmp351;
        this.attributes = {};
        var _ktype48 = 0;
        var _vtype49 = 0;
        _rtmp351 = input.readMapBegin();
        _ktype48 = _rtmp351.ktype;
        _vtype49 = _rtmp351.vtype;
        _size47 = _rtmp351.size;
        for (var _i52 = 0; _i52 < _size47; ++_i52)
        {
          var key53 = null;
          var val54 = null;
          key53 = input.readString();
          var _size55 = 0;
          var _rtmp359;
          val54 = {};
          var _ktype56 = 0;
          var _vtype57 = 0;
          _rtmp359 = input.readMapBegin();
          _ktype56 = _rtmp359.ktype;
          _vtype57 = _rtmp359.vtype;
          _size55 = _rtmp359.size;
          for (var _i60 = 0; _i60 < _size55; ++_i60)
          {
            var key61 = null;
            var val62 = null;
            key61 = input.readString();
            var _size63 = 0;
            var _rtmp367;
            val62 = {};
            var _ktype64 = 0;
            var _vtype65 = 0;
            _rtmp367 = input.readMapBegin();
            _ktype64 = _rtmp367.ktype;
            _vtype65 = _rtmp367.vtype;
            _size63 = _rtmp367.size;
            for (var _i68 = 0; _i68 < _size63; ++_i68)
            {
              var key69 = null;
              var val70 = null;
              key69 = input.readString();
              val70 = new ttypes.PropValueUnion();
              val70.read(input);
              val62[key69] = val70;
            }
            input.readMapEnd();
            val54[key61] = val62;
          }
          input.readMapEnd();
          this.attributes[key53] = val54;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.unionField1 = new ttypes.PropValueUnion();
        this.unionField1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.unionField2 = new ttypes.PropValueUnion();
        this.unionField2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.unionField3 = new ttypes.PropValueUnion();
        this.unionField3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Complex.prototype.write = function(output) {
  output.writeStructBegin('Complex');
  if (this.aint !== null && this.aint !== undefined) {
    output.writeFieldBegin('aint', Thrift.Type.I32, 1);
    output.writeI32(this.aint);
    output.writeFieldEnd();
  }
  if (this.aString !== null && this.aString !== undefined) {
    output.writeFieldBegin('aString', Thrift.Type.STRING, 2);
    output.writeString(this.aString);
    output.writeFieldEnd();
  }
  if (this.lint !== null && this.lint !== undefined) {
    output.writeFieldBegin('lint', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.lint.length);
    for (var iter71 in this.lint)
    {
      if (this.lint.hasOwnProperty(iter71))
      {
        iter71 = this.lint[iter71];
        output.writeI32(iter71);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.lString !== null && this.lString !== undefined) {
    output.writeFieldBegin('lString', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.lString.length);
    for (var iter72 in this.lString)
    {
      if (this.lString.hasOwnProperty(iter72))
      {
        iter72 = this.lString[iter72];
        output.writeString(iter72);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.lintString !== null && this.lintString !== undefined) {
    output.writeFieldBegin('lintString', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.lintString.length);
    for (var iter73 in this.lintString)
    {
      if (this.lintString.hasOwnProperty(iter73))
      {
        iter73 = this.lintString[iter73];
        iter73.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.mStringString !== null && this.mStringString !== undefined) {
    output.writeFieldBegin('mStringString', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.mStringString));
    for (var kiter74 in this.mStringString)
    {
      if (this.mStringString.hasOwnProperty(kiter74))
      {
        var viter75 = this.mStringString[kiter74];
        output.writeString(kiter74);
        output.writeString(viter75);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.attributes));
    for (var kiter76 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter76))
      {
        var viter77 = this.attributes[kiter76];
        output.writeString(kiter76);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter77));
        for (var kiter78 in viter77)
        {
          if (viter77.hasOwnProperty(kiter78))
          {
            var viter79 = viter77[kiter78];
            output.writeString(kiter78);
            output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter79));
            for (var kiter80 in viter79)
            {
              if (viter79.hasOwnProperty(kiter80))
              {
                var viter81 = viter79[kiter80];
                output.writeString(kiter80);
                viter81.write(output);
              }
            }
            output.writeMapEnd();
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.unionField1 !== null && this.unionField1 !== undefined) {
    output.writeFieldBegin('unionField1', Thrift.Type.STRUCT, 8);
    this.unionField1.write(output);
    output.writeFieldEnd();
  }
  if (this.unionField2 !== null && this.unionField2 !== undefined) {
    output.writeFieldBegin('unionField2', Thrift.Type.STRUCT, 9);
    this.unionField2.write(output);
    output.writeFieldEnd();
  }
  if (this.unionField3 !== null && this.unionField3 !== undefined) {
    output.writeFieldBegin('unionField3', Thrift.Type.STRUCT, 10);
    this.unionField3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetIntString = module.exports.SetIntString = function(args) {
  this.sIntString = null;
  this.aString = null;
  if (args) {
    if (args.sIntString !== undefined) {
      this.sIntString = args.sIntString;
    }
    if (args.aString !== undefined) {
      this.aString = args.aString;
    }
  }
};
SetIntString.prototype = {};
SetIntString.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size82 = 0;
        var _rtmp386;
        this.sIntString = [];
        var _etype85 = 0;
        _rtmp386 = input.readSetBegin();
        _etype85 = _rtmp386.etype;
        _size82 = _rtmp386.size;
        for (var _i87 = 0; _i87 < _size82; ++_i87)
        {
          var elem88 = null;
          elem88 = new ttypes.IntString();
          elem88.read(input);
          this.sIntString.push(elem88);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.aString = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetIntString.prototype.write = function(output) {
  output.writeStructBegin('SetIntString');
  if (this.sIntString !== null && this.sIntString !== undefined) {
    output.writeFieldBegin('sIntString', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.STRUCT, this.sIntString.length);
    for (var iter89 in this.sIntString)
    {
      if (this.sIntString.hasOwnProperty(iter89))
      {
        iter89 = this.sIntString[iter89];
        iter89.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.aString !== null && this.aString !== undefined) {
    output.writeFieldBegin('aString', Thrift.Type.STRING, 2);
    output.writeString(this.aString);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

